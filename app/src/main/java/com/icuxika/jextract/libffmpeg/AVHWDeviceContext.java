// Generated by jextract

package com.icuxika.jextract.libffmpeg;

import java.lang.invoke.MethodHandle;
import java.lang.invoke.VarHandle;
import java.nio.ByteOrder;
import java.lang.foreign.*;
import static java.lang.foreign.ValueLayout.*;
/**
 * {@snippet :
 * struct AVHWDeviceContext {
 *     const AVClass* av_class;
 *     AVHWDeviceInternal* internal;
 *     enum AVHWDeviceType type;
 *     void* hwctx;
 *     void (*free)(struct AVHWDeviceContext*);
 *     void* user_opaque;
 * };
 * }
 */
public class AVHWDeviceContext {

    static final StructLayout $struct$LAYOUT = MemoryLayout.structLayout(
        Constants$root.C_POINTER$LAYOUT.withName("av_class"),
        Constants$root.C_POINTER$LAYOUT.withName("internal"),
        Constants$root.C_LONG$LAYOUT.withName("type"),
        MemoryLayout.paddingLayout(32),
        Constants$root.C_POINTER$LAYOUT.withName("hwctx"),
        Constants$root.C_POINTER$LAYOUT.withName("free"),
        Constants$root.C_POINTER$LAYOUT.withName("user_opaque")
    ).withName("AVHWDeviceContext");
    public static MemoryLayout $LAYOUT() {
        return AVHWDeviceContext.$struct$LAYOUT;
    }
    static final VarHandle av_class$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("av_class"));
    public static VarHandle av_class$VH() {
        return AVHWDeviceContext.av_class$VH;
    }
    /**
     * Getter for field:
     * {@snippet :
     * const AVClass* av_class;
     * }
     */
    public static MemorySegment av_class$get(MemorySegment seg) {
        return (java.lang.foreign.MemorySegment)AVHWDeviceContext.av_class$VH.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * const AVClass* av_class;
     * }
     */
    public static void av_class$set(MemorySegment seg, MemorySegment x) {
        AVHWDeviceContext.av_class$VH.set(seg, x);
    }
    public static MemorySegment av_class$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemorySegment)AVHWDeviceContext.av_class$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void av_class$set(MemorySegment seg, long index, MemorySegment x) {
        AVHWDeviceContext.av_class$VH.set(seg.asSlice(index*sizeof()), x);
    }
    static final VarHandle internal$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("internal"));
    public static VarHandle internal$VH() {
        return AVHWDeviceContext.internal$VH;
    }
    /**
     * Getter for field:
     * {@snippet :
     * AVHWDeviceInternal* internal;
     * }
     */
    public static MemorySegment internal$get(MemorySegment seg) {
        return (java.lang.foreign.MemorySegment)AVHWDeviceContext.internal$VH.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * AVHWDeviceInternal* internal;
     * }
     */
    public static void internal$set(MemorySegment seg, MemorySegment x) {
        AVHWDeviceContext.internal$VH.set(seg, x);
    }
    public static MemorySegment internal$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemorySegment)AVHWDeviceContext.internal$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void internal$set(MemorySegment seg, long index, MemorySegment x) {
        AVHWDeviceContext.internal$VH.set(seg.asSlice(index*sizeof()), x);
    }
    static final VarHandle type$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("type"));
    public static VarHandle type$VH() {
        return AVHWDeviceContext.type$VH;
    }
    /**
     * Getter for field:
     * {@snippet :
     * enum AVHWDeviceType type;
     * }
     */
    public static int type$get(MemorySegment seg) {
        return (int)AVHWDeviceContext.type$VH.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * enum AVHWDeviceType type;
     * }
     */
    public static void type$set(MemorySegment seg, int x) {
        AVHWDeviceContext.type$VH.set(seg, x);
    }
    public static int type$get(MemorySegment seg, long index) {
        return (int)AVHWDeviceContext.type$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void type$set(MemorySegment seg, long index, int x) {
        AVHWDeviceContext.type$VH.set(seg.asSlice(index*sizeof()), x);
    }
    static final VarHandle hwctx$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("hwctx"));
    public static VarHandle hwctx$VH() {
        return AVHWDeviceContext.hwctx$VH;
    }
    /**
     * Getter for field:
     * {@snippet :
     * void* hwctx;
     * }
     */
    public static MemorySegment hwctx$get(MemorySegment seg) {
        return (java.lang.foreign.MemorySegment)AVHWDeviceContext.hwctx$VH.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * void* hwctx;
     * }
     */
    public static void hwctx$set(MemorySegment seg, MemorySegment x) {
        AVHWDeviceContext.hwctx$VH.set(seg, x);
    }
    public static MemorySegment hwctx$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemorySegment)AVHWDeviceContext.hwctx$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void hwctx$set(MemorySegment seg, long index, MemorySegment x) {
        AVHWDeviceContext.hwctx$VH.set(seg.asSlice(index*sizeof()), x);
    }
    static final FunctionDescriptor free$FUNC = FunctionDescriptor.ofVoid(
        Constants$root.C_POINTER$LAYOUT
    );
    static final FunctionDescriptor free_UP$FUNC = FunctionDescriptor.ofVoid(
        Constants$root.C_POINTER$LAYOUT
    );
    static final MethodHandle free_UP$MH = RuntimeHelper.upcallHandle(free.class, "apply", AVHWDeviceContext.free_UP$FUNC);
    static final FunctionDescriptor free_DOWN$FUNC = FunctionDescriptor.ofVoid(
        Constants$root.C_POINTER$LAYOUT
    );
    static final MethodHandle free_DOWN$MH = RuntimeHelper.downcallHandle(
        AVHWDeviceContext.free_DOWN$FUNC
    );
    /**
     * {@snippet :
 * void (*free)(struct AVHWDeviceContext*);
     * }
     */
    public interface free {

        void apply(java.lang.foreign.MemorySegment _x0);
        static MemorySegment allocate(free fi, SegmentScope scope) {
            return RuntimeHelper.upcallStub(AVHWDeviceContext.free_UP$MH, fi, AVHWDeviceContext.free$FUNC, scope);
        }
        static free ofAddress(MemorySegment addr, SegmentScope scope) {
            MemorySegment symbol = MemorySegment.ofAddress(addr.address(), 0, scope);
            return (java.lang.foreign.MemorySegment __x0) -> {
                try {
                    AVHWDeviceContext.free_DOWN$MH.invokeExact(symbol, __x0);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    static final VarHandle free$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("free"));
    public static VarHandle free$VH() {
        return AVHWDeviceContext.free$VH;
    }
    /**
     * Getter for field:
     * {@snippet :
     * void (*free)(struct AVHWDeviceContext*);
     * }
     */
    public static MemorySegment free$get(MemorySegment seg) {
        return (java.lang.foreign.MemorySegment)AVHWDeviceContext.free$VH.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * void (*free)(struct AVHWDeviceContext*);
     * }
     */
    public static void free$set(MemorySegment seg, MemorySegment x) {
        AVHWDeviceContext.free$VH.set(seg, x);
    }
    public static MemorySegment free$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemorySegment)AVHWDeviceContext.free$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void free$set(MemorySegment seg, long index, MemorySegment x) {
        AVHWDeviceContext.free$VH.set(seg.asSlice(index*sizeof()), x);
    }
    public static free free(MemorySegment segment, SegmentScope scope) {
        return free.ofAddress(free$get(segment), scope);
    }
    static final VarHandle user_opaque$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("user_opaque"));
    public static VarHandle user_opaque$VH() {
        return AVHWDeviceContext.user_opaque$VH;
    }
    /**
     * Getter for field:
     * {@snippet :
     * void* user_opaque;
     * }
     */
    public static MemorySegment user_opaque$get(MemorySegment seg) {
        return (java.lang.foreign.MemorySegment)AVHWDeviceContext.user_opaque$VH.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * void* user_opaque;
     * }
     */
    public static void user_opaque$set(MemorySegment seg, MemorySegment x) {
        AVHWDeviceContext.user_opaque$VH.set(seg, x);
    }
    public static MemorySegment user_opaque$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemorySegment)AVHWDeviceContext.user_opaque$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void user_opaque$set(MemorySegment seg, long index, MemorySegment x) {
        AVHWDeviceContext.user_opaque$VH.set(seg.asSlice(index*sizeof()), x);
    }
    public static long sizeof() { return $LAYOUT().byteSize(); }
    public static MemorySegment allocate(SegmentAllocator allocator) { return allocator.allocate($LAYOUT()); }
    public static MemorySegment allocateArray(long len, SegmentAllocator allocator) {
        return allocator.allocate(MemoryLayout.sequenceLayout(len, $LAYOUT()));
    }
    public static MemorySegment ofAddress(MemorySegment addr, SegmentScope scope) { return RuntimeHelper.asArray(addr, $LAYOUT(), 1, scope); }
}


