// Generated by jextract

package com.icuxika.jextract.libffmpeg;

import java.lang.invoke.MethodHandle;
import java.lang.invoke.VarHandle;
import java.nio.ByteOrder;
import java.lang.foreign.*;
import static java.lang.foreign.ValueLayout.*;
/**
 * {@snippet :
 * struct AVFormatContext {
 *     const AVClass* av_class;
 *     struct AVInputFormat* iformat;
 *     struct AVOutputFormat* oformat;
 *     void* priv_data;
 *     AVIOContext* pb;
 *     int ctx_flags;
 *     unsigned int nb_streams;
 *     AVStream** streams;
 *     char* url;
 *     int64_t start_time;
 *     int64_t duration;
 *     int64_t bit_rate;
 *     unsigned int packet_size;
 *     int max_delay;
 *     int flags;
 *     int64_t probesize;
 *     int64_t max_analyze_duration;
 *     const uint8_t* key;
 *     int keylen;
 *     unsigned int nb_programs;
 *     AVProgram** programs;
 *     enum AVCodecID video_codec_id;
 *     enum AVCodecID audio_codec_id;
 *     enum AVCodecID subtitle_codec_id;
 *     unsigned int max_index_size;
 *     unsigned int max_picture_buffer;
 *     unsigned int nb_chapters;
 *     AVChapter** chapters;
 *     AVDictionary* metadata;
 *     int64_t start_time_realtime;
 *     int fps_probe_size;
 *     int error_recognition;
 *     AVIOInterruptCB interrupt_callback;
 *     int debug;
 *     int64_t max_interleave_delta;
 *     int strict_std_compliance;
 *     int event_flags;
 *     int max_ts_probe;
 *     int avoid_negative_ts;
 *     int ts_id;
 *     int audio_preload;
 *     int max_chunk_duration;
 *     int max_chunk_size;
 *     int use_wallclock_as_timestamps;
 *     int avio_flags;
 *     enum AVDurationEstimationMethod duration_estimation_method;
 *     int64_t skip_initial_bytes;
 *     unsigned int correct_ts_overflow;
 *     int seek2any;
 *     int flush_packets;
 *     int probe_score;
 *     int format_probesize;
 *     char* codec_whitelist;
 *     char* format_whitelist;
 *     int io_repositioned;
 *     const AVCodec* video_codec;
 *     const AVCodec* audio_codec;
 *     const AVCodec* subtitle_codec;
 *     const AVCodec* data_codec;
 *     int metadata_header_padding;
 *     void* opaque;
 *     av_format_control_message control_message_cb;
 *     int64_t output_ts_offset;
 *     uint8_t* dump_separator;
 *     enum AVCodecID data_codec_id;
 *     char* protocol_whitelist;
 *     int (*io_open)(struct AVFormatContext*,AVIOContext**,char*,int,AVDictionary**);
 *     void (*io_close)(struct AVFormatContext*,AVIOContext*);
 *     char* protocol_blacklist;
 *     int max_streams;
 *     int skip_estimate_duration_from_pts;
 *     int max_probe_packets;
 *     int (*io_close2)(struct AVFormatContext*,AVIOContext*);
 * };
 * }
 */
public class AVFormatContext {

    static final StructLayout $struct$LAYOUT = MemoryLayout.structLayout(
        Constants$root.C_POINTER$LAYOUT.withName("av_class"),
        Constants$root.C_POINTER$LAYOUT.withName("iformat"),
        Constants$root.C_POINTER$LAYOUT.withName("oformat"),
        Constants$root.C_POINTER$LAYOUT.withName("priv_data"),
        Constants$root.C_POINTER$LAYOUT.withName("pb"),
        Constants$root.C_LONG$LAYOUT.withName("ctx_flags"),
        Constants$root.C_LONG$LAYOUT.withName("nb_streams"),
        Constants$root.C_POINTER$LAYOUT.withName("streams"),
        Constants$root.C_POINTER$LAYOUT.withName("url"),
        Constants$root.C_LONG_LONG$LAYOUT.withName("start_time"),
        Constants$root.C_LONG_LONG$LAYOUT.withName("duration"),
        Constants$root.C_LONG_LONG$LAYOUT.withName("bit_rate"),
        Constants$root.C_LONG$LAYOUT.withName("packet_size"),
        Constants$root.C_LONG$LAYOUT.withName("max_delay"),
        Constants$root.C_LONG$LAYOUT.withName("flags"),
        MemoryLayout.paddingLayout(32),
        Constants$root.C_LONG_LONG$LAYOUT.withName("probesize"),
        Constants$root.C_LONG_LONG$LAYOUT.withName("max_analyze_duration"),
        Constants$root.C_POINTER$LAYOUT.withName("key"),
        Constants$root.C_LONG$LAYOUT.withName("keylen"),
        Constants$root.C_LONG$LAYOUT.withName("nb_programs"),
        Constants$root.C_POINTER$LAYOUT.withName("programs"),
        Constants$root.C_LONG$LAYOUT.withName("video_codec_id"),
        Constants$root.C_LONG$LAYOUT.withName("audio_codec_id"),
        Constants$root.C_LONG$LAYOUT.withName("subtitle_codec_id"),
        Constants$root.C_LONG$LAYOUT.withName("max_index_size"),
        Constants$root.C_LONG$LAYOUT.withName("max_picture_buffer"),
        Constants$root.C_LONG$LAYOUT.withName("nb_chapters"),
        Constants$root.C_POINTER$LAYOUT.withName("chapters"),
        Constants$root.C_POINTER$LAYOUT.withName("metadata"),
        Constants$root.C_LONG_LONG$LAYOUT.withName("start_time_realtime"),
        Constants$root.C_LONG$LAYOUT.withName("fps_probe_size"),
        Constants$root.C_LONG$LAYOUT.withName("error_recognition"),
        MemoryLayout.structLayout(
            Constants$root.C_POINTER$LAYOUT.withName("callback"),
            Constants$root.C_POINTER$LAYOUT.withName("opaque")
        ).withName("interrupt_callback"),
        Constants$root.C_LONG$LAYOUT.withName("debug"),
        MemoryLayout.paddingLayout(32),
        Constants$root.C_LONG_LONG$LAYOUT.withName("max_interleave_delta"),
        Constants$root.C_LONG$LAYOUT.withName("strict_std_compliance"),
        Constants$root.C_LONG$LAYOUT.withName("event_flags"),
        Constants$root.C_LONG$LAYOUT.withName("max_ts_probe"),
        Constants$root.C_LONG$LAYOUT.withName("avoid_negative_ts"),
        Constants$root.C_LONG$LAYOUT.withName("ts_id"),
        Constants$root.C_LONG$LAYOUT.withName("audio_preload"),
        Constants$root.C_LONG$LAYOUT.withName("max_chunk_duration"),
        Constants$root.C_LONG$LAYOUT.withName("max_chunk_size"),
        Constants$root.C_LONG$LAYOUT.withName("use_wallclock_as_timestamps"),
        Constants$root.C_LONG$LAYOUT.withName("avio_flags"),
        Constants$root.C_LONG$LAYOUT.withName("duration_estimation_method"),
        MemoryLayout.paddingLayout(32),
        Constants$root.C_LONG_LONG$LAYOUT.withName("skip_initial_bytes"),
        Constants$root.C_LONG$LAYOUT.withName("correct_ts_overflow"),
        Constants$root.C_LONG$LAYOUT.withName("seek2any"),
        Constants$root.C_LONG$LAYOUT.withName("flush_packets"),
        Constants$root.C_LONG$LAYOUT.withName("probe_score"),
        Constants$root.C_LONG$LAYOUT.withName("format_probesize"),
        MemoryLayout.paddingLayout(32),
        Constants$root.C_POINTER$LAYOUT.withName("codec_whitelist"),
        Constants$root.C_POINTER$LAYOUT.withName("format_whitelist"),
        Constants$root.C_LONG$LAYOUT.withName("io_repositioned"),
        MemoryLayout.paddingLayout(32),
        Constants$root.C_POINTER$LAYOUT.withName("video_codec"),
        Constants$root.C_POINTER$LAYOUT.withName("audio_codec"),
        Constants$root.C_POINTER$LAYOUT.withName("subtitle_codec"),
        Constants$root.C_POINTER$LAYOUT.withName("data_codec"),
        Constants$root.C_LONG$LAYOUT.withName("metadata_header_padding"),
        MemoryLayout.paddingLayout(32),
        Constants$root.C_POINTER$LAYOUT.withName("opaque"),
        Constants$root.C_POINTER$LAYOUT.withName("control_message_cb"),
        Constants$root.C_LONG_LONG$LAYOUT.withName("output_ts_offset"),
        Constants$root.C_POINTER$LAYOUT.withName("dump_separator"),
        Constants$root.C_LONG$LAYOUT.withName("data_codec_id"),
        MemoryLayout.paddingLayout(32),
        Constants$root.C_POINTER$LAYOUT.withName("protocol_whitelist"),
        Constants$root.C_POINTER$LAYOUT.withName("io_open"),
        Constants$root.C_POINTER$LAYOUT.withName("io_close"),
        Constants$root.C_POINTER$LAYOUT.withName("protocol_blacklist"),
        Constants$root.C_LONG$LAYOUT.withName("max_streams"),
        Constants$root.C_LONG$LAYOUT.withName("skip_estimate_duration_from_pts"),
        Constants$root.C_LONG$LAYOUT.withName("max_probe_packets"),
        MemoryLayout.paddingLayout(32),
        Constants$root.C_POINTER$LAYOUT.withName("io_close2")
    ).withName("AVFormatContext");
    public static MemoryLayout $LAYOUT() {
        return AVFormatContext.$struct$LAYOUT;
    }
    static final VarHandle av_class$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("av_class"));
    public static VarHandle av_class$VH() {
        return AVFormatContext.av_class$VH;
    }
    /**
     * Getter for field:
     * {@snippet :
     * const AVClass* av_class;
     * }
     */
    public static MemorySegment av_class$get(MemorySegment seg) {
        return (java.lang.foreign.MemorySegment)AVFormatContext.av_class$VH.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * const AVClass* av_class;
     * }
     */
    public static void av_class$set(MemorySegment seg, MemorySegment x) {
        AVFormatContext.av_class$VH.set(seg, x);
    }
    public static MemorySegment av_class$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemorySegment)AVFormatContext.av_class$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void av_class$set(MemorySegment seg, long index, MemorySegment x) {
        AVFormatContext.av_class$VH.set(seg.asSlice(index*sizeof()), x);
    }
    static final VarHandle iformat$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("iformat"));
    public static VarHandle iformat$VH() {
        return AVFormatContext.iformat$VH;
    }
    /**
     * Getter for field:
     * {@snippet :
     * struct AVInputFormat* iformat;
     * }
     */
    public static MemorySegment iformat$get(MemorySegment seg) {
        return (java.lang.foreign.MemorySegment)AVFormatContext.iformat$VH.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * struct AVInputFormat* iformat;
     * }
     */
    public static void iformat$set(MemorySegment seg, MemorySegment x) {
        AVFormatContext.iformat$VH.set(seg, x);
    }
    public static MemorySegment iformat$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemorySegment)AVFormatContext.iformat$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void iformat$set(MemorySegment seg, long index, MemorySegment x) {
        AVFormatContext.iformat$VH.set(seg.asSlice(index*sizeof()), x);
    }
    static final VarHandle oformat$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("oformat"));
    public static VarHandle oformat$VH() {
        return AVFormatContext.oformat$VH;
    }
    /**
     * Getter for field:
     * {@snippet :
     * struct AVOutputFormat* oformat;
     * }
     */
    public static MemorySegment oformat$get(MemorySegment seg) {
        return (java.lang.foreign.MemorySegment)AVFormatContext.oformat$VH.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * struct AVOutputFormat* oformat;
     * }
     */
    public static void oformat$set(MemorySegment seg, MemorySegment x) {
        AVFormatContext.oformat$VH.set(seg, x);
    }
    public static MemorySegment oformat$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemorySegment)AVFormatContext.oformat$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void oformat$set(MemorySegment seg, long index, MemorySegment x) {
        AVFormatContext.oformat$VH.set(seg.asSlice(index*sizeof()), x);
    }
    static final VarHandle priv_data$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("priv_data"));
    public static VarHandle priv_data$VH() {
        return AVFormatContext.priv_data$VH;
    }
    /**
     * Getter for field:
     * {@snippet :
     * void* priv_data;
     * }
     */
    public static MemorySegment priv_data$get(MemorySegment seg) {
        return (java.lang.foreign.MemorySegment)AVFormatContext.priv_data$VH.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * void* priv_data;
     * }
     */
    public static void priv_data$set(MemorySegment seg, MemorySegment x) {
        AVFormatContext.priv_data$VH.set(seg, x);
    }
    public static MemorySegment priv_data$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemorySegment)AVFormatContext.priv_data$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void priv_data$set(MemorySegment seg, long index, MemorySegment x) {
        AVFormatContext.priv_data$VH.set(seg.asSlice(index*sizeof()), x);
    }
    static final VarHandle pb$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("pb"));
    public static VarHandle pb$VH() {
        return AVFormatContext.pb$VH;
    }
    /**
     * Getter for field:
     * {@snippet :
     * AVIOContext* pb;
     * }
     */
    public static MemorySegment pb$get(MemorySegment seg) {
        return (java.lang.foreign.MemorySegment)AVFormatContext.pb$VH.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * AVIOContext* pb;
     * }
     */
    public static void pb$set(MemorySegment seg, MemorySegment x) {
        AVFormatContext.pb$VH.set(seg, x);
    }
    public static MemorySegment pb$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemorySegment)AVFormatContext.pb$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void pb$set(MemorySegment seg, long index, MemorySegment x) {
        AVFormatContext.pb$VH.set(seg.asSlice(index*sizeof()), x);
    }
    static final VarHandle ctx_flags$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("ctx_flags"));
    public static VarHandle ctx_flags$VH() {
        return AVFormatContext.ctx_flags$VH;
    }
    /**
     * Getter for field:
     * {@snippet :
     * int ctx_flags;
     * }
     */
    public static int ctx_flags$get(MemorySegment seg) {
        return (int)AVFormatContext.ctx_flags$VH.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * int ctx_flags;
     * }
     */
    public static void ctx_flags$set(MemorySegment seg, int x) {
        AVFormatContext.ctx_flags$VH.set(seg, x);
    }
    public static int ctx_flags$get(MemorySegment seg, long index) {
        return (int)AVFormatContext.ctx_flags$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void ctx_flags$set(MemorySegment seg, long index, int x) {
        AVFormatContext.ctx_flags$VH.set(seg.asSlice(index*sizeof()), x);
    }
    static final VarHandle nb_streams$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("nb_streams"));
    public static VarHandle nb_streams$VH() {
        return AVFormatContext.nb_streams$VH;
    }
    /**
     * Getter for field:
     * {@snippet :
     * unsigned int nb_streams;
     * }
     */
    public static int nb_streams$get(MemorySegment seg) {
        return (int)AVFormatContext.nb_streams$VH.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * unsigned int nb_streams;
     * }
     */
    public static void nb_streams$set(MemorySegment seg, int x) {
        AVFormatContext.nb_streams$VH.set(seg, x);
    }
    public static int nb_streams$get(MemorySegment seg, long index) {
        return (int)AVFormatContext.nb_streams$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void nb_streams$set(MemorySegment seg, long index, int x) {
        AVFormatContext.nb_streams$VH.set(seg.asSlice(index*sizeof()), x);
    }
    static final VarHandle streams$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("streams"));
    public static VarHandle streams$VH() {
        return AVFormatContext.streams$VH;
    }
    /**
     * Getter for field:
     * {@snippet :
     * AVStream** streams;
     * }
     */
    public static MemorySegment streams$get(MemorySegment seg) {
        return (java.lang.foreign.MemorySegment)AVFormatContext.streams$VH.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * AVStream** streams;
     * }
     */
    public static void streams$set(MemorySegment seg, MemorySegment x) {
        AVFormatContext.streams$VH.set(seg, x);
    }
    public static MemorySegment streams$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemorySegment)AVFormatContext.streams$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void streams$set(MemorySegment seg, long index, MemorySegment x) {
        AVFormatContext.streams$VH.set(seg.asSlice(index*sizeof()), x);
    }
    static final VarHandle url$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("url"));
    public static VarHandle url$VH() {
        return AVFormatContext.url$VH;
    }
    /**
     * Getter for field:
     * {@snippet :
     * char* url;
     * }
     */
    public static MemorySegment url$get(MemorySegment seg) {
        return (java.lang.foreign.MemorySegment)AVFormatContext.url$VH.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * char* url;
     * }
     */
    public static void url$set(MemorySegment seg, MemorySegment x) {
        AVFormatContext.url$VH.set(seg, x);
    }
    public static MemorySegment url$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemorySegment)AVFormatContext.url$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void url$set(MemorySegment seg, long index, MemorySegment x) {
        AVFormatContext.url$VH.set(seg.asSlice(index*sizeof()), x);
    }
    static final VarHandle start_time$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("start_time"));
    public static VarHandle start_time$VH() {
        return AVFormatContext.start_time$VH;
    }
    /**
     * Getter for field:
     * {@snippet :
     * int64_t start_time;
     * }
     */
    public static long start_time$get(MemorySegment seg) {
        return (long)AVFormatContext.start_time$VH.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * int64_t start_time;
     * }
     */
    public static void start_time$set(MemorySegment seg, long x) {
        AVFormatContext.start_time$VH.set(seg, x);
    }
    public static long start_time$get(MemorySegment seg, long index) {
        return (long)AVFormatContext.start_time$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void start_time$set(MemorySegment seg, long index, long x) {
        AVFormatContext.start_time$VH.set(seg.asSlice(index*sizeof()), x);
    }
    static final VarHandle duration$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("duration"));
    public static VarHandle duration$VH() {
        return AVFormatContext.duration$VH;
    }
    /**
     * Getter for field:
     * {@snippet :
     * int64_t duration;
     * }
     */
    public static long duration$get(MemorySegment seg) {
        return (long)AVFormatContext.duration$VH.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * int64_t duration;
     * }
     */
    public static void duration$set(MemorySegment seg, long x) {
        AVFormatContext.duration$VH.set(seg, x);
    }
    public static long duration$get(MemorySegment seg, long index) {
        return (long)AVFormatContext.duration$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void duration$set(MemorySegment seg, long index, long x) {
        AVFormatContext.duration$VH.set(seg.asSlice(index*sizeof()), x);
    }
    static final VarHandle bit_rate$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("bit_rate"));
    public static VarHandle bit_rate$VH() {
        return AVFormatContext.bit_rate$VH;
    }
    /**
     * Getter for field:
     * {@snippet :
     * int64_t bit_rate;
     * }
     */
    public static long bit_rate$get(MemorySegment seg) {
        return (long)AVFormatContext.bit_rate$VH.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * int64_t bit_rate;
     * }
     */
    public static void bit_rate$set(MemorySegment seg, long x) {
        AVFormatContext.bit_rate$VH.set(seg, x);
    }
    public static long bit_rate$get(MemorySegment seg, long index) {
        return (long)AVFormatContext.bit_rate$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void bit_rate$set(MemorySegment seg, long index, long x) {
        AVFormatContext.bit_rate$VH.set(seg.asSlice(index*sizeof()), x);
    }
    static final VarHandle packet_size$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("packet_size"));
    public static VarHandle packet_size$VH() {
        return AVFormatContext.packet_size$VH;
    }
    /**
     * Getter for field:
     * {@snippet :
     * unsigned int packet_size;
     * }
     */
    public static int packet_size$get(MemorySegment seg) {
        return (int)AVFormatContext.packet_size$VH.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * unsigned int packet_size;
     * }
     */
    public static void packet_size$set(MemorySegment seg, int x) {
        AVFormatContext.packet_size$VH.set(seg, x);
    }
    public static int packet_size$get(MemorySegment seg, long index) {
        return (int)AVFormatContext.packet_size$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void packet_size$set(MemorySegment seg, long index, int x) {
        AVFormatContext.packet_size$VH.set(seg.asSlice(index*sizeof()), x);
    }
    static final VarHandle max_delay$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("max_delay"));
    public static VarHandle max_delay$VH() {
        return AVFormatContext.max_delay$VH;
    }
    /**
     * Getter for field:
     * {@snippet :
     * int max_delay;
     * }
     */
    public static int max_delay$get(MemorySegment seg) {
        return (int)AVFormatContext.max_delay$VH.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * int max_delay;
     * }
     */
    public static void max_delay$set(MemorySegment seg, int x) {
        AVFormatContext.max_delay$VH.set(seg, x);
    }
    public static int max_delay$get(MemorySegment seg, long index) {
        return (int)AVFormatContext.max_delay$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void max_delay$set(MemorySegment seg, long index, int x) {
        AVFormatContext.max_delay$VH.set(seg.asSlice(index*sizeof()), x);
    }
    static final VarHandle flags$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("flags"));
    public static VarHandle flags$VH() {
        return AVFormatContext.flags$VH;
    }
    /**
     * Getter for field:
     * {@snippet :
     * int flags;
     * }
     */
    public static int flags$get(MemorySegment seg) {
        return (int)AVFormatContext.flags$VH.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * int flags;
     * }
     */
    public static void flags$set(MemorySegment seg, int x) {
        AVFormatContext.flags$VH.set(seg, x);
    }
    public static int flags$get(MemorySegment seg, long index) {
        return (int)AVFormatContext.flags$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void flags$set(MemorySegment seg, long index, int x) {
        AVFormatContext.flags$VH.set(seg.asSlice(index*sizeof()), x);
    }
    static final VarHandle probesize$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("probesize"));
    public static VarHandle probesize$VH() {
        return AVFormatContext.probesize$VH;
    }
    /**
     * Getter for field:
     * {@snippet :
     * int64_t probesize;
     * }
     */
    public static long probesize$get(MemorySegment seg) {
        return (long)AVFormatContext.probesize$VH.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * int64_t probesize;
     * }
     */
    public static void probesize$set(MemorySegment seg, long x) {
        AVFormatContext.probesize$VH.set(seg, x);
    }
    public static long probesize$get(MemorySegment seg, long index) {
        return (long)AVFormatContext.probesize$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void probesize$set(MemorySegment seg, long index, long x) {
        AVFormatContext.probesize$VH.set(seg.asSlice(index*sizeof()), x);
    }
    static final VarHandle max_analyze_duration$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("max_analyze_duration"));
    public static VarHandle max_analyze_duration$VH() {
        return AVFormatContext.max_analyze_duration$VH;
    }
    /**
     * Getter for field:
     * {@snippet :
     * int64_t max_analyze_duration;
     * }
     */
    public static long max_analyze_duration$get(MemorySegment seg) {
        return (long)AVFormatContext.max_analyze_duration$VH.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * int64_t max_analyze_duration;
     * }
     */
    public static void max_analyze_duration$set(MemorySegment seg, long x) {
        AVFormatContext.max_analyze_duration$VH.set(seg, x);
    }
    public static long max_analyze_duration$get(MemorySegment seg, long index) {
        return (long)AVFormatContext.max_analyze_duration$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void max_analyze_duration$set(MemorySegment seg, long index, long x) {
        AVFormatContext.max_analyze_duration$VH.set(seg.asSlice(index*sizeof()), x);
    }
    static final VarHandle key$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("key"));
    public static VarHandle key$VH() {
        return AVFormatContext.key$VH;
    }
    /**
     * Getter for field:
     * {@snippet :
     * const uint8_t* key;
     * }
     */
    public static MemorySegment key$get(MemorySegment seg) {
        return (java.lang.foreign.MemorySegment)AVFormatContext.key$VH.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * const uint8_t* key;
     * }
     */
    public static void key$set(MemorySegment seg, MemorySegment x) {
        AVFormatContext.key$VH.set(seg, x);
    }
    public static MemorySegment key$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemorySegment)AVFormatContext.key$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void key$set(MemorySegment seg, long index, MemorySegment x) {
        AVFormatContext.key$VH.set(seg.asSlice(index*sizeof()), x);
    }
    static final VarHandle keylen$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("keylen"));
    public static VarHandle keylen$VH() {
        return AVFormatContext.keylen$VH;
    }
    /**
     * Getter for field:
     * {@snippet :
     * int keylen;
     * }
     */
    public static int keylen$get(MemorySegment seg) {
        return (int)AVFormatContext.keylen$VH.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * int keylen;
     * }
     */
    public static void keylen$set(MemorySegment seg, int x) {
        AVFormatContext.keylen$VH.set(seg, x);
    }
    public static int keylen$get(MemorySegment seg, long index) {
        return (int)AVFormatContext.keylen$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void keylen$set(MemorySegment seg, long index, int x) {
        AVFormatContext.keylen$VH.set(seg.asSlice(index*sizeof()), x);
    }
    static final VarHandle nb_programs$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("nb_programs"));
    public static VarHandle nb_programs$VH() {
        return AVFormatContext.nb_programs$VH;
    }
    /**
     * Getter for field:
     * {@snippet :
     * unsigned int nb_programs;
     * }
     */
    public static int nb_programs$get(MemorySegment seg) {
        return (int)AVFormatContext.nb_programs$VH.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * unsigned int nb_programs;
     * }
     */
    public static void nb_programs$set(MemorySegment seg, int x) {
        AVFormatContext.nb_programs$VH.set(seg, x);
    }
    public static int nb_programs$get(MemorySegment seg, long index) {
        return (int)AVFormatContext.nb_programs$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void nb_programs$set(MemorySegment seg, long index, int x) {
        AVFormatContext.nb_programs$VH.set(seg.asSlice(index*sizeof()), x);
    }
    static final VarHandle programs$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("programs"));
    public static VarHandle programs$VH() {
        return AVFormatContext.programs$VH;
    }
    /**
     * Getter for field:
     * {@snippet :
     * AVProgram** programs;
     * }
     */
    public static MemorySegment programs$get(MemorySegment seg) {
        return (java.lang.foreign.MemorySegment)AVFormatContext.programs$VH.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * AVProgram** programs;
     * }
     */
    public static void programs$set(MemorySegment seg, MemorySegment x) {
        AVFormatContext.programs$VH.set(seg, x);
    }
    public static MemorySegment programs$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemorySegment)AVFormatContext.programs$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void programs$set(MemorySegment seg, long index, MemorySegment x) {
        AVFormatContext.programs$VH.set(seg.asSlice(index*sizeof()), x);
    }
    static final VarHandle video_codec_id$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("video_codec_id"));
    public static VarHandle video_codec_id$VH() {
        return AVFormatContext.video_codec_id$VH;
    }
    /**
     * Getter for field:
     * {@snippet :
     * enum AVCodecID video_codec_id;
     * }
     */
    public static int video_codec_id$get(MemorySegment seg) {
        return (int)AVFormatContext.video_codec_id$VH.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * enum AVCodecID video_codec_id;
     * }
     */
    public static void video_codec_id$set(MemorySegment seg, int x) {
        AVFormatContext.video_codec_id$VH.set(seg, x);
    }
    public static int video_codec_id$get(MemorySegment seg, long index) {
        return (int)AVFormatContext.video_codec_id$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void video_codec_id$set(MemorySegment seg, long index, int x) {
        AVFormatContext.video_codec_id$VH.set(seg.asSlice(index*sizeof()), x);
    }
    static final VarHandle audio_codec_id$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("audio_codec_id"));
    public static VarHandle audio_codec_id$VH() {
        return AVFormatContext.audio_codec_id$VH;
    }
    /**
     * Getter for field:
     * {@snippet :
     * enum AVCodecID audio_codec_id;
     * }
     */
    public static int audio_codec_id$get(MemorySegment seg) {
        return (int)AVFormatContext.audio_codec_id$VH.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * enum AVCodecID audio_codec_id;
     * }
     */
    public static void audio_codec_id$set(MemorySegment seg, int x) {
        AVFormatContext.audio_codec_id$VH.set(seg, x);
    }
    public static int audio_codec_id$get(MemorySegment seg, long index) {
        return (int)AVFormatContext.audio_codec_id$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void audio_codec_id$set(MemorySegment seg, long index, int x) {
        AVFormatContext.audio_codec_id$VH.set(seg.asSlice(index*sizeof()), x);
    }
    static final VarHandle subtitle_codec_id$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("subtitle_codec_id"));
    public static VarHandle subtitle_codec_id$VH() {
        return AVFormatContext.subtitle_codec_id$VH;
    }
    /**
     * Getter for field:
     * {@snippet :
     * enum AVCodecID subtitle_codec_id;
     * }
     */
    public static int subtitle_codec_id$get(MemorySegment seg) {
        return (int)AVFormatContext.subtitle_codec_id$VH.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * enum AVCodecID subtitle_codec_id;
     * }
     */
    public static void subtitle_codec_id$set(MemorySegment seg, int x) {
        AVFormatContext.subtitle_codec_id$VH.set(seg, x);
    }
    public static int subtitle_codec_id$get(MemorySegment seg, long index) {
        return (int)AVFormatContext.subtitle_codec_id$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void subtitle_codec_id$set(MemorySegment seg, long index, int x) {
        AVFormatContext.subtitle_codec_id$VH.set(seg.asSlice(index*sizeof()), x);
    }
    static final VarHandle max_index_size$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("max_index_size"));
    public static VarHandle max_index_size$VH() {
        return AVFormatContext.max_index_size$VH;
    }
    /**
     * Getter for field:
     * {@snippet :
     * unsigned int max_index_size;
     * }
     */
    public static int max_index_size$get(MemorySegment seg) {
        return (int)AVFormatContext.max_index_size$VH.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * unsigned int max_index_size;
     * }
     */
    public static void max_index_size$set(MemorySegment seg, int x) {
        AVFormatContext.max_index_size$VH.set(seg, x);
    }
    public static int max_index_size$get(MemorySegment seg, long index) {
        return (int)AVFormatContext.max_index_size$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void max_index_size$set(MemorySegment seg, long index, int x) {
        AVFormatContext.max_index_size$VH.set(seg.asSlice(index*sizeof()), x);
    }
    static final VarHandle max_picture_buffer$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("max_picture_buffer"));
    public static VarHandle max_picture_buffer$VH() {
        return AVFormatContext.max_picture_buffer$VH;
    }
    /**
     * Getter for field:
     * {@snippet :
     * unsigned int max_picture_buffer;
     * }
     */
    public static int max_picture_buffer$get(MemorySegment seg) {
        return (int)AVFormatContext.max_picture_buffer$VH.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * unsigned int max_picture_buffer;
     * }
     */
    public static void max_picture_buffer$set(MemorySegment seg, int x) {
        AVFormatContext.max_picture_buffer$VH.set(seg, x);
    }
    public static int max_picture_buffer$get(MemorySegment seg, long index) {
        return (int)AVFormatContext.max_picture_buffer$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void max_picture_buffer$set(MemorySegment seg, long index, int x) {
        AVFormatContext.max_picture_buffer$VH.set(seg.asSlice(index*sizeof()), x);
    }
    static final VarHandle nb_chapters$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("nb_chapters"));
    public static VarHandle nb_chapters$VH() {
        return AVFormatContext.nb_chapters$VH;
    }
    /**
     * Getter for field:
     * {@snippet :
     * unsigned int nb_chapters;
     * }
     */
    public static int nb_chapters$get(MemorySegment seg) {
        return (int)AVFormatContext.nb_chapters$VH.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * unsigned int nb_chapters;
     * }
     */
    public static void nb_chapters$set(MemorySegment seg, int x) {
        AVFormatContext.nb_chapters$VH.set(seg, x);
    }
    public static int nb_chapters$get(MemorySegment seg, long index) {
        return (int)AVFormatContext.nb_chapters$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void nb_chapters$set(MemorySegment seg, long index, int x) {
        AVFormatContext.nb_chapters$VH.set(seg.asSlice(index*sizeof()), x);
    }
    static final VarHandle chapters$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("chapters"));
    public static VarHandle chapters$VH() {
        return AVFormatContext.chapters$VH;
    }
    /**
     * Getter for field:
     * {@snippet :
     * AVChapter** chapters;
     * }
     */
    public static MemorySegment chapters$get(MemorySegment seg) {
        return (java.lang.foreign.MemorySegment)AVFormatContext.chapters$VH.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * AVChapter** chapters;
     * }
     */
    public static void chapters$set(MemorySegment seg, MemorySegment x) {
        AVFormatContext.chapters$VH.set(seg, x);
    }
    public static MemorySegment chapters$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemorySegment)AVFormatContext.chapters$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void chapters$set(MemorySegment seg, long index, MemorySegment x) {
        AVFormatContext.chapters$VH.set(seg.asSlice(index*sizeof()), x);
    }
    static final VarHandle metadata$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("metadata"));
    public static VarHandle metadata$VH() {
        return AVFormatContext.metadata$VH;
    }
    /**
     * Getter for field:
     * {@snippet :
     * AVDictionary* metadata;
     * }
     */
    public static MemorySegment metadata$get(MemorySegment seg) {
        return (java.lang.foreign.MemorySegment)AVFormatContext.metadata$VH.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * AVDictionary* metadata;
     * }
     */
    public static void metadata$set(MemorySegment seg, MemorySegment x) {
        AVFormatContext.metadata$VH.set(seg, x);
    }
    public static MemorySegment metadata$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemorySegment)AVFormatContext.metadata$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void metadata$set(MemorySegment seg, long index, MemorySegment x) {
        AVFormatContext.metadata$VH.set(seg.asSlice(index*sizeof()), x);
    }
    static final VarHandle start_time_realtime$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("start_time_realtime"));
    public static VarHandle start_time_realtime$VH() {
        return AVFormatContext.start_time_realtime$VH;
    }
    /**
     * Getter for field:
     * {@snippet :
     * int64_t start_time_realtime;
     * }
     */
    public static long start_time_realtime$get(MemorySegment seg) {
        return (long)AVFormatContext.start_time_realtime$VH.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * int64_t start_time_realtime;
     * }
     */
    public static void start_time_realtime$set(MemorySegment seg, long x) {
        AVFormatContext.start_time_realtime$VH.set(seg, x);
    }
    public static long start_time_realtime$get(MemorySegment seg, long index) {
        return (long)AVFormatContext.start_time_realtime$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void start_time_realtime$set(MemorySegment seg, long index, long x) {
        AVFormatContext.start_time_realtime$VH.set(seg.asSlice(index*sizeof()), x);
    }
    static final VarHandle fps_probe_size$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("fps_probe_size"));
    public static VarHandle fps_probe_size$VH() {
        return AVFormatContext.fps_probe_size$VH;
    }
    /**
     * Getter for field:
     * {@snippet :
     * int fps_probe_size;
     * }
     */
    public static int fps_probe_size$get(MemorySegment seg) {
        return (int)AVFormatContext.fps_probe_size$VH.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * int fps_probe_size;
     * }
     */
    public static void fps_probe_size$set(MemorySegment seg, int x) {
        AVFormatContext.fps_probe_size$VH.set(seg, x);
    }
    public static int fps_probe_size$get(MemorySegment seg, long index) {
        return (int)AVFormatContext.fps_probe_size$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void fps_probe_size$set(MemorySegment seg, long index, int x) {
        AVFormatContext.fps_probe_size$VH.set(seg.asSlice(index*sizeof()), x);
    }
    static final VarHandle error_recognition$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("error_recognition"));
    public static VarHandle error_recognition$VH() {
        return AVFormatContext.error_recognition$VH;
    }
    /**
     * Getter for field:
     * {@snippet :
     * int error_recognition;
     * }
     */
    public static int error_recognition$get(MemorySegment seg) {
        return (int)AVFormatContext.error_recognition$VH.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * int error_recognition;
     * }
     */
    public static void error_recognition$set(MemorySegment seg, int x) {
        AVFormatContext.error_recognition$VH.set(seg, x);
    }
    public static int error_recognition$get(MemorySegment seg, long index) {
        return (int)AVFormatContext.error_recognition$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void error_recognition$set(MemorySegment seg, long index, int x) {
        AVFormatContext.error_recognition$VH.set(seg.asSlice(index*sizeof()), x);
    }
    public static MemorySegment interrupt_callback$slice(MemorySegment seg) {
        return seg.asSlice(200, 16);
    }
    static final VarHandle debug$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("debug"));
    public static VarHandle debug$VH() {
        return AVFormatContext.debug$VH;
    }
    /**
     * Getter for field:
     * {@snippet :
     * int debug;
     * }
     */
    public static int debug$get(MemorySegment seg) {
        return (int)AVFormatContext.debug$VH.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * int debug;
     * }
     */
    public static void debug$set(MemorySegment seg, int x) {
        AVFormatContext.debug$VH.set(seg, x);
    }
    public static int debug$get(MemorySegment seg, long index) {
        return (int)AVFormatContext.debug$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void debug$set(MemorySegment seg, long index, int x) {
        AVFormatContext.debug$VH.set(seg.asSlice(index*sizeof()), x);
    }
    static final VarHandle max_interleave_delta$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("max_interleave_delta"));
    public static VarHandle max_interleave_delta$VH() {
        return AVFormatContext.max_interleave_delta$VH;
    }
    /**
     * Getter for field:
     * {@snippet :
     * int64_t max_interleave_delta;
     * }
     */
    public static long max_interleave_delta$get(MemorySegment seg) {
        return (long)AVFormatContext.max_interleave_delta$VH.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * int64_t max_interleave_delta;
     * }
     */
    public static void max_interleave_delta$set(MemorySegment seg, long x) {
        AVFormatContext.max_interleave_delta$VH.set(seg, x);
    }
    public static long max_interleave_delta$get(MemorySegment seg, long index) {
        return (long)AVFormatContext.max_interleave_delta$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void max_interleave_delta$set(MemorySegment seg, long index, long x) {
        AVFormatContext.max_interleave_delta$VH.set(seg.asSlice(index*sizeof()), x);
    }
    static final VarHandle strict_std_compliance$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("strict_std_compliance"));
    public static VarHandle strict_std_compliance$VH() {
        return AVFormatContext.strict_std_compliance$VH;
    }
    /**
     * Getter for field:
     * {@snippet :
     * int strict_std_compliance;
     * }
     */
    public static int strict_std_compliance$get(MemorySegment seg) {
        return (int)AVFormatContext.strict_std_compliance$VH.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * int strict_std_compliance;
     * }
     */
    public static void strict_std_compliance$set(MemorySegment seg, int x) {
        AVFormatContext.strict_std_compliance$VH.set(seg, x);
    }
    public static int strict_std_compliance$get(MemorySegment seg, long index) {
        return (int)AVFormatContext.strict_std_compliance$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void strict_std_compliance$set(MemorySegment seg, long index, int x) {
        AVFormatContext.strict_std_compliance$VH.set(seg.asSlice(index*sizeof()), x);
    }
    static final VarHandle event_flags$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("event_flags"));
    public static VarHandle event_flags$VH() {
        return AVFormatContext.event_flags$VH;
    }
    /**
     * Getter for field:
     * {@snippet :
     * int event_flags;
     * }
     */
    public static int event_flags$get(MemorySegment seg) {
        return (int)AVFormatContext.event_flags$VH.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * int event_flags;
     * }
     */
    public static void event_flags$set(MemorySegment seg, int x) {
        AVFormatContext.event_flags$VH.set(seg, x);
    }
    public static int event_flags$get(MemorySegment seg, long index) {
        return (int)AVFormatContext.event_flags$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void event_flags$set(MemorySegment seg, long index, int x) {
        AVFormatContext.event_flags$VH.set(seg.asSlice(index*sizeof()), x);
    }
    static final VarHandle max_ts_probe$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("max_ts_probe"));
    public static VarHandle max_ts_probe$VH() {
        return AVFormatContext.max_ts_probe$VH;
    }
    /**
     * Getter for field:
     * {@snippet :
     * int max_ts_probe;
     * }
     */
    public static int max_ts_probe$get(MemorySegment seg) {
        return (int)AVFormatContext.max_ts_probe$VH.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * int max_ts_probe;
     * }
     */
    public static void max_ts_probe$set(MemorySegment seg, int x) {
        AVFormatContext.max_ts_probe$VH.set(seg, x);
    }
    public static int max_ts_probe$get(MemorySegment seg, long index) {
        return (int)AVFormatContext.max_ts_probe$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void max_ts_probe$set(MemorySegment seg, long index, int x) {
        AVFormatContext.max_ts_probe$VH.set(seg.asSlice(index*sizeof()), x);
    }
    static final VarHandle avoid_negative_ts$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("avoid_negative_ts"));
    public static VarHandle avoid_negative_ts$VH() {
        return AVFormatContext.avoid_negative_ts$VH;
    }
    /**
     * Getter for field:
     * {@snippet :
     * int avoid_negative_ts;
     * }
     */
    public static int avoid_negative_ts$get(MemorySegment seg) {
        return (int)AVFormatContext.avoid_negative_ts$VH.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * int avoid_negative_ts;
     * }
     */
    public static void avoid_negative_ts$set(MemorySegment seg, int x) {
        AVFormatContext.avoid_negative_ts$VH.set(seg, x);
    }
    public static int avoid_negative_ts$get(MemorySegment seg, long index) {
        return (int)AVFormatContext.avoid_negative_ts$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void avoid_negative_ts$set(MemorySegment seg, long index, int x) {
        AVFormatContext.avoid_negative_ts$VH.set(seg.asSlice(index*sizeof()), x);
    }
    static final VarHandle ts_id$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("ts_id"));
    public static VarHandle ts_id$VH() {
        return AVFormatContext.ts_id$VH;
    }
    /**
     * Getter for field:
     * {@snippet :
     * int ts_id;
     * }
     */
    public static int ts_id$get(MemorySegment seg) {
        return (int)AVFormatContext.ts_id$VH.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * int ts_id;
     * }
     */
    public static void ts_id$set(MemorySegment seg, int x) {
        AVFormatContext.ts_id$VH.set(seg, x);
    }
    public static int ts_id$get(MemorySegment seg, long index) {
        return (int)AVFormatContext.ts_id$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void ts_id$set(MemorySegment seg, long index, int x) {
        AVFormatContext.ts_id$VH.set(seg.asSlice(index*sizeof()), x);
    }
    static final VarHandle audio_preload$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("audio_preload"));
    public static VarHandle audio_preload$VH() {
        return AVFormatContext.audio_preload$VH;
    }
    /**
     * Getter for field:
     * {@snippet :
     * int audio_preload;
     * }
     */
    public static int audio_preload$get(MemorySegment seg) {
        return (int)AVFormatContext.audio_preload$VH.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * int audio_preload;
     * }
     */
    public static void audio_preload$set(MemorySegment seg, int x) {
        AVFormatContext.audio_preload$VH.set(seg, x);
    }
    public static int audio_preload$get(MemorySegment seg, long index) {
        return (int)AVFormatContext.audio_preload$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void audio_preload$set(MemorySegment seg, long index, int x) {
        AVFormatContext.audio_preload$VH.set(seg.asSlice(index*sizeof()), x);
    }
    static final VarHandle max_chunk_duration$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("max_chunk_duration"));
    public static VarHandle max_chunk_duration$VH() {
        return AVFormatContext.max_chunk_duration$VH;
    }
    /**
     * Getter for field:
     * {@snippet :
     * int max_chunk_duration;
     * }
     */
    public static int max_chunk_duration$get(MemorySegment seg) {
        return (int)AVFormatContext.max_chunk_duration$VH.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * int max_chunk_duration;
     * }
     */
    public static void max_chunk_duration$set(MemorySegment seg, int x) {
        AVFormatContext.max_chunk_duration$VH.set(seg, x);
    }
    public static int max_chunk_duration$get(MemorySegment seg, long index) {
        return (int)AVFormatContext.max_chunk_duration$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void max_chunk_duration$set(MemorySegment seg, long index, int x) {
        AVFormatContext.max_chunk_duration$VH.set(seg.asSlice(index*sizeof()), x);
    }
    static final VarHandle max_chunk_size$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("max_chunk_size"));
    public static VarHandle max_chunk_size$VH() {
        return AVFormatContext.max_chunk_size$VH;
    }
    /**
     * Getter for field:
     * {@snippet :
     * int max_chunk_size;
     * }
     */
    public static int max_chunk_size$get(MemorySegment seg) {
        return (int)AVFormatContext.max_chunk_size$VH.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * int max_chunk_size;
     * }
     */
    public static void max_chunk_size$set(MemorySegment seg, int x) {
        AVFormatContext.max_chunk_size$VH.set(seg, x);
    }
    public static int max_chunk_size$get(MemorySegment seg, long index) {
        return (int)AVFormatContext.max_chunk_size$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void max_chunk_size$set(MemorySegment seg, long index, int x) {
        AVFormatContext.max_chunk_size$VH.set(seg.asSlice(index*sizeof()), x);
    }
    static final VarHandle use_wallclock_as_timestamps$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("use_wallclock_as_timestamps"));
    public static VarHandle use_wallclock_as_timestamps$VH() {
        return AVFormatContext.use_wallclock_as_timestamps$VH;
    }
    /**
     * Getter for field:
     * {@snippet :
     * int use_wallclock_as_timestamps;
     * }
     */
    public static int use_wallclock_as_timestamps$get(MemorySegment seg) {
        return (int)AVFormatContext.use_wallclock_as_timestamps$VH.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * int use_wallclock_as_timestamps;
     * }
     */
    public static void use_wallclock_as_timestamps$set(MemorySegment seg, int x) {
        AVFormatContext.use_wallclock_as_timestamps$VH.set(seg, x);
    }
    public static int use_wallclock_as_timestamps$get(MemorySegment seg, long index) {
        return (int)AVFormatContext.use_wallclock_as_timestamps$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void use_wallclock_as_timestamps$set(MemorySegment seg, long index, int x) {
        AVFormatContext.use_wallclock_as_timestamps$VH.set(seg.asSlice(index*sizeof()), x);
    }
    static final VarHandle avio_flags$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("avio_flags"));
    public static VarHandle avio_flags$VH() {
        return AVFormatContext.avio_flags$VH;
    }
    /**
     * Getter for field:
     * {@snippet :
     * int avio_flags;
     * }
     */
    public static int avio_flags$get(MemorySegment seg) {
        return (int)AVFormatContext.avio_flags$VH.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * int avio_flags;
     * }
     */
    public static void avio_flags$set(MemorySegment seg, int x) {
        AVFormatContext.avio_flags$VH.set(seg, x);
    }
    public static int avio_flags$get(MemorySegment seg, long index) {
        return (int)AVFormatContext.avio_flags$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void avio_flags$set(MemorySegment seg, long index, int x) {
        AVFormatContext.avio_flags$VH.set(seg.asSlice(index*sizeof()), x);
    }
    static final VarHandle duration_estimation_method$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("duration_estimation_method"));
    public static VarHandle duration_estimation_method$VH() {
        return AVFormatContext.duration_estimation_method$VH;
    }
    /**
     * Getter for field:
     * {@snippet :
     * enum AVDurationEstimationMethod duration_estimation_method;
     * }
     */
    public static int duration_estimation_method$get(MemorySegment seg) {
        return (int)AVFormatContext.duration_estimation_method$VH.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * enum AVDurationEstimationMethod duration_estimation_method;
     * }
     */
    public static void duration_estimation_method$set(MemorySegment seg, int x) {
        AVFormatContext.duration_estimation_method$VH.set(seg, x);
    }
    public static int duration_estimation_method$get(MemorySegment seg, long index) {
        return (int)AVFormatContext.duration_estimation_method$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void duration_estimation_method$set(MemorySegment seg, long index, int x) {
        AVFormatContext.duration_estimation_method$VH.set(seg.asSlice(index*sizeof()), x);
    }
    static final VarHandle skip_initial_bytes$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("skip_initial_bytes"));
    public static VarHandle skip_initial_bytes$VH() {
        return AVFormatContext.skip_initial_bytes$VH;
    }
    /**
     * Getter for field:
     * {@snippet :
     * int64_t skip_initial_bytes;
     * }
     */
    public static long skip_initial_bytes$get(MemorySegment seg) {
        return (long)AVFormatContext.skip_initial_bytes$VH.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * int64_t skip_initial_bytes;
     * }
     */
    public static void skip_initial_bytes$set(MemorySegment seg, long x) {
        AVFormatContext.skip_initial_bytes$VH.set(seg, x);
    }
    public static long skip_initial_bytes$get(MemorySegment seg, long index) {
        return (long)AVFormatContext.skip_initial_bytes$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void skip_initial_bytes$set(MemorySegment seg, long index, long x) {
        AVFormatContext.skip_initial_bytes$VH.set(seg.asSlice(index*sizeof()), x);
    }
    static final VarHandle correct_ts_overflow$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("correct_ts_overflow"));
    public static VarHandle correct_ts_overflow$VH() {
        return AVFormatContext.correct_ts_overflow$VH;
    }
    /**
     * Getter for field:
     * {@snippet :
     * unsigned int correct_ts_overflow;
     * }
     */
    public static int correct_ts_overflow$get(MemorySegment seg) {
        return (int)AVFormatContext.correct_ts_overflow$VH.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * unsigned int correct_ts_overflow;
     * }
     */
    public static void correct_ts_overflow$set(MemorySegment seg, int x) {
        AVFormatContext.correct_ts_overflow$VH.set(seg, x);
    }
    public static int correct_ts_overflow$get(MemorySegment seg, long index) {
        return (int)AVFormatContext.correct_ts_overflow$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void correct_ts_overflow$set(MemorySegment seg, long index, int x) {
        AVFormatContext.correct_ts_overflow$VH.set(seg.asSlice(index*sizeof()), x);
    }
    static final VarHandle seek2any$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("seek2any"));
    public static VarHandle seek2any$VH() {
        return AVFormatContext.seek2any$VH;
    }
    /**
     * Getter for field:
     * {@snippet :
     * int seek2any;
     * }
     */
    public static int seek2any$get(MemorySegment seg) {
        return (int)AVFormatContext.seek2any$VH.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * int seek2any;
     * }
     */
    public static void seek2any$set(MemorySegment seg, int x) {
        AVFormatContext.seek2any$VH.set(seg, x);
    }
    public static int seek2any$get(MemorySegment seg, long index) {
        return (int)AVFormatContext.seek2any$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void seek2any$set(MemorySegment seg, long index, int x) {
        AVFormatContext.seek2any$VH.set(seg.asSlice(index*sizeof()), x);
    }
    static final VarHandle flush_packets$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("flush_packets"));
    public static VarHandle flush_packets$VH() {
        return AVFormatContext.flush_packets$VH;
    }
    /**
     * Getter for field:
     * {@snippet :
     * int flush_packets;
     * }
     */
    public static int flush_packets$get(MemorySegment seg) {
        return (int)AVFormatContext.flush_packets$VH.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * int flush_packets;
     * }
     */
    public static void flush_packets$set(MemorySegment seg, int x) {
        AVFormatContext.flush_packets$VH.set(seg, x);
    }
    public static int flush_packets$get(MemorySegment seg, long index) {
        return (int)AVFormatContext.flush_packets$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void flush_packets$set(MemorySegment seg, long index, int x) {
        AVFormatContext.flush_packets$VH.set(seg.asSlice(index*sizeof()), x);
    }
    static final VarHandle probe_score$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("probe_score"));
    public static VarHandle probe_score$VH() {
        return AVFormatContext.probe_score$VH;
    }
    /**
     * Getter for field:
     * {@snippet :
     * int probe_score;
     * }
     */
    public static int probe_score$get(MemorySegment seg) {
        return (int)AVFormatContext.probe_score$VH.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * int probe_score;
     * }
     */
    public static void probe_score$set(MemorySegment seg, int x) {
        AVFormatContext.probe_score$VH.set(seg, x);
    }
    public static int probe_score$get(MemorySegment seg, long index) {
        return (int)AVFormatContext.probe_score$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void probe_score$set(MemorySegment seg, long index, int x) {
        AVFormatContext.probe_score$VH.set(seg.asSlice(index*sizeof()), x);
    }
    static final VarHandle format_probesize$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("format_probesize"));
    public static VarHandle format_probesize$VH() {
        return AVFormatContext.format_probesize$VH;
    }
    /**
     * Getter for field:
     * {@snippet :
     * int format_probesize;
     * }
     */
    public static int format_probesize$get(MemorySegment seg) {
        return (int)AVFormatContext.format_probesize$VH.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * int format_probesize;
     * }
     */
    public static void format_probesize$set(MemorySegment seg, int x) {
        AVFormatContext.format_probesize$VH.set(seg, x);
    }
    public static int format_probesize$get(MemorySegment seg, long index) {
        return (int)AVFormatContext.format_probesize$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void format_probesize$set(MemorySegment seg, long index, int x) {
        AVFormatContext.format_probesize$VH.set(seg.asSlice(index*sizeof()), x);
    }
    static final VarHandle codec_whitelist$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("codec_whitelist"));
    public static VarHandle codec_whitelist$VH() {
        return AVFormatContext.codec_whitelist$VH;
    }
    /**
     * Getter for field:
     * {@snippet :
     * char* codec_whitelist;
     * }
     */
    public static MemorySegment codec_whitelist$get(MemorySegment seg) {
        return (java.lang.foreign.MemorySegment)AVFormatContext.codec_whitelist$VH.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * char* codec_whitelist;
     * }
     */
    public static void codec_whitelist$set(MemorySegment seg, MemorySegment x) {
        AVFormatContext.codec_whitelist$VH.set(seg, x);
    }
    public static MemorySegment codec_whitelist$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemorySegment)AVFormatContext.codec_whitelist$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void codec_whitelist$set(MemorySegment seg, long index, MemorySegment x) {
        AVFormatContext.codec_whitelist$VH.set(seg.asSlice(index*sizeof()), x);
    }
    static final VarHandle format_whitelist$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("format_whitelist"));
    public static VarHandle format_whitelist$VH() {
        return AVFormatContext.format_whitelist$VH;
    }
    /**
     * Getter for field:
     * {@snippet :
     * char* format_whitelist;
     * }
     */
    public static MemorySegment format_whitelist$get(MemorySegment seg) {
        return (java.lang.foreign.MemorySegment)AVFormatContext.format_whitelist$VH.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * char* format_whitelist;
     * }
     */
    public static void format_whitelist$set(MemorySegment seg, MemorySegment x) {
        AVFormatContext.format_whitelist$VH.set(seg, x);
    }
    public static MemorySegment format_whitelist$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemorySegment)AVFormatContext.format_whitelist$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void format_whitelist$set(MemorySegment seg, long index, MemorySegment x) {
        AVFormatContext.format_whitelist$VH.set(seg.asSlice(index*sizeof()), x);
    }
    static final VarHandle io_repositioned$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("io_repositioned"));
    public static VarHandle io_repositioned$VH() {
        return AVFormatContext.io_repositioned$VH;
    }
    /**
     * Getter for field:
     * {@snippet :
     * int io_repositioned;
     * }
     */
    public static int io_repositioned$get(MemorySegment seg) {
        return (int)AVFormatContext.io_repositioned$VH.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * int io_repositioned;
     * }
     */
    public static void io_repositioned$set(MemorySegment seg, int x) {
        AVFormatContext.io_repositioned$VH.set(seg, x);
    }
    public static int io_repositioned$get(MemorySegment seg, long index) {
        return (int)AVFormatContext.io_repositioned$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void io_repositioned$set(MemorySegment seg, long index, int x) {
        AVFormatContext.io_repositioned$VH.set(seg.asSlice(index*sizeof()), x);
    }
    static final VarHandle video_codec$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("video_codec"));
    public static VarHandle video_codec$VH() {
        return AVFormatContext.video_codec$VH;
    }
    /**
     * Getter for field:
     * {@snippet :
     * const AVCodec* video_codec;
     * }
     */
    public static MemorySegment video_codec$get(MemorySegment seg) {
        return (java.lang.foreign.MemorySegment)AVFormatContext.video_codec$VH.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * const AVCodec* video_codec;
     * }
     */
    public static void video_codec$set(MemorySegment seg, MemorySegment x) {
        AVFormatContext.video_codec$VH.set(seg, x);
    }
    public static MemorySegment video_codec$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemorySegment)AVFormatContext.video_codec$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void video_codec$set(MemorySegment seg, long index, MemorySegment x) {
        AVFormatContext.video_codec$VH.set(seg.asSlice(index*sizeof()), x);
    }
    static final VarHandle audio_codec$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("audio_codec"));
    public static VarHandle audio_codec$VH() {
        return AVFormatContext.audio_codec$VH;
    }
    /**
     * Getter for field:
     * {@snippet :
     * const AVCodec* audio_codec;
     * }
     */
    public static MemorySegment audio_codec$get(MemorySegment seg) {
        return (java.lang.foreign.MemorySegment)AVFormatContext.audio_codec$VH.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * const AVCodec* audio_codec;
     * }
     */
    public static void audio_codec$set(MemorySegment seg, MemorySegment x) {
        AVFormatContext.audio_codec$VH.set(seg, x);
    }
    public static MemorySegment audio_codec$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemorySegment)AVFormatContext.audio_codec$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void audio_codec$set(MemorySegment seg, long index, MemorySegment x) {
        AVFormatContext.audio_codec$VH.set(seg.asSlice(index*sizeof()), x);
    }
    static final VarHandle subtitle_codec$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("subtitle_codec"));
    public static VarHandle subtitle_codec$VH() {
        return AVFormatContext.subtitle_codec$VH;
    }
    /**
     * Getter for field:
     * {@snippet :
     * const AVCodec* subtitle_codec;
     * }
     */
    public static MemorySegment subtitle_codec$get(MemorySegment seg) {
        return (java.lang.foreign.MemorySegment)AVFormatContext.subtitle_codec$VH.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * const AVCodec* subtitle_codec;
     * }
     */
    public static void subtitle_codec$set(MemorySegment seg, MemorySegment x) {
        AVFormatContext.subtitle_codec$VH.set(seg, x);
    }
    public static MemorySegment subtitle_codec$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemorySegment)AVFormatContext.subtitle_codec$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void subtitle_codec$set(MemorySegment seg, long index, MemorySegment x) {
        AVFormatContext.subtitle_codec$VH.set(seg.asSlice(index*sizeof()), x);
    }
    static final VarHandle data_codec$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("data_codec"));
    public static VarHandle data_codec$VH() {
        return AVFormatContext.data_codec$VH;
    }
    /**
     * Getter for field:
     * {@snippet :
     * const AVCodec* data_codec;
     * }
     */
    public static MemorySegment data_codec$get(MemorySegment seg) {
        return (java.lang.foreign.MemorySegment)AVFormatContext.data_codec$VH.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * const AVCodec* data_codec;
     * }
     */
    public static void data_codec$set(MemorySegment seg, MemorySegment x) {
        AVFormatContext.data_codec$VH.set(seg, x);
    }
    public static MemorySegment data_codec$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemorySegment)AVFormatContext.data_codec$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void data_codec$set(MemorySegment seg, long index, MemorySegment x) {
        AVFormatContext.data_codec$VH.set(seg.asSlice(index*sizeof()), x);
    }
    static final VarHandle metadata_header_padding$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("metadata_header_padding"));
    public static VarHandle metadata_header_padding$VH() {
        return AVFormatContext.metadata_header_padding$VH;
    }
    /**
     * Getter for field:
     * {@snippet :
     * int metadata_header_padding;
     * }
     */
    public static int metadata_header_padding$get(MemorySegment seg) {
        return (int)AVFormatContext.metadata_header_padding$VH.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * int metadata_header_padding;
     * }
     */
    public static void metadata_header_padding$set(MemorySegment seg, int x) {
        AVFormatContext.metadata_header_padding$VH.set(seg, x);
    }
    public static int metadata_header_padding$get(MemorySegment seg, long index) {
        return (int)AVFormatContext.metadata_header_padding$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void metadata_header_padding$set(MemorySegment seg, long index, int x) {
        AVFormatContext.metadata_header_padding$VH.set(seg.asSlice(index*sizeof()), x);
    }
    static final VarHandle opaque$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("opaque"));
    public static VarHandle opaque$VH() {
        return AVFormatContext.opaque$VH;
    }
    /**
     * Getter for field:
     * {@snippet :
     * void* opaque;
     * }
     */
    public static MemorySegment opaque$get(MemorySegment seg) {
        return (java.lang.foreign.MemorySegment)AVFormatContext.opaque$VH.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * void* opaque;
     * }
     */
    public static void opaque$set(MemorySegment seg, MemorySegment x) {
        AVFormatContext.opaque$VH.set(seg, x);
    }
    public static MemorySegment opaque$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemorySegment)AVFormatContext.opaque$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void opaque$set(MemorySegment seg, long index, MemorySegment x) {
        AVFormatContext.opaque$VH.set(seg.asSlice(index*sizeof()), x);
    }
    static final VarHandle control_message_cb$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("control_message_cb"));
    public static VarHandle control_message_cb$VH() {
        return AVFormatContext.control_message_cb$VH;
    }
    /**
     * Getter for field:
     * {@snippet :
     * av_format_control_message control_message_cb;
     * }
     */
    public static MemorySegment control_message_cb$get(MemorySegment seg) {
        return (java.lang.foreign.MemorySegment)AVFormatContext.control_message_cb$VH.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * av_format_control_message control_message_cb;
     * }
     */
    public static void control_message_cb$set(MemorySegment seg, MemorySegment x) {
        AVFormatContext.control_message_cb$VH.set(seg, x);
    }
    public static MemorySegment control_message_cb$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemorySegment)AVFormatContext.control_message_cb$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void control_message_cb$set(MemorySegment seg, long index, MemorySegment x) {
        AVFormatContext.control_message_cb$VH.set(seg.asSlice(index*sizeof()), x);
    }
    public static av_format_control_message control_message_cb(MemorySegment segment, SegmentScope scope) {
        return av_format_control_message.ofAddress(control_message_cb$get(segment), scope);
    }
    static final VarHandle output_ts_offset$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("output_ts_offset"));
    public static VarHandle output_ts_offset$VH() {
        return AVFormatContext.output_ts_offset$VH;
    }
    /**
     * Getter for field:
     * {@snippet :
     * int64_t output_ts_offset;
     * }
     */
    public static long output_ts_offset$get(MemorySegment seg) {
        return (long)AVFormatContext.output_ts_offset$VH.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * int64_t output_ts_offset;
     * }
     */
    public static void output_ts_offset$set(MemorySegment seg, long x) {
        AVFormatContext.output_ts_offset$VH.set(seg, x);
    }
    public static long output_ts_offset$get(MemorySegment seg, long index) {
        return (long)AVFormatContext.output_ts_offset$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void output_ts_offset$set(MemorySegment seg, long index, long x) {
        AVFormatContext.output_ts_offset$VH.set(seg.asSlice(index*sizeof()), x);
    }
    static final VarHandle dump_separator$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("dump_separator"));
    public static VarHandle dump_separator$VH() {
        return AVFormatContext.dump_separator$VH;
    }
    /**
     * Getter for field:
     * {@snippet :
     * uint8_t* dump_separator;
     * }
     */
    public static MemorySegment dump_separator$get(MemorySegment seg) {
        return (java.lang.foreign.MemorySegment)AVFormatContext.dump_separator$VH.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * uint8_t* dump_separator;
     * }
     */
    public static void dump_separator$set(MemorySegment seg, MemorySegment x) {
        AVFormatContext.dump_separator$VH.set(seg, x);
    }
    public static MemorySegment dump_separator$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemorySegment)AVFormatContext.dump_separator$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void dump_separator$set(MemorySegment seg, long index, MemorySegment x) {
        AVFormatContext.dump_separator$VH.set(seg.asSlice(index*sizeof()), x);
    }
    static final VarHandle data_codec_id$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("data_codec_id"));
    public static VarHandle data_codec_id$VH() {
        return AVFormatContext.data_codec_id$VH;
    }
    /**
     * Getter for field:
     * {@snippet :
     * enum AVCodecID data_codec_id;
     * }
     */
    public static int data_codec_id$get(MemorySegment seg) {
        return (int)AVFormatContext.data_codec_id$VH.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * enum AVCodecID data_codec_id;
     * }
     */
    public static void data_codec_id$set(MemorySegment seg, int x) {
        AVFormatContext.data_codec_id$VH.set(seg, x);
    }
    public static int data_codec_id$get(MemorySegment seg, long index) {
        return (int)AVFormatContext.data_codec_id$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void data_codec_id$set(MemorySegment seg, long index, int x) {
        AVFormatContext.data_codec_id$VH.set(seg.asSlice(index*sizeof()), x);
    }
    static final VarHandle protocol_whitelist$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("protocol_whitelist"));
    public static VarHandle protocol_whitelist$VH() {
        return AVFormatContext.protocol_whitelist$VH;
    }
    /**
     * Getter for field:
     * {@snippet :
     * char* protocol_whitelist;
     * }
     */
    public static MemorySegment protocol_whitelist$get(MemorySegment seg) {
        return (java.lang.foreign.MemorySegment)AVFormatContext.protocol_whitelist$VH.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * char* protocol_whitelist;
     * }
     */
    public static void protocol_whitelist$set(MemorySegment seg, MemorySegment x) {
        AVFormatContext.protocol_whitelist$VH.set(seg, x);
    }
    public static MemorySegment protocol_whitelist$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemorySegment)AVFormatContext.protocol_whitelist$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void protocol_whitelist$set(MemorySegment seg, long index, MemorySegment x) {
        AVFormatContext.protocol_whitelist$VH.set(seg.asSlice(index*sizeof()), x);
    }
    static final FunctionDescriptor io_open$FUNC = FunctionDescriptor.of(Constants$root.C_LONG$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_LONG$LAYOUT,
        Constants$root.C_POINTER$LAYOUT
    );
    static final FunctionDescriptor io_open_UP$FUNC = FunctionDescriptor.of(Constants$root.C_LONG$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_LONG$LAYOUT,
        Constants$root.C_POINTER$LAYOUT
    );
    static final MethodHandle io_open_UP$MH = RuntimeHelper.upcallHandle(io_open.class, "apply", AVFormatContext.io_open_UP$FUNC);
    static final FunctionDescriptor io_open_DOWN$FUNC = FunctionDescriptor.of(Constants$root.C_LONG$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_LONG$LAYOUT,
        Constants$root.C_POINTER$LAYOUT
    );
    static final MethodHandle io_open_DOWN$MH = RuntimeHelper.downcallHandle(
        AVFormatContext.io_open_DOWN$FUNC
    );
    /**
     * {@snippet :
 * int (*io_open)(struct AVFormatContext*,AVIOContext**,char*,int,AVDictionary**);
     * }
     */
    public interface io_open {

        int apply(java.lang.foreign.MemorySegment _x0, java.lang.foreign.MemorySegment _x1, java.lang.foreign.MemorySegment _x2, int _x3, java.lang.foreign.MemorySegment _x4);
        static MemorySegment allocate(io_open fi, SegmentScope scope) {
            return RuntimeHelper.upcallStub(AVFormatContext.io_open_UP$MH, fi, AVFormatContext.io_open$FUNC, scope);
        }
        static io_open ofAddress(MemorySegment addr, SegmentScope scope) {
            MemorySegment symbol = MemorySegment.ofAddress(addr.address(), 0, scope);
            return (java.lang.foreign.MemorySegment __x0, java.lang.foreign.MemorySegment __x1, java.lang.foreign.MemorySegment __x2, int __x3, java.lang.foreign.MemorySegment __x4) -> {
                try {
                    return (int)AVFormatContext.io_open_DOWN$MH.invokeExact(symbol, __x0, __x1, __x2, __x3, __x4);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    static final VarHandle io_open$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("io_open"));
    public static VarHandle io_open$VH() {
        return AVFormatContext.io_open$VH;
    }
    /**
     * Getter for field:
     * {@snippet :
     * int (*io_open)(struct AVFormatContext*,AVIOContext**,char*,int,AVDictionary**);
     * }
     */
    public static MemorySegment io_open$get(MemorySegment seg) {
        return (java.lang.foreign.MemorySegment)AVFormatContext.io_open$VH.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * int (*io_open)(struct AVFormatContext*,AVIOContext**,char*,int,AVDictionary**);
     * }
     */
    public static void io_open$set(MemorySegment seg, MemorySegment x) {
        AVFormatContext.io_open$VH.set(seg, x);
    }
    public static MemorySegment io_open$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemorySegment)AVFormatContext.io_open$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void io_open$set(MemorySegment seg, long index, MemorySegment x) {
        AVFormatContext.io_open$VH.set(seg.asSlice(index*sizeof()), x);
    }
    public static io_open io_open(MemorySegment segment, SegmentScope scope) {
        return io_open.ofAddress(io_open$get(segment), scope);
    }
    static final FunctionDescriptor io_close$FUNC = FunctionDescriptor.ofVoid(
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_POINTER$LAYOUT
    );
    static final FunctionDescriptor io_close_UP$FUNC = FunctionDescriptor.ofVoid(
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_POINTER$LAYOUT
    );
    static final MethodHandle io_close_UP$MH = RuntimeHelper.upcallHandle(io_close.class, "apply", AVFormatContext.io_close_UP$FUNC);
    static final FunctionDescriptor io_close_DOWN$FUNC = FunctionDescriptor.ofVoid(
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_POINTER$LAYOUT
    );
    static final MethodHandle io_close_DOWN$MH = RuntimeHelper.downcallHandle(
        AVFormatContext.io_close_DOWN$FUNC
    );
    /**
     * {@snippet :
 * void (*io_close)(struct AVFormatContext*,AVIOContext*);
     * }
     */
    public interface io_close {

        void apply(java.lang.foreign.MemorySegment _x0, java.lang.foreign.MemorySegment _x1);
        static MemorySegment allocate(io_close fi, SegmentScope scope) {
            return RuntimeHelper.upcallStub(AVFormatContext.io_close_UP$MH, fi, AVFormatContext.io_close$FUNC, scope);
        }
        static io_close ofAddress(MemorySegment addr, SegmentScope scope) {
            MemorySegment symbol = MemorySegment.ofAddress(addr.address(), 0, scope);
            return (java.lang.foreign.MemorySegment __x0, java.lang.foreign.MemorySegment __x1) -> {
                try {
                    AVFormatContext.io_close_DOWN$MH.invokeExact(symbol, __x0, __x1);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    static final VarHandle io_close$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("io_close"));
    public static VarHandle io_close$VH() {
        return AVFormatContext.io_close$VH;
    }
    /**
     * Getter for field:
     * {@snippet :
     * void (*io_close)(struct AVFormatContext*,AVIOContext*);
     * }
     */
    public static MemorySegment io_close$get(MemorySegment seg) {
        return (java.lang.foreign.MemorySegment)AVFormatContext.io_close$VH.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * void (*io_close)(struct AVFormatContext*,AVIOContext*);
     * }
     */
    public static void io_close$set(MemorySegment seg, MemorySegment x) {
        AVFormatContext.io_close$VH.set(seg, x);
    }
    public static MemorySegment io_close$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemorySegment)AVFormatContext.io_close$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void io_close$set(MemorySegment seg, long index, MemorySegment x) {
        AVFormatContext.io_close$VH.set(seg.asSlice(index*sizeof()), x);
    }
    public static io_close io_close(MemorySegment segment, SegmentScope scope) {
        return io_close.ofAddress(io_close$get(segment), scope);
    }
    static final VarHandle protocol_blacklist$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("protocol_blacklist"));
    public static VarHandle protocol_blacklist$VH() {
        return AVFormatContext.protocol_blacklist$VH;
    }
    /**
     * Getter for field:
     * {@snippet :
     * char* protocol_blacklist;
     * }
     */
    public static MemorySegment protocol_blacklist$get(MemorySegment seg) {
        return (java.lang.foreign.MemorySegment)AVFormatContext.protocol_blacklist$VH.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * char* protocol_blacklist;
     * }
     */
    public static void protocol_blacklist$set(MemorySegment seg, MemorySegment x) {
        AVFormatContext.protocol_blacklist$VH.set(seg, x);
    }
    public static MemorySegment protocol_blacklist$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemorySegment)AVFormatContext.protocol_blacklist$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void protocol_blacklist$set(MemorySegment seg, long index, MemorySegment x) {
        AVFormatContext.protocol_blacklist$VH.set(seg.asSlice(index*sizeof()), x);
    }
    static final VarHandle max_streams$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("max_streams"));
    public static VarHandle max_streams$VH() {
        return AVFormatContext.max_streams$VH;
    }
    /**
     * Getter for field:
     * {@snippet :
     * int max_streams;
     * }
     */
    public static int max_streams$get(MemorySegment seg) {
        return (int)AVFormatContext.max_streams$VH.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * int max_streams;
     * }
     */
    public static void max_streams$set(MemorySegment seg, int x) {
        AVFormatContext.max_streams$VH.set(seg, x);
    }
    public static int max_streams$get(MemorySegment seg, long index) {
        return (int)AVFormatContext.max_streams$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void max_streams$set(MemorySegment seg, long index, int x) {
        AVFormatContext.max_streams$VH.set(seg.asSlice(index*sizeof()), x);
    }
    static final VarHandle skip_estimate_duration_from_pts$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("skip_estimate_duration_from_pts"));
    public static VarHandle skip_estimate_duration_from_pts$VH() {
        return AVFormatContext.skip_estimate_duration_from_pts$VH;
    }
    /**
     * Getter for field:
     * {@snippet :
     * int skip_estimate_duration_from_pts;
     * }
     */
    public static int skip_estimate_duration_from_pts$get(MemorySegment seg) {
        return (int)AVFormatContext.skip_estimate_duration_from_pts$VH.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * int skip_estimate_duration_from_pts;
     * }
     */
    public static void skip_estimate_duration_from_pts$set(MemorySegment seg, int x) {
        AVFormatContext.skip_estimate_duration_from_pts$VH.set(seg, x);
    }
    public static int skip_estimate_duration_from_pts$get(MemorySegment seg, long index) {
        return (int)AVFormatContext.skip_estimate_duration_from_pts$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void skip_estimate_duration_from_pts$set(MemorySegment seg, long index, int x) {
        AVFormatContext.skip_estimate_duration_from_pts$VH.set(seg.asSlice(index*sizeof()), x);
    }
    static final VarHandle max_probe_packets$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("max_probe_packets"));
    public static VarHandle max_probe_packets$VH() {
        return AVFormatContext.max_probe_packets$VH;
    }
    /**
     * Getter for field:
     * {@snippet :
     * int max_probe_packets;
     * }
     */
    public static int max_probe_packets$get(MemorySegment seg) {
        return (int)AVFormatContext.max_probe_packets$VH.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * int max_probe_packets;
     * }
     */
    public static void max_probe_packets$set(MemorySegment seg, int x) {
        AVFormatContext.max_probe_packets$VH.set(seg, x);
    }
    public static int max_probe_packets$get(MemorySegment seg, long index) {
        return (int)AVFormatContext.max_probe_packets$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void max_probe_packets$set(MemorySegment seg, long index, int x) {
        AVFormatContext.max_probe_packets$VH.set(seg.asSlice(index*sizeof()), x);
    }
    static final FunctionDescriptor io_close2$FUNC = FunctionDescriptor.of(Constants$root.C_LONG$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_POINTER$LAYOUT
    );
    static final FunctionDescriptor io_close2_UP$FUNC = FunctionDescriptor.of(Constants$root.C_LONG$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_POINTER$LAYOUT
    );
    static final MethodHandle io_close2_UP$MH = RuntimeHelper.upcallHandle(io_close2.class, "apply", AVFormatContext.io_close2_UP$FUNC);
    static final FunctionDescriptor io_close2_DOWN$FUNC = FunctionDescriptor.of(Constants$root.C_LONG$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_POINTER$LAYOUT
    );
    static final MethodHandle io_close2_DOWN$MH = RuntimeHelper.downcallHandle(
        AVFormatContext.io_close2_DOWN$FUNC
    );
    /**
     * {@snippet :
 * int (*io_close2)(struct AVFormatContext*,AVIOContext*);
     * }
     */
    public interface io_close2 {

        int apply(java.lang.foreign.MemorySegment _x0, java.lang.foreign.MemorySegment _x1);
        static MemorySegment allocate(io_close2 fi, SegmentScope scope) {
            return RuntimeHelper.upcallStub(AVFormatContext.io_close2_UP$MH, fi, AVFormatContext.io_close2$FUNC, scope);
        }
        static io_close2 ofAddress(MemorySegment addr, SegmentScope scope) {
            MemorySegment symbol = MemorySegment.ofAddress(addr.address(), 0, scope);
            return (java.lang.foreign.MemorySegment __x0, java.lang.foreign.MemorySegment __x1) -> {
                try {
                    return (int)AVFormatContext.io_close2_DOWN$MH.invokeExact(symbol, __x0, __x1);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    static final VarHandle io_close2$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("io_close2"));
    public static VarHandle io_close2$VH() {
        return AVFormatContext.io_close2$VH;
    }
    /**
     * Getter for field:
     * {@snippet :
     * int (*io_close2)(struct AVFormatContext*,AVIOContext*);
     * }
     */
    public static MemorySegment io_close2$get(MemorySegment seg) {
        return (java.lang.foreign.MemorySegment)AVFormatContext.io_close2$VH.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * int (*io_close2)(struct AVFormatContext*,AVIOContext*);
     * }
     */
    public static void io_close2$set(MemorySegment seg, MemorySegment x) {
        AVFormatContext.io_close2$VH.set(seg, x);
    }
    public static MemorySegment io_close2$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemorySegment)AVFormatContext.io_close2$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void io_close2$set(MemorySegment seg, long index, MemorySegment x) {
        AVFormatContext.io_close2$VH.set(seg.asSlice(index*sizeof()), x);
    }
    public static io_close2 io_close2(MemorySegment segment, SegmentScope scope) {
        return io_close2.ofAddress(io_close2$get(segment), scope);
    }
    public static long sizeof() { return $LAYOUT().byteSize(); }
    public static MemorySegment allocate(SegmentAllocator allocator) { return allocator.allocate($LAYOUT()); }
    public static MemorySegment allocateArray(long len, SegmentAllocator allocator) {
        return allocator.allocate(MemoryLayout.sequenceLayout(len, $LAYOUT()));
    }
    public static MemorySegment ofAddress(MemorySegment addr, SegmentScope scope) { return RuntimeHelper.asArray(addr, $LAYOUT(), 1, scope); }
}


