// Generated by jextract

package com.icuxika.jextract.libffmpeg;

import java.lang.invoke.MethodHandle;
import java.lang.invoke.VarHandle;
import java.nio.ByteOrder;
import java.lang.foreign.*;
import static java.lang.foreign.ValueLayout.*;
/**
 * {@snippet :
 * struct AVCPBProperties {
 *     int64_t max_bitrate;
 *     int64_t min_bitrate;
 *     int64_t avg_bitrate;
 *     int64_t buffer_size;
 *     uint64_t vbv_delay;
 * };
 * }
 */
public class AVCPBProperties {

    static final StructLayout $struct$LAYOUT = MemoryLayout.structLayout(
        Constants$root.C_LONG_LONG$LAYOUT.withName("max_bitrate"),
        Constants$root.C_LONG_LONG$LAYOUT.withName("min_bitrate"),
        Constants$root.C_LONG_LONG$LAYOUT.withName("avg_bitrate"),
        Constants$root.C_LONG_LONG$LAYOUT.withName("buffer_size"),
        Constants$root.C_LONG_LONG$LAYOUT.withName("vbv_delay")
    ).withName("AVCPBProperties");
    public static MemoryLayout $LAYOUT() {
        return AVCPBProperties.$struct$LAYOUT;
    }
    static final VarHandle max_bitrate$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("max_bitrate"));
    public static VarHandle max_bitrate$VH() {
        return AVCPBProperties.max_bitrate$VH;
    }
    /**
     * Getter for field:
     * {@snippet :
     * int64_t max_bitrate;
     * }
     */
    public static long max_bitrate$get(MemorySegment seg) {
        return (long)AVCPBProperties.max_bitrate$VH.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * int64_t max_bitrate;
     * }
     */
    public static void max_bitrate$set(MemorySegment seg, long x) {
        AVCPBProperties.max_bitrate$VH.set(seg, x);
    }
    public static long max_bitrate$get(MemorySegment seg, long index) {
        return (long)AVCPBProperties.max_bitrate$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void max_bitrate$set(MemorySegment seg, long index, long x) {
        AVCPBProperties.max_bitrate$VH.set(seg.asSlice(index*sizeof()), x);
    }
    static final VarHandle min_bitrate$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("min_bitrate"));
    public static VarHandle min_bitrate$VH() {
        return AVCPBProperties.min_bitrate$VH;
    }
    /**
     * Getter for field:
     * {@snippet :
     * int64_t min_bitrate;
     * }
     */
    public static long min_bitrate$get(MemorySegment seg) {
        return (long)AVCPBProperties.min_bitrate$VH.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * int64_t min_bitrate;
     * }
     */
    public static void min_bitrate$set(MemorySegment seg, long x) {
        AVCPBProperties.min_bitrate$VH.set(seg, x);
    }
    public static long min_bitrate$get(MemorySegment seg, long index) {
        return (long)AVCPBProperties.min_bitrate$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void min_bitrate$set(MemorySegment seg, long index, long x) {
        AVCPBProperties.min_bitrate$VH.set(seg.asSlice(index*sizeof()), x);
    }
    static final VarHandle avg_bitrate$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("avg_bitrate"));
    public static VarHandle avg_bitrate$VH() {
        return AVCPBProperties.avg_bitrate$VH;
    }
    /**
     * Getter for field:
     * {@snippet :
     * int64_t avg_bitrate;
     * }
     */
    public static long avg_bitrate$get(MemorySegment seg) {
        return (long)AVCPBProperties.avg_bitrate$VH.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * int64_t avg_bitrate;
     * }
     */
    public static void avg_bitrate$set(MemorySegment seg, long x) {
        AVCPBProperties.avg_bitrate$VH.set(seg, x);
    }
    public static long avg_bitrate$get(MemorySegment seg, long index) {
        return (long)AVCPBProperties.avg_bitrate$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void avg_bitrate$set(MemorySegment seg, long index, long x) {
        AVCPBProperties.avg_bitrate$VH.set(seg.asSlice(index*sizeof()), x);
    }
    static final VarHandle buffer_size$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("buffer_size"));
    public static VarHandle buffer_size$VH() {
        return AVCPBProperties.buffer_size$VH;
    }
    /**
     * Getter for field:
     * {@snippet :
     * int64_t buffer_size;
     * }
     */
    public static long buffer_size$get(MemorySegment seg) {
        return (long)AVCPBProperties.buffer_size$VH.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * int64_t buffer_size;
     * }
     */
    public static void buffer_size$set(MemorySegment seg, long x) {
        AVCPBProperties.buffer_size$VH.set(seg, x);
    }
    public static long buffer_size$get(MemorySegment seg, long index) {
        return (long)AVCPBProperties.buffer_size$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void buffer_size$set(MemorySegment seg, long index, long x) {
        AVCPBProperties.buffer_size$VH.set(seg.asSlice(index*sizeof()), x);
    }
    static final VarHandle vbv_delay$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("vbv_delay"));
    public static VarHandle vbv_delay$VH() {
        return AVCPBProperties.vbv_delay$VH;
    }
    /**
     * Getter for field:
     * {@snippet :
     * uint64_t vbv_delay;
     * }
     */
    public static long vbv_delay$get(MemorySegment seg) {
        return (long)AVCPBProperties.vbv_delay$VH.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * uint64_t vbv_delay;
     * }
     */
    public static void vbv_delay$set(MemorySegment seg, long x) {
        AVCPBProperties.vbv_delay$VH.set(seg, x);
    }
    public static long vbv_delay$get(MemorySegment seg, long index) {
        return (long)AVCPBProperties.vbv_delay$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void vbv_delay$set(MemorySegment seg, long index, long x) {
        AVCPBProperties.vbv_delay$VH.set(seg.asSlice(index*sizeof()), x);
    }
    public static long sizeof() { return $LAYOUT().byteSize(); }
    public static MemorySegment allocate(SegmentAllocator allocator) { return allocator.allocate($LAYOUT()); }
    public static MemorySegment allocateArray(long len, SegmentAllocator allocator) {
        return allocator.allocate(MemoryLayout.sequenceLayout(len, $LAYOUT()));
    }
    public static MemorySegment ofAddress(MemorySegment addr, SegmentScope scope) { return RuntimeHelper.asArray(addr, $LAYOUT(), 1, scope); }
}


