// Generated by jextract

package com.icuxika.jextract.libffmpeg;

import java.lang.invoke.MethodHandle;
import java.lang.invoke.VarHandle;
import java.nio.ByteOrder;
import java.lang.foreign.*;
import static java.lang.foreign.ValueLayout.*;
/**
 * {@snippet :
 * struct AVPacket {
 *     AVBufferRef* buf;
 *     int64_t pts;
 *     int64_t dts;
 *     uint8_t* data;
 *     int size;
 *     int stream_index;
 *     int flags;
 *     AVPacketSideData* side_data;
 *     int side_data_elems;
 *     int64_t duration;
 *     int64_t pos;
 *     void* opaque;
 *     AVBufferRef* opaque_ref;
 *     AVRational time_base;
 * };
 * }
 */
public class AVPacket {

    static final StructLayout $struct$LAYOUT = MemoryLayout.structLayout(
        Constants$root.C_POINTER$LAYOUT.withName("buf"),
        Constants$root.C_LONG_LONG$LAYOUT.withName("pts"),
        Constants$root.C_LONG_LONG$LAYOUT.withName("dts"),
        Constants$root.C_POINTER$LAYOUT.withName("data"),
        Constants$root.C_LONG$LAYOUT.withName("size"),
        Constants$root.C_LONG$LAYOUT.withName("stream_index"),
        Constants$root.C_LONG$LAYOUT.withName("flags"),
        MemoryLayout.paddingLayout(32),
        Constants$root.C_POINTER$LAYOUT.withName("side_data"),
        Constants$root.C_LONG$LAYOUT.withName("side_data_elems"),
        MemoryLayout.paddingLayout(32),
        Constants$root.C_LONG_LONG$LAYOUT.withName("duration"),
        Constants$root.C_LONG_LONG$LAYOUT.withName("pos"),
        Constants$root.C_POINTER$LAYOUT.withName("opaque"),
        Constants$root.C_POINTER$LAYOUT.withName("opaque_ref"),
        MemoryLayout.structLayout(
            Constants$root.C_LONG$LAYOUT.withName("num"),
            Constants$root.C_LONG$LAYOUT.withName("den")
        ).withName("time_base")
    ).withName("AVPacket");
    public static MemoryLayout $LAYOUT() {
        return AVPacket.$struct$LAYOUT;
    }
    static final VarHandle buf$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("buf"));
    public static VarHandle buf$VH() {
        return AVPacket.buf$VH;
    }
    /**
     * Getter for field:
     * {@snippet :
     * AVBufferRef* buf;
     * }
     */
    public static MemorySegment buf$get(MemorySegment seg) {
        return (java.lang.foreign.MemorySegment)AVPacket.buf$VH.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * AVBufferRef* buf;
     * }
     */
    public static void buf$set(MemorySegment seg, MemorySegment x) {
        AVPacket.buf$VH.set(seg, x);
    }
    public static MemorySegment buf$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemorySegment)AVPacket.buf$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void buf$set(MemorySegment seg, long index, MemorySegment x) {
        AVPacket.buf$VH.set(seg.asSlice(index*sizeof()), x);
    }
    static final VarHandle pts$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("pts"));
    public static VarHandle pts$VH() {
        return AVPacket.pts$VH;
    }
    /**
     * Getter for field:
     * {@snippet :
     * int64_t pts;
     * }
     */
    public static long pts$get(MemorySegment seg) {
        return (long)AVPacket.pts$VH.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * int64_t pts;
     * }
     */
    public static void pts$set(MemorySegment seg, long x) {
        AVPacket.pts$VH.set(seg, x);
    }
    public static long pts$get(MemorySegment seg, long index) {
        return (long)AVPacket.pts$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void pts$set(MemorySegment seg, long index, long x) {
        AVPacket.pts$VH.set(seg.asSlice(index*sizeof()), x);
    }
    static final VarHandle dts$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("dts"));
    public static VarHandle dts$VH() {
        return AVPacket.dts$VH;
    }
    /**
     * Getter for field:
     * {@snippet :
     * int64_t dts;
     * }
     */
    public static long dts$get(MemorySegment seg) {
        return (long)AVPacket.dts$VH.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * int64_t dts;
     * }
     */
    public static void dts$set(MemorySegment seg, long x) {
        AVPacket.dts$VH.set(seg, x);
    }
    public static long dts$get(MemorySegment seg, long index) {
        return (long)AVPacket.dts$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void dts$set(MemorySegment seg, long index, long x) {
        AVPacket.dts$VH.set(seg.asSlice(index*sizeof()), x);
    }
    static final VarHandle data$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("data"));
    public static VarHandle data$VH() {
        return AVPacket.data$VH;
    }
    /**
     * Getter for field:
     * {@snippet :
     * uint8_t* data;
     * }
     */
    public static MemorySegment data$get(MemorySegment seg) {
        return (java.lang.foreign.MemorySegment)AVPacket.data$VH.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * uint8_t* data;
     * }
     */
    public static void data$set(MemorySegment seg, MemorySegment x) {
        AVPacket.data$VH.set(seg, x);
    }
    public static MemorySegment data$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemorySegment)AVPacket.data$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void data$set(MemorySegment seg, long index, MemorySegment x) {
        AVPacket.data$VH.set(seg.asSlice(index*sizeof()), x);
    }
    static final VarHandle size$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("size"));
    public static VarHandle size$VH() {
        return AVPacket.size$VH;
    }
    /**
     * Getter for field:
     * {@snippet :
     * int size;
     * }
     */
    public static int size$get(MemorySegment seg) {
        return (int)AVPacket.size$VH.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * int size;
     * }
     */
    public static void size$set(MemorySegment seg, int x) {
        AVPacket.size$VH.set(seg, x);
    }
    public static int size$get(MemorySegment seg, long index) {
        return (int)AVPacket.size$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void size$set(MemorySegment seg, long index, int x) {
        AVPacket.size$VH.set(seg.asSlice(index*sizeof()), x);
    }
    static final VarHandle stream_index$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("stream_index"));
    public static VarHandle stream_index$VH() {
        return AVPacket.stream_index$VH;
    }
    /**
     * Getter for field:
     * {@snippet :
     * int stream_index;
     * }
     */
    public static int stream_index$get(MemorySegment seg) {
        return (int)AVPacket.stream_index$VH.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * int stream_index;
     * }
     */
    public static void stream_index$set(MemorySegment seg, int x) {
        AVPacket.stream_index$VH.set(seg, x);
    }
    public static int stream_index$get(MemorySegment seg, long index) {
        return (int)AVPacket.stream_index$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void stream_index$set(MemorySegment seg, long index, int x) {
        AVPacket.stream_index$VH.set(seg.asSlice(index*sizeof()), x);
    }
    static final VarHandle flags$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("flags"));
    public static VarHandle flags$VH() {
        return AVPacket.flags$VH;
    }
    /**
     * Getter for field:
     * {@snippet :
     * int flags;
     * }
     */
    public static int flags$get(MemorySegment seg) {
        return (int)AVPacket.flags$VH.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * int flags;
     * }
     */
    public static void flags$set(MemorySegment seg, int x) {
        AVPacket.flags$VH.set(seg, x);
    }
    public static int flags$get(MemorySegment seg, long index) {
        return (int)AVPacket.flags$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void flags$set(MemorySegment seg, long index, int x) {
        AVPacket.flags$VH.set(seg.asSlice(index*sizeof()), x);
    }
    static final VarHandle side_data$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("side_data"));
    public static VarHandle side_data$VH() {
        return AVPacket.side_data$VH;
    }
    /**
     * Getter for field:
     * {@snippet :
     * AVPacketSideData* side_data;
     * }
     */
    public static MemorySegment side_data$get(MemorySegment seg) {
        return (java.lang.foreign.MemorySegment)AVPacket.side_data$VH.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * AVPacketSideData* side_data;
     * }
     */
    public static void side_data$set(MemorySegment seg, MemorySegment x) {
        AVPacket.side_data$VH.set(seg, x);
    }
    public static MemorySegment side_data$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemorySegment)AVPacket.side_data$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void side_data$set(MemorySegment seg, long index, MemorySegment x) {
        AVPacket.side_data$VH.set(seg.asSlice(index*sizeof()), x);
    }
    static final VarHandle side_data_elems$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("side_data_elems"));
    public static VarHandle side_data_elems$VH() {
        return AVPacket.side_data_elems$VH;
    }
    /**
     * Getter for field:
     * {@snippet :
     * int side_data_elems;
     * }
     */
    public static int side_data_elems$get(MemorySegment seg) {
        return (int)AVPacket.side_data_elems$VH.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * int side_data_elems;
     * }
     */
    public static void side_data_elems$set(MemorySegment seg, int x) {
        AVPacket.side_data_elems$VH.set(seg, x);
    }
    public static int side_data_elems$get(MemorySegment seg, long index) {
        return (int)AVPacket.side_data_elems$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void side_data_elems$set(MemorySegment seg, long index, int x) {
        AVPacket.side_data_elems$VH.set(seg.asSlice(index*sizeof()), x);
    }
    static final VarHandle duration$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("duration"));
    public static VarHandle duration$VH() {
        return AVPacket.duration$VH;
    }
    /**
     * Getter for field:
     * {@snippet :
     * int64_t duration;
     * }
     */
    public static long duration$get(MemorySegment seg) {
        return (long)AVPacket.duration$VH.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * int64_t duration;
     * }
     */
    public static void duration$set(MemorySegment seg, long x) {
        AVPacket.duration$VH.set(seg, x);
    }
    public static long duration$get(MemorySegment seg, long index) {
        return (long)AVPacket.duration$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void duration$set(MemorySegment seg, long index, long x) {
        AVPacket.duration$VH.set(seg.asSlice(index*sizeof()), x);
    }
    static final VarHandle pos$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("pos"));
    public static VarHandle pos$VH() {
        return AVPacket.pos$VH;
    }
    /**
     * Getter for field:
     * {@snippet :
     * int64_t pos;
     * }
     */
    public static long pos$get(MemorySegment seg) {
        return (long)AVPacket.pos$VH.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * int64_t pos;
     * }
     */
    public static void pos$set(MemorySegment seg, long x) {
        AVPacket.pos$VH.set(seg, x);
    }
    public static long pos$get(MemorySegment seg, long index) {
        return (long)AVPacket.pos$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void pos$set(MemorySegment seg, long index, long x) {
        AVPacket.pos$VH.set(seg.asSlice(index*sizeof()), x);
    }
    static final VarHandle opaque$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("opaque"));
    public static VarHandle opaque$VH() {
        return AVPacket.opaque$VH;
    }
    /**
     * Getter for field:
     * {@snippet :
     * void* opaque;
     * }
     */
    public static MemorySegment opaque$get(MemorySegment seg) {
        return (java.lang.foreign.MemorySegment)AVPacket.opaque$VH.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * void* opaque;
     * }
     */
    public static void opaque$set(MemorySegment seg, MemorySegment x) {
        AVPacket.opaque$VH.set(seg, x);
    }
    public static MemorySegment opaque$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemorySegment)AVPacket.opaque$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void opaque$set(MemorySegment seg, long index, MemorySegment x) {
        AVPacket.opaque$VH.set(seg.asSlice(index*sizeof()), x);
    }
    static final VarHandle opaque_ref$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("opaque_ref"));
    public static VarHandle opaque_ref$VH() {
        return AVPacket.opaque_ref$VH;
    }
    /**
     * Getter for field:
     * {@snippet :
     * AVBufferRef* opaque_ref;
     * }
     */
    public static MemorySegment opaque_ref$get(MemorySegment seg) {
        return (java.lang.foreign.MemorySegment)AVPacket.opaque_ref$VH.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * AVBufferRef* opaque_ref;
     * }
     */
    public static void opaque_ref$set(MemorySegment seg, MemorySegment x) {
        AVPacket.opaque_ref$VH.set(seg, x);
    }
    public static MemorySegment opaque_ref$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemorySegment)AVPacket.opaque_ref$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void opaque_ref$set(MemorySegment seg, long index, MemorySegment x) {
        AVPacket.opaque_ref$VH.set(seg.asSlice(index*sizeof()), x);
    }
    public static MemorySegment time_base$slice(MemorySegment seg) {
        return seg.asSlice(96, 8);
    }
    public static long sizeof() { return $LAYOUT().byteSize(); }
    public static MemorySegment allocate(SegmentAllocator allocator) { return allocator.allocate($LAYOUT()); }
    public static MemorySegment allocateArray(long len, SegmentAllocator allocator) {
        return allocator.allocate(MemoryLayout.sequenceLayout(len, $LAYOUT()));
    }
    public static MemorySegment ofAddress(MemorySegment addr, SegmentScope scope) { return RuntimeHelper.asArray(addr, $LAYOUT(), 1, scope); }
}


