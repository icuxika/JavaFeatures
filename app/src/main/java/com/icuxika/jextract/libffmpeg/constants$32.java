// Generated by jextract

package com.icuxika.jextract.libffmpeg;

import java.lang.invoke.MethodHandle;
import java.lang.invoke.VarHandle;
import java.nio.ByteOrder;
import java.lang.foreign.*;
import static java.lang.foreign.ValueLayout.*;
final class constants$32 {

    // Suppresses default constructor, ensuring non-instantiability.
    private constants$32() {}
    static final FunctionDescriptor _get_FMA3_enable$FUNC = FunctionDescriptor.of(Constants$root.C_LONG$LAYOUT);
    static final MethodHandle _get_FMA3_enable$MH = RuntimeHelper.downcallHandle(
        "_get_FMA3_enable",
        constants$32._get_FMA3_enable$FUNC
    );
    static final FunctionDescriptor acosf$FUNC = FunctionDescriptor.of(Constants$root.C_FLOAT$LAYOUT,
        Constants$root.C_FLOAT$LAYOUT
    );
    static final MethodHandle acosf$MH = RuntimeHelper.downcallHandle(
        "acosf",
        constants$32.acosf$FUNC
    );
    static final FunctionDescriptor asinf$FUNC = FunctionDescriptor.of(Constants$root.C_FLOAT$LAYOUT,
        Constants$root.C_FLOAT$LAYOUT
    );
    static final MethodHandle asinf$MH = RuntimeHelper.downcallHandle(
        "asinf",
        constants$32.asinf$FUNC
    );
    static final FunctionDescriptor atan2f$FUNC = FunctionDescriptor.of(Constants$root.C_FLOAT$LAYOUT,
        Constants$root.C_FLOAT$LAYOUT,
        Constants$root.C_FLOAT$LAYOUT
    );
    static final MethodHandle atan2f$MH = RuntimeHelper.downcallHandle(
        "atan2f",
        constants$32.atan2f$FUNC
    );
    static final FunctionDescriptor atanf$FUNC = FunctionDescriptor.of(Constants$root.C_FLOAT$LAYOUT,
        Constants$root.C_FLOAT$LAYOUT
    );
    static final MethodHandle atanf$MH = RuntimeHelper.downcallHandle(
        "atanf",
        constants$32.atanf$FUNC
    );
    static final FunctionDescriptor ceilf$FUNC = FunctionDescriptor.of(Constants$root.C_FLOAT$LAYOUT,
        Constants$root.C_FLOAT$LAYOUT
    );
    static final MethodHandle ceilf$MH = RuntimeHelper.downcallHandle(
        "ceilf",
        constants$32.ceilf$FUNC
    );
}


