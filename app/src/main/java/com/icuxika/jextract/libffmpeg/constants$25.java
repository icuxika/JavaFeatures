// Generated by jextract

package com.icuxika.jextract.libffmpeg;

import java.lang.invoke.MethodHandle;
import java.lang.invoke.VarHandle;
import java.nio.ByteOrder;
import java.lang.foreign.*;
import static java.lang.foreign.ValueLayout.*;
final class constants$25 {

    // Suppresses default constructor, ensuring non-instantiability.
    private constants$25() {}
    static final FunctionDescriptor acoshf$FUNC = FunctionDescriptor.of(Constants$root.C_FLOAT$LAYOUT,
        Constants$root.C_FLOAT$LAYOUT
    );
    static final MethodHandle acoshf$MH = RuntimeHelper.downcallHandle(
        "acoshf",
        constants$25.acoshf$FUNC
    );
    static final FunctionDescriptor asinhf$FUNC = FunctionDescriptor.of(Constants$root.C_FLOAT$LAYOUT,
        Constants$root.C_FLOAT$LAYOUT
    );
    static final MethodHandle asinhf$MH = RuntimeHelper.downcallHandle(
        "asinhf",
        constants$25.asinhf$FUNC
    );
    static final FunctionDescriptor atanhf$FUNC = FunctionDescriptor.of(Constants$root.C_FLOAT$LAYOUT,
        Constants$root.C_FLOAT$LAYOUT
    );
    static final MethodHandle atanhf$MH = RuntimeHelper.downcallHandle(
        "atanhf",
        constants$25.atanhf$FUNC
    );
    static final FunctionDescriptor cbrtf$FUNC = FunctionDescriptor.of(Constants$root.C_FLOAT$LAYOUT,
        Constants$root.C_FLOAT$LAYOUT
    );
    static final MethodHandle cbrtf$MH = RuntimeHelper.downcallHandle(
        "cbrtf",
        constants$25.cbrtf$FUNC
    );
    static final FunctionDescriptor _chgsignf$FUNC = FunctionDescriptor.of(Constants$root.C_FLOAT$LAYOUT,
        Constants$root.C_FLOAT$LAYOUT
    );
    static final MethodHandle _chgsignf$MH = RuntimeHelper.downcallHandle(
        "_chgsignf",
        constants$25._chgsignf$FUNC
    );
    static final FunctionDescriptor copysignf$FUNC = FunctionDescriptor.of(Constants$root.C_FLOAT$LAYOUT,
        Constants$root.C_FLOAT$LAYOUT,
        Constants$root.C_FLOAT$LAYOUT
    );
    static final MethodHandle copysignf$MH = RuntimeHelper.downcallHandle(
        "copysignf",
        constants$25.copysignf$FUNC
    );
}


