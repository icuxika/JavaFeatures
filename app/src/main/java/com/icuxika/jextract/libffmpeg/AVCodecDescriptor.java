// Generated by jextract

package com.icuxika.jextract.libffmpeg;

import java.lang.invoke.MethodHandle;
import java.lang.invoke.VarHandle;
import java.nio.ByteOrder;
import java.lang.foreign.*;
import static java.lang.foreign.ValueLayout.*;
/**
 * {@snippet :
 * struct AVCodecDescriptor {
 *     enum AVCodecID id;
 *     enum AVMediaType type;
 *     char* name;
 *     char* long_name;
 *     int props;
 *     char** mime_types;
 *     struct AVProfile* profiles;
 * };
 * }
 */
public class AVCodecDescriptor {

    static final StructLayout $struct$LAYOUT = MemoryLayout.structLayout(
        Constants$root.C_LONG$LAYOUT.withName("id"),
        Constants$root.C_LONG$LAYOUT.withName("type"),
        Constants$root.C_POINTER$LAYOUT.withName("name"),
        Constants$root.C_POINTER$LAYOUT.withName("long_name"),
        Constants$root.C_LONG$LAYOUT.withName("props"),
        MemoryLayout.paddingLayout(32),
        Constants$root.C_POINTER$LAYOUT.withName("mime_types"),
        Constants$root.C_POINTER$LAYOUT.withName("profiles")
    ).withName("AVCodecDescriptor");
    public static MemoryLayout $LAYOUT() {
        return AVCodecDescriptor.$struct$LAYOUT;
    }
    static final VarHandle id$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("id"));
    public static VarHandle id$VH() {
        return AVCodecDescriptor.id$VH;
    }
    /**
     * Getter for field:
     * {@snippet :
     * enum AVCodecID id;
     * }
     */
    public static int id$get(MemorySegment seg) {
        return (int)AVCodecDescriptor.id$VH.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * enum AVCodecID id;
     * }
     */
    public static void id$set(MemorySegment seg, int x) {
        AVCodecDescriptor.id$VH.set(seg, x);
    }
    public static int id$get(MemorySegment seg, long index) {
        return (int)AVCodecDescriptor.id$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void id$set(MemorySegment seg, long index, int x) {
        AVCodecDescriptor.id$VH.set(seg.asSlice(index*sizeof()), x);
    }
    static final VarHandle type$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("type"));
    public static VarHandle type$VH() {
        return AVCodecDescriptor.type$VH;
    }
    /**
     * Getter for field:
     * {@snippet :
     * enum AVMediaType type;
     * }
     */
    public static int type$get(MemorySegment seg) {
        return (int)AVCodecDescriptor.type$VH.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * enum AVMediaType type;
     * }
     */
    public static void type$set(MemorySegment seg, int x) {
        AVCodecDescriptor.type$VH.set(seg, x);
    }
    public static int type$get(MemorySegment seg, long index) {
        return (int)AVCodecDescriptor.type$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void type$set(MemorySegment seg, long index, int x) {
        AVCodecDescriptor.type$VH.set(seg.asSlice(index*sizeof()), x);
    }
    static final VarHandle name$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("name"));
    public static VarHandle name$VH() {
        return AVCodecDescriptor.name$VH;
    }
    /**
     * Getter for field:
     * {@snippet :
     * char* name;
     * }
     */
    public static MemorySegment name$get(MemorySegment seg) {
        return (java.lang.foreign.MemorySegment)AVCodecDescriptor.name$VH.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * char* name;
     * }
     */
    public static void name$set(MemorySegment seg, MemorySegment x) {
        AVCodecDescriptor.name$VH.set(seg, x);
    }
    public static MemorySegment name$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemorySegment)AVCodecDescriptor.name$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void name$set(MemorySegment seg, long index, MemorySegment x) {
        AVCodecDescriptor.name$VH.set(seg.asSlice(index*sizeof()), x);
    }
    static final VarHandle long_name$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("long_name"));
    public static VarHandle long_name$VH() {
        return AVCodecDescriptor.long_name$VH;
    }
    /**
     * Getter for field:
     * {@snippet :
     * char* long_name;
     * }
     */
    public static MemorySegment long_name$get(MemorySegment seg) {
        return (java.lang.foreign.MemorySegment)AVCodecDescriptor.long_name$VH.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * char* long_name;
     * }
     */
    public static void long_name$set(MemorySegment seg, MemorySegment x) {
        AVCodecDescriptor.long_name$VH.set(seg, x);
    }
    public static MemorySegment long_name$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemorySegment)AVCodecDescriptor.long_name$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void long_name$set(MemorySegment seg, long index, MemorySegment x) {
        AVCodecDescriptor.long_name$VH.set(seg.asSlice(index*sizeof()), x);
    }
    static final VarHandle props$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("props"));
    public static VarHandle props$VH() {
        return AVCodecDescriptor.props$VH;
    }
    /**
     * Getter for field:
     * {@snippet :
     * int props;
     * }
     */
    public static int props$get(MemorySegment seg) {
        return (int)AVCodecDescriptor.props$VH.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * int props;
     * }
     */
    public static void props$set(MemorySegment seg, int x) {
        AVCodecDescriptor.props$VH.set(seg, x);
    }
    public static int props$get(MemorySegment seg, long index) {
        return (int)AVCodecDescriptor.props$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void props$set(MemorySegment seg, long index, int x) {
        AVCodecDescriptor.props$VH.set(seg.asSlice(index*sizeof()), x);
    }
    static final VarHandle mime_types$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("mime_types"));
    public static VarHandle mime_types$VH() {
        return AVCodecDescriptor.mime_types$VH;
    }
    /**
     * Getter for field:
     * {@snippet :
     * char** mime_types;
     * }
     */
    public static MemorySegment mime_types$get(MemorySegment seg) {
        return (java.lang.foreign.MemorySegment)AVCodecDescriptor.mime_types$VH.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * char** mime_types;
     * }
     */
    public static void mime_types$set(MemorySegment seg, MemorySegment x) {
        AVCodecDescriptor.mime_types$VH.set(seg, x);
    }
    public static MemorySegment mime_types$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemorySegment)AVCodecDescriptor.mime_types$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void mime_types$set(MemorySegment seg, long index, MemorySegment x) {
        AVCodecDescriptor.mime_types$VH.set(seg.asSlice(index*sizeof()), x);
    }
    static final VarHandle profiles$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("profiles"));
    public static VarHandle profiles$VH() {
        return AVCodecDescriptor.profiles$VH;
    }
    /**
     * Getter for field:
     * {@snippet :
     * struct AVProfile* profiles;
     * }
     */
    public static MemorySegment profiles$get(MemorySegment seg) {
        return (java.lang.foreign.MemorySegment)AVCodecDescriptor.profiles$VH.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * struct AVProfile* profiles;
     * }
     */
    public static void profiles$set(MemorySegment seg, MemorySegment x) {
        AVCodecDescriptor.profiles$VH.set(seg, x);
    }
    public static MemorySegment profiles$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemorySegment)AVCodecDescriptor.profiles$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void profiles$set(MemorySegment seg, long index, MemorySegment x) {
        AVCodecDescriptor.profiles$VH.set(seg.asSlice(index*sizeof()), x);
    }
    public static long sizeof() { return $LAYOUT().byteSize(); }
    public static MemorySegment allocate(SegmentAllocator allocator) { return allocator.allocate($LAYOUT()); }
    public static MemorySegment allocateArray(long len, SegmentAllocator allocator) {
        return allocator.allocate(MemoryLayout.sequenceLayout(len, $LAYOUT()));
    }
    public static MemorySegment ofAddress(MemorySegment addr, SegmentScope scope) { return RuntimeHelper.asArray(addr, $LAYOUT(), 1, scope); }
}


