// Generated by jextract

package com.icuxika.jextract.libffmpeg;

import java.lang.invoke.MethodHandle;
import java.lang.invoke.VarHandle;
import java.nio.ByteOrder;
import java.lang.foreign.*;
import static java.lang.foreign.ValueLayout.*;
/**
 * {@snippet :
 * struct AVChannelLayout {
 *     enum AVChannelOrder order;
 *     int nb_channels;
 *     union  u;
 *     void* opaque;
 * };
 * }
 */
public class AVChannelLayout {

    static final StructLayout $struct$LAYOUT = MemoryLayout.structLayout(
        Constants$root.C_LONG$LAYOUT.withName("order"),
        Constants$root.C_LONG$LAYOUT.withName("nb_channels"),
        MemoryLayout.unionLayout(
            Constants$root.C_LONG_LONG$LAYOUT.withName("mask"),
            Constants$root.C_POINTER$LAYOUT.withName("map")
        ).withName("u"),
        Constants$root.C_POINTER$LAYOUT.withName("opaque")
    ).withName("AVChannelLayout");
    public static MemoryLayout $LAYOUT() {
        return AVChannelLayout.$struct$LAYOUT;
    }
    static final VarHandle order$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("order"));
    public static VarHandle order$VH() {
        return AVChannelLayout.order$VH;
    }
    /**
     * Getter for field:
     * {@snippet :
     * enum AVChannelOrder order;
     * }
     */
    public static int order$get(MemorySegment seg) {
        return (int)AVChannelLayout.order$VH.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * enum AVChannelOrder order;
     * }
     */
    public static void order$set(MemorySegment seg, int x) {
        AVChannelLayout.order$VH.set(seg, x);
    }
    public static int order$get(MemorySegment seg, long index) {
        return (int)AVChannelLayout.order$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void order$set(MemorySegment seg, long index, int x) {
        AVChannelLayout.order$VH.set(seg.asSlice(index*sizeof()), x);
    }
    static final VarHandle nb_channels$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("nb_channels"));
    public static VarHandle nb_channels$VH() {
        return AVChannelLayout.nb_channels$VH;
    }
    /**
     * Getter for field:
     * {@snippet :
     * int nb_channels;
     * }
     */
    public static int nb_channels$get(MemorySegment seg) {
        return (int)AVChannelLayout.nb_channels$VH.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * int nb_channels;
     * }
     */
    public static void nb_channels$set(MemorySegment seg, int x) {
        AVChannelLayout.nb_channels$VH.set(seg, x);
    }
    public static int nb_channels$get(MemorySegment seg, long index) {
        return (int)AVChannelLayout.nb_channels$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void nb_channels$set(MemorySegment seg, long index, int x) {
        AVChannelLayout.nb_channels$VH.set(seg.asSlice(index*sizeof()), x);
    }
    /**
     * {@snippet :
     * union {
     *     uint64_t mask;
     *     AVChannelCustom* map;
     * };
     * }
     */
    public static final class u {

        // Suppresses default constructor, ensuring non-instantiability.
        private u() {}
        static final UnionLayout u$union$LAYOUT = MemoryLayout.unionLayout(
            Constants$root.C_LONG_LONG$LAYOUT.withName("mask"),
            Constants$root.C_POINTER$LAYOUT.withName("map")
        );
        public static MemoryLayout $LAYOUT() {
            return u.u$union$LAYOUT;
        }
        static final VarHandle mask$VH = u$union$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("mask"));
        public static VarHandle mask$VH() {
            return u.mask$VH;
        }
        /**
         * Getter for field:
         * {@snippet :
         * uint64_t mask;
         * }
         */
        public static long mask$get(MemorySegment seg) {
            return (long)u.mask$VH.get(seg);
        }
        /**
         * Setter for field:
         * {@snippet :
         * uint64_t mask;
         * }
         */
        public static void mask$set(MemorySegment seg, long x) {
            u.mask$VH.set(seg, x);
        }
        public static long mask$get(MemorySegment seg, long index) {
            return (long)u.mask$VH.get(seg.asSlice(index*sizeof()));
        }
        public static void mask$set(MemorySegment seg, long index, long x) {
            u.mask$VH.set(seg.asSlice(index*sizeof()), x);
        }
        static final VarHandle map$VH = u$union$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("map"));
        public static VarHandle map$VH() {
            return u.map$VH;
        }
        /**
         * Getter for field:
         * {@snippet :
         * AVChannelCustom* map;
         * }
         */
        public static MemorySegment map$get(MemorySegment seg) {
            return (java.lang.foreign.MemorySegment)u.map$VH.get(seg);
        }
        /**
         * Setter for field:
         * {@snippet :
         * AVChannelCustom* map;
         * }
         */
        public static void map$set(MemorySegment seg, MemorySegment x) {
            u.map$VH.set(seg, x);
        }
        public static MemorySegment map$get(MemorySegment seg, long index) {
            return (java.lang.foreign.MemorySegment)u.map$VH.get(seg.asSlice(index*sizeof()));
        }
        public static void map$set(MemorySegment seg, long index, MemorySegment x) {
            u.map$VH.set(seg.asSlice(index*sizeof()), x);
        }
        public static long sizeof() { return $LAYOUT().byteSize(); }
        public static MemorySegment allocate(SegmentAllocator allocator) { return allocator.allocate($LAYOUT()); }
        public static MemorySegment allocateArray(long len, SegmentAllocator allocator) {
            return allocator.allocate(MemoryLayout.sequenceLayout(len, $LAYOUT()));
        }
        public static MemorySegment ofAddress(MemorySegment addr, SegmentScope scope) { return RuntimeHelper.asArray(addr, $LAYOUT(), 1, scope); }
    }

    public static MemorySegment u$slice(MemorySegment seg) {
        return seg.asSlice(8, 8);
    }
    static final VarHandle opaque$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("opaque"));
    public static VarHandle opaque$VH() {
        return AVChannelLayout.opaque$VH;
    }
    /**
     * Getter for field:
     * {@snippet :
     * void* opaque;
     * }
     */
    public static MemorySegment opaque$get(MemorySegment seg) {
        return (java.lang.foreign.MemorySegment)AVChannelLayout.opaque$VH.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * void* opaque;
     * }
     */
    public static void opaque$set(MemorySegment seg, MemorySegment x) {
        AVChannelLayout.opaque$VH.set(seg, x);
    }
    public static MemorySegment opaque$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemorySegment)AVChannelLayout.opaque$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void opaque$set(MemorySegment seg, long index, MemorySegment x) {
        AVChannelLayout.opaque$VH.set(seg.asSlice(index*sizeof()), x);
    }
    public static long sizeof() { return $LAYOUT().byteSize(); }
    public static MemorySegment allocate(SegmentAllocator allocator) { return allocator.allocate($LAYOUT()); }
    public static MemorySegment allocateArray(long len, SegmentAllocator allocator) {
        return allocator.allocate(MemoryLayout.sequenceLayout(len, $LAYOUT()));
    }
    public static MemorySegment ofAddress(MemorySegment addr, SegmentScope scope) { return RuntimeHelper.asArray(addr, $LAYOUT(), 1, scope); }
}


