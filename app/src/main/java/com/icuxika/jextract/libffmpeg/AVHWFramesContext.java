// Generated by jextract

package com.icuxika.jextract.libffmpeg;

import java.lang.invoke.MethodHandle;
import java.lang.invoke.VarHandle;
import java.nio.ByteOrder;
import java.lang.foreign.*;
import static java.lang.foreign.ValueLayout.*;
/**
 * {@snippet :
 * struct AVHWFramesContext {
 *     const AVClass* av_class;
 *     AVHWFramesInternal* internal;
 *     AVBufferRef* device_ref;
 *     AVHWDeviceContext* device_ctx;
 *     void* hwctx;
 *     void (*free)(struct AVHWFramesContext*);
 *     void* user_opaque;
 *     AVBufferPool* pool;
 *     int initial_pool_size;
 *     enum AVPixelFormat format;
 *     enum AVPixelFormat sw_format;
 *     int width;
 *     int height;
 * };
 * }
 */
public class AVHWFramesContext {

    static final StructLayout $struct$LAYOUT = MemoryLayout.structLayout(
        Constants$root.C_POINTER$LAYOUT.withName("av_class"),
        Constants$root.C_POINTER$LAYOUT.withName("internal"),
        Constants$root.C_POINTER$LAYOUT.withName("device_ref"),
        Constants$root.C_POINTER$LAYOUT.withName("device_ctx"),
        Constants$root.C_POINTER$LAYOUT.withName("hwctx"),
        Constants$root.C_POINTER$LAYOUT.withName("free"),
        Constants$root.C_POINTER$LAYOUT.withName("user_opaque"),
        Constants$root.C_POINTER$LAYOUT.withName("pool"),
        Constants$root.C_LONG$LAYOUT.withName("initial_pool_size"),
        Constants$root.C_LONG$LAYOUT.withName("format"),
        Constants$root.C_LONG$LAYOUT.withName("sw_format"),
        Constants$root.C_LONG$LAYOUT.withName("width"),
        Constants$root.C_LONG$LAYOUT.withName("height"),
        MemoryLayout.paddingLayout(32)
    ).withName("AVHWFramesContext");
    public static MemoryLayout $LAYOUT() {
        return AVHWFramesContext.$struct$LAYOUT;
    }
    static final VarHandle av_class$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("av_class"));
    public static VarHandle av_class$VH() {
        return AVHWFramesContext.av_class$VH;
    }
    /**
     * Getter for field:
     * {@snippet :
     * const AVClass* av_class;
     * }
     */
    public static MemorySegment av_class$get(MemorySegment seg) {
        return (java.lang.foreign.MemorySegment)AVHWFramesContext.av_class$VH.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * const AVClass* av_class;
     * }
     */
    public static void av_class$set(MemorySegment seg, MemorySegment x) {
        AVHWFramesContext.av_class$VH.set(seg, x);
    }
    public static MemorySegment av_class$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemorySegment)AVHWFramesContext.av_class$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void av_class$set(MemorySegment seg, long index, MemorySegment x) {
        AVHWFramesContext.av_class$VH.set(seg.asSlice(index*sizeof()), x);
    }
    static final VarHandle internal$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("internal"));
    public static VarHandle internal$VH() {
        return AVHWFramesContext.internal$VH;
    }
    /**
     * Getter for field:
     * {@snippet :
     * AVHWFramesInternal* internal;
     * }
     */
    public static MemorySegment internal$get(MemorySegment seg) {
        return (java.lang.foreign.MemorySegment)AVHWFramesContext.internal$VH.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * AVHWFramesInternal* internal;
     * }
     */
    public static void internal$set(MemorySegment seg, MemorySegment x) {
        AVHWFramesContext.internal$VH.set(seg, x);
    }
    public static MemorySegment internal$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemorySegment)AVHWFramesContext.internal$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void internal$set(MemorySegment seg, long index, MemorySegment x) {
        AVHWFramesContext.internal$VH.set(seg.asSlice(index*sizeof()), x);
    }
    static final VarHandle device_ref$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("device_ref"));
    public static VarHandle device_ref$VH() {
        return AVHWFramesContext.device_ref$VH;
    }
    /**
     * Getter for field:
     * {@snippet :
     * AVBufferRef* device_ref;
     * }
     */
    public static MemorySegment device_ref$get(MemorySegment seg) {
        return (java.lang.foreign.MemorySegment)AVHWFramesContext.device_ref$VH.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * AVBufferRef* device_ref;
     * }
     */
    public static void device_ref$set(MemorySegment seg, MemorySegment x) {
        AVHWFramesContext.device_ref$VH.set(seg, x);
    }
    public static MemorySegment device_ref$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemorySegment)AVHWFramesContext.device_ref$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void device_ref$set(MemorySegment seg, long index, MemorySegment x) {
        AVHWFramesContext.device_ref$VH.set(seg.asSlice(index*sizeof()), x);
    }
    static final VarHandle device_ctx$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("device_ctx"));
    public static VarHandle device_ctx$VH() {
        return AVHWFramesContext.device_ctx$VH;
    }
    /**
     * Getter for field:
     * {@snippet :
     * AVHWDeviceContext* device_ctx;
     * }
     */
    public static MemorySegment device_ctx$get(MemorySegment seg) {
        return (java.lang.foreign.MemorySegment)AVHWFramesContext.device_ctx$VH.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * AVHWDeviceContext* device_ctx;
     * }
     */
    public static void device_ctx$set(MemorySegment seg, MemorySegment x) {
        AVHWFramesContext.device_ctx$VH.set(seg, x);
    }
    public static MemorySegment device_ctx$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemorySegment)AVHWFramesContext.device_ctx$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void device_ctx$set(MemorySegment seg, long index, MemorySegment x) {
        AVHWFramesContext.device_ctx$VH.set(seg.asSlice(index*sizeof()), x);
    }
    static final VarHandle hwctx$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("hwctx"));
    public static VarHandle hwctx$VH() {
        return AVHWFramesContext.hwctx$VH;
    }
    /**
     * Getter for field:
     * {@snippet :
     * void* hwctx;
     * }
     */
    public static MemorySegment hwctx$get(MemorySegment seg) {
        return (java.lang.foreign.MemorySegment)AVHWFramesContext.hwctx$VH.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * void* hwctx;
     * }
     */
    public static void hwctx$set(MemorySegment seg, MemorySegment x) {
        AVHWFramesContext.hwctx$VH.set(seg, x);
    }
    public static MemorySegment hwctx$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemorySegment)AVHWFramesContext.hwctx$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void hwctx$set(MemorySegment seg, long index, MemorySegment x) {
        AVHWFramesContext.hwctx$VH.set(seg.asSlice(index*sizeof()), x);
    }
    static final FunctionDescriptor free$FUNC = FunctionDescriptor.ofVoid(
        Constants$root.C_POINTER$LAYOUT
    );
    static final FunctionDescriptor free_UP$FUNC = FunctionDescriptor.ofVoid(
        Constants$root.C_POINTER$LAYOUT
    );
    static final MethodHandle free_UP$MH = RuntimeHelper.upcallHandle(free.class, "apply", AVHWFramesContext.free_UP$FUNC);
    static final FunctionDescriptor free_DOWN$FUNC = FunctionDescriptor.ofVoid(
        Constants$root.C_POINTER$LAYOUT
    );
    static final MethodHandle free_DOWN$MH = RuntimeHelper.downcallHandle(
        AVHWFramesContext.free_DOWN$FUNC
    );
    /**
     * {@snippet :
 * void (*free)(struct AVHWFramesContext*);
     * }
     */
    public interface free {

        void apply(java.lang.foreign.MemorySegment _x0);
        static MemorySegment allocate(free fi, SegmentScope scope) {
            return RuntimeHelper.upcallStub(AVHWFramesContext.free_UP$MH, fi, AVHWFramesContext.free$FUNC, scope);
        }
        static free ofAddress(MemorySegment addr, SegmentScope scope) {
            MemorySegment symbol = MemorySegment.ofAddress(addr.address(), 0, scope);
            return (java.lang.foreign.MemorySegment __x0) -> {
                try {
                    AVHWFramesContext.free_DOWN$MH.invokeExact(symbol, __x0);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    static final VarHandle free$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("free"));
    public static VarHandle free$VH() {
        return AVHWFramesContext.free$VH;
    }
    /**
     * Getter for field:
     * {@snippet :
     * void (*free)(struct AVHWFramesContext*);
     * }
     */
    public static MemorySegment free$get(MemorySegment seg) {
        return (java.lang.foreign.MemorySegment)AVHWFramesContext.free$VH.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * void (*free)(struct AVHWFramesContext*);
     * }
     */
    public static void free$set(MemorySegment seg, MemorySegment x) {
        AVHWFramesContext.free$VH.set(seg, x);
    }
    public static MemorySegment free$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemorySegment)AVHWFramesContext.free$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void free$set(MemorySegment seg, long index, MemorySegment x) {
        AVHWFramesContext.free$VH.set(seg.asSlice(index*sizeof()), x);
    }
    public static free free(MemorySegment segment, SegmentScope scope) {
        return free.ofAddress(free$get(segment), scope);
    }
    static final VarHandle user_opaque$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("user_opaque"));
    public static VarHandle user_opaque$VH() {
        return AVHWFramesContext.user_opaque$VH;
    }
    /**
     * Getter for field:
     * {@snippet :
     * void* user_opaque;
     * }
     */
    public static MemorySegment user_opaque$get(MemorySegment seg) {
        return (java.lang.foreign.MemorySegment)AVHWFramesContext.user_opaque$VH.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * void* user_opaque;
     * }
     */
    public static void user_opaque$set(MemorySegment seg, MemorySegment x) {
        AVHWFramesContext.user_opaque$VH.set(seg, x);
    }
    public static MemorySegment user_opaque$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemorySegment)AVHWFramesContext.user_opaque$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void user_opaque$set(MemorySegment seg, long index, MemorySegment x) {
        AVHWFramesContext.user_opaque$VH.set(seg.asSlice(index*sizeof()), x);
    }
    static final VarHandle pool$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("pool"));
    public static VarHandle pool$VH() {
        return AVHWFramesContext.pool$VH;
    }
    /**
     * Getter for field:
     * {@snippet :
     * AVBufferPool* pool;
     * }
     */
    public static MemorySegment pool$get(MemorySegment seg) {
        return (java.lang.foreign.MemorySegment)AVHWFramesContext.pool$VH.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * AVBufferPool* pool;
     * }
     */
    public static void pool$set(MemorySegment seg, MemorySegment x) {
        AVHWFramesContext.pool$VH.set(seg, x);
    }
    public static MemorySegment pool$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemorySegment)AVHWFramesContext.pool$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void pool$set(MemorySegment seg, long index, MemorySegment x) {
        AVHWFramesContext.pool$VH.set(seg.asSlice(index*sizeof()), x);
    }
    static final VarHandle initial_pool_size$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("initial_pool_size"));
    public static VarHandle initial_pool_size$VH() {
        return AVHWFramesContext.initial_pool_size$VH;
    }
    /**
     * Getter for field:
     * {@snippet :
     * int initial_pool_size;
     * }
     */
    public static int initial_pool_size$get(MemorySegment seg) {
        return (int)AVHWFramesContext.initial_pool_size$VH.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * int initial_pool_size;
     * }
     */
    public static void initial_pool_size$set(MemorySegment seg, int x) {
        AVHWFramesContext.initial_pool_size$VH.set(seg, x);
    }
    public static int initial_pool_size$get(MemorySegment seg, long index) {
        return (int)AVHWFramesContext.initial_pool_size$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void initial_pool_size$set(MemorySegment seg, long index, int x) {
        AVHWFramesContext.initial_pool_size$VH.set(seg.asSlice(index*sizeof()), x);
    }
    static final VarHandle format$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("format"));
    public static VarHandle format$VH() {
        return AVHWFramesContext.format$VH;
    }
    /**
     * Getter for field:
     * {@snippet :
     * enum AVPixelFormat format;
     * }
     */
    public static int format$get(MemorySegment seg) {
        return (int)AVHWFramesContext.format$VH.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * enum AVPixelFormat format;
     * }
     */
    public static void format$set(MemorySegment seg, int x) {
        AVHWFramesContext.format$VH.set(seg, x);
    }
    public static int format$get(MemorySegment seg, long index) {
        return (int)AVHWFramesContext.format$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void format$set(MemorySegment seg, long index, int x) {
        AVHWFramesContext.format$VH.set(seg.asSlice(index*sizeof()), x);
    }
    static final VarHandle sw_format$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("sw_format"));
    public static VarHandle sw_format$VH() {
        return AVHWFramesContext.sw_format$VH;
    }
    /**
     * Getter for field:
     * {@snippet :
     * enum AVPixelFormat sw_format;
     * }
     */
    public static int sw_format$get(MemorySegment seg) {
        return (int)AVHWFramesContext.sw_format$VH.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * enum AVPixelFormat sw_format;
     * }
     */
    public static void sw_format$set(MemorySegment seg, int x) {
        AVHWFramesContext.sw_format$VH.set(seg, x);
    }
    public static int sw_format$get(MemorySegment seg, long index) {
        return (int)AVHWFramesContext.sw_format$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void sw_format$set(MemorySegment seg, long index, int x) {
        AVHWFramesContext.sw_format$VH.set(seg.asSlice(index*sizeof()), x);
    }
    static final VarHandle width$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("width"));
    public static VarHandle width$VH() {
        return AVHWFramesContext.width$VH;
    }
    /**
     * Getter for field:
     * {@snippet :
     * int width;
     * }
     */
    public static int width$get(MemorySegment seg) {
        return (int)AVHWFramesContext.width$VH.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * int width;
     * }
     */
    public static void width$set(MemorySegment seg, int x) {
        AVHWFramesContext.width$VH.set(seg, x);
    }
    public static int width$get(MemorySegment seg, long index) {
        return (int)AVHWFramesContext.width$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void width$set(MemorySegment seg, long index, int x) {
        AVHWFramesContext.width$VH.set(seg.asSlice(index*sizeof()), x);
    }
    static final VarHandle height$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("height"));
    public static VarHandle height$VH() {
        return AVHWFramesContext.height$VH;
    }
    /**
     * Getter for field:
     * {@snippet :
     * int height;
     * }
     */
    public static int height$get(MemorySegment seg) {
        return (int)AVHWFramesContext.height$VH.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * int height;
     * }
     */
    public static void height$set(MemorySegment seg, int x) {
        AVHWFramesContext.height$VH.set(seg, x);
    }
    public static int height$get(MemorySegment seg, long index) {
        return (int)AVHWFramesContext.height$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void height$set(MemorySegment seg, long index, int x) {
        AVHWFramesContext.height$VH.set(seg.asSlice(index*sizeof()), x);
    }
    public static long sizeof() { return $LAYOUT().byteSize(); }
    public static MemorySegment allocate(SegmentAllocator allocator) { return allocator.allocate($LAYOUT()); }
    public static MemorySegment allocateArray(long len, SegmentAllocator allocator) {
        return allocator.allocate(MemoryLayout.sequenceLayout(len, $LAYOUT()));
    }
    public static MemorySegment ofAddress(MemorySegment addr, SegmentScope scope) { return RuntimeHelper.asArray(addr, $LAYOUT(), 1, scope); }
}


