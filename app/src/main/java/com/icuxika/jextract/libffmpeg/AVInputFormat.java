// Generated by jextract

package com.icuxika.jextract.libffmpeg;

import java.lang.invoke.MethodHandle;
import java.lang.invoke.VarHandle;
import java.nio.ByteOrder;
import java.lang.foreign.*;
import static java.lang.foreign.ValueLayout.*;
/**
 * {@snippet :
 * struct AVInputFormat {
 *     char* name;
 *     char* long_name;
 *     int flags;
 *     char* extensions;
 *     struct AVCodecTag** codec_tag;
 *     const AVClass* priv_class;
 *     char* mime_type;
 *     int raw_codec_id;
 *     int priv_data_size;
 *     int flags_internal;
 *     int (*read_probe)(const AVProbeData*);
 *     int (*read_header)(struct AVFormatContext*);
 *     int (*read_packet)(struct AVFormatContext*,AVPacket*);
 *     int (*read_close)(struct AVFormatContext*);
 *     int (*read_seek)(struct AVFormatContext*,int,int64_t,int);
 *     int64_t (*read_timestamp)(struct AVFormatContext*,int,int64_t*,int64_t);
 *     int (*read_play)(struct AVFormatContext*);
 *     int (*read_pause)(struct AVFormatContext*);
 *     int (*read_seek2)(struct AVFormatContext*,int,int64_t,int64_t,int64_t,int);
 *     int (*get_device_list)(struct AVFormatContext*,struct AVDeviceInfoList*);
 * };
 * }
 */
public class AVInputFormat {

    static final StructLayout $struct$LAYOUT = MemoryLayout.structLayout(
        Constants$root.C_POINTER$LAYOUT.withName("name"),
        Constants$root.C_POINTER$LAYOUT.withName("long_name"),
        Constants$root.C_LONG$LAYOUT.withName("flags"),
        MemoryLayout.paddingLayout(32),
        Constants$root.C_POINTER$LAYOUT.withName("extensions"),
        Constants$root.C_POINTER$LAYOUT.withName("codec_tag"),
        Constants$root.C_POINTER$LAYOUT.withName("priv_class"),
        Constants$root.C_POINTER$LAYOUT.withName("mime_type"),
        Constants$root.C_LONG$LAYOUT.withName("raw_codec_id"),
        Constants$root.C_LONG$LAYOUT.withName("priv_data_size"),
        Constants$root.C_LONG$LAYOUT.withName("flags_internal"),
        MemoryLayout.paddingLayout(32),
        Constants$root.C_POINTER$LAYOUT.withName("read_probe"),
        Constants$root.C_POINTER$LAYOUT.withName("read_header"),
        Constants$root.C_POINTER$LAYOUT.withName("read_packet"),
        Constants$root.C_POINTER$LAYOUT.withName("read_close"),
        Constants$root.C_POINTER$LAYOUT.withName("read_seek"),
        Constants$root.C_POINTER$LAYOUT.withName("read_timestamp"),
        Constants$root.C_POINTER$LAYOUT.withName("read_play"),
        Constants$root.C_POINTER$LAYOUT.withName("read_pause"),
        Constants$root.C_POINTER$LAYOUT.withName("read_seek2"),
        Constants$root.C_POINTER$LAYOUT.withName("get_device_list")
    ).withName("AVInputFormat");
    public static MemoryLayout $LAYOUT() {
        return AVInputFormat.$struct$LAYOUT;
    }
    static final VarHandle name$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("name"));
    public static VarHandle name$VH() {
        return AVInputFormat.name$VH;
    }
    /**
     * Getter for field:
     * {@snippet :
     * char* name;
     * }
     */
    public static MemorySegment name$get(MemorySegment seg) {
        return (java.lang.foreign.MemorySegment)AVInputFormat.name$VH.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * char* name;
     * }
     */
    public static void name$set(MemorySegment seg, MemorySegment x) {
        AVInputFormat.name$VH.set(seg, x);
    }
    public static MemorySegment name$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemorySegment)AVInputFormat.name$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void name$set(MemorySegment seg, long index, MemorySegment x) {
        AVInputFormat.name$VH.set(seg.asSlice(index*sizeof()), x);
    }
    static final VarHandle long_name$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("long_name"));
    public static VarHandle long_name$VH() {
        return AVInputFormat.long_name$VH;
    }
    /**
     * Getter for field:
     * {@snippet :
     * char* long_name;
     * }
     */
    public static MemorySegment long_name$get(MemorySegment seg) {
        return (java.lang.foreign.MemorySegment)AVInputFormat.long_name$VH.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * char* long_name;
     * }
     */
    public static void long_name$set(MemorySegment seg, MemorySegment x) {
        AVInputFormat.long_name$VH.set(seg, x);
    }
    public static MemorySegment long_name$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemorySegment)AVInputFormat.long_name$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void long_name$set(MemorySegment seg, long index, MemorySegment x) {
        AVInputFormat.long_name$VH.set(seg.asSlice(index*sizeof()), x);
    }
    static final VarHandle flags$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("flags"));
    public static VarHandle flags$VH() {
        return AVInputFormat.flags$VH;
    }
    /**
     * Getter for field:
     * {@snippet :
     * int flags;
     * }
     */
    public static int flags$get(MemorySegment seg) {
        return (int)AVInputFormat.flags$VH.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * int flags;
     * }
     */
    public static void flags$set(MemorySegment seg, int x) {
        AVInputFormat.flags$VH.set(seg, x);
    }
    public static int flags$get(MemorySegment seg, long index) {
        return (int)AVInputFormat.flags$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void flags$set(MemorySegment seg, long index, int x) {
        AVInputFormat.flags$VH.set(seg.asSlice(index*sizeof()), x);
    }
    static final VarHandle extensions$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("extensions"));
    public static VarHandle extensions$VH() {
        return AVInputFormat.extensions$VH;
    }
    /**
     * Getter for field:
     * {@snippet :
     * char* extensions;
     * }
     */
    public static MemorySegment extensions$get(MemorySegment seg) {
        return (java.lang.foreign.MemorySegment)AVInputFormat.extensions$VH.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * char* extensions;
     * }
     */
    public static void extensions$set(MemorySegment seg, MemorySegment x) {
        AVInputFormat.extensions$VH.set(seg, x);
    }
    public static MemorySegment extensions$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemorySegment)AVInputFormat.extensions$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void extensions$set(MemorySegment seg, long index, MemorySegment x) {
        AVInputFormat.extensions$VH.set(seg.asSlice(index*sizeof()), x);
    }
    static final VarHandle codec_tag$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("codec_tag"));
    public static VarHandle codec_tag$VH() {
        return AVInputFormat.codec_tag$VH;
    }
    /**
     * Getter for field:
     * {@snippet :
     * struct AVCodecTag** codec_tag;
     * }
     */
    public static MemorySegment codec_tag$get(MemorySegment seg) {
        return (java.lang.foreign.MemorySegment)AVInputFormat.codec_tag$VH.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * struct AVCodecTag** codec_tag;
     * }
     */
    public static void codec_tag$set(MemorySegment seg, MemorySegment x) {
        AVInputFormat.codec_tag$VH.set(seg, x);
    }
    public static MemorySegment codec_tag$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemorySegment)AVInputFormat.codec_tag$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void codec_tag$set(MemorySegment seg, long index, MemorySegment x) {
        AVInputFormat.codec_tag$VH.set(seg.asSlice(index*sizeof()), x);
    }
    static final VarHandle priv_class$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("priv_class"));
    public static VarHandle priv_class$VH() {
        return AVInputFormat.priv_class$VH;
    }
    /**
     * Getter for field:
     * {@snippet :
     * const AVClass* priv_class;
     * }
     */
    public static MemorySegment priv_class$get(MemorySegment seg) {
        return (java.lang.foreign.MemorySegment)AVInputFormat.priv_class$VH.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * const AVClass* priv_class;
     * }
     */
    public static void priv_class$set(MemorySegment seg, MemorySegment x) {
        AVInputFormat.priv_class$VH.set(seg, x);
    }
    public static MemorySegment priv_class$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemorySegment)AVInputFormat.priv_class$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void priv_class$set(MemorySegment seg, long index, MemorySegment x) {
        AVInputFormat.priv_class$VH.set(seg.asSlice(index*sizeof()), x);
    }
    static final VarHandle mime_type$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("mime_type"));
    public static VarHandle mime_type$VH() {
        return AVInputFormat.mime_type$VH;
    }
    /**
     * Getter for field:
     * {@snippet :
     * char* mime_type;
     * }
     */
    public static MemorySegment mime_type$get(MemorySegment seg) {
        return (java.lang.foreign.MemorySegment)AVInputFormat.mime_type$VH.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * char* mime_type;
     * }
     */
    public static void mime_type$set(MemorySegment seg, MemorySegment x) {
        AVInputFormat.mime_type$VH.set(seg, x);
    }
    public static MemorySegment mime_type$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemorySegment)AVInputFormat.mime_type$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void mime_type$set(MemorySegment seg, long index, MemorySegment x) {
        AVInputFormat.mime_type$VH.set(seg.asSlice(index*sizeof()), x);
    }
    static final VarHandle raw_codec_id$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("raw_codec_id"));
    public static VarHandle raw_codec_id$VH() {
        return AVInputFormat.raw_codec_id$VH;
    }
    /**
     * Getter for field:
     * {@snippet :
     * int raw_codec_id;
     * }
     */
    public static int raw_codec_id$get(MemorySegment seg) {
        return (int)AVInputFormat.raw_codec_id$VH.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * int raw_codec_id;
     * }
     */
    public static void raw_codec_id$set(MemorySegment seg, int x) {
        AVInputFormat.raw_codec_id$VH.set(seg, x);
    }
    public static int raw_codec_id$get(MemorySegment seg, long index) {
        return (int)AVInputFormat.raw_codec_id$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void raw_codec_id$set(MemorySegment seg, long index, int x) {
        AVInputFormat.raw_codec_id$VH.set(seg.asSlice(index*sizeof()), x);
    }
    static final VarHandle priv_data_size$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("priv_data_size"));
    public static VarHandle priv_data_size$VH() {
        return AVInputFormat.priv_data_size$VH;
    }
    /**
     * Getter for field:
     * {@snippet :
     * int priv_data_size;
     * }
     */
    public static int priv_data_size$get(MemorySegment seg) {
        return (int)AVInputFormat.priv_data_size$VH.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * int priv_data_size;
     * }
     */
    public static void priv_data_size$set(MemorySegment seg, int x) {
        AVInputFormat.priv_data_size$VH.set(seg, x);
    }
    public static int priv_data_size$get(MemorySegment seg, long index) {
        return (int)AVInputFormat.priv_data_size$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void priv_data_size$set(MemorySegment seg, long index, int x) {
        AVInputFormat.priv_data_size$VH.set(seg.asSlice(index*sizeof()), x);
    }
    static final VarHandle flags_internal$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("flags_internal"));
    public static VarHandle flags_internal$VH() {
        return AVInputFormat.flags_internal$VH;
    }
    /**
     * Getter for field:
     * {@snippet :
     * int flags_internal;
     * }
     */
    public static int flags_internal$get(MemorySegment seg) {
        return (int)AVInputFormat.flags_internal$VH.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * int flags_internal;
     * }
     */
    public static void flags_internal$set(MemorySegment seg, int x) {
        AVInputFormat.flags_internal$VH.set(seg, x);
    }
    public static int flags_internal$get(MemorySegment seg, long index) {
        return (int)AVInputFormat.flags_internal$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void flags_internal$set(MemorySegment seg, long index, int x) {
        AVInputFormat.flags_internal$VH.set(seg.asSlice(index*sizeof()), x);
    }
    static final FunctionDescriptor read_probe$FUNC = FunctionDescriptor.of(Constants$root.C_LONG$LAYOUT,
        Constants$root.C_POINTER$LAYOUT
    );
    static final FunctionDescriptor read_probe_UP$FUNC = FunctionDescriptor.of(Constants$root.C_LONG$LAYOUT,
        Constants$root.C_POINTER$LAYOUT
    );
    static final MethodHandle read_probe_UP$MH = RuntimeHelper.upcallHandle(read_probe.class, "apply", AVInputFormat.read_probe_UP$FUNC);
    static final FunctionDescriptor read_probe_DOWN$FUNC = FunctionDescriptor.of(Constants$root.C_LONG$LAYOUT,
        Constants$root.C_POINTER$LAYOUT
    );
    static final MethodHandle read_probe_DOWN$MH = RuntimeHelper.downcallHandle(
        AVInputFormat.read_probe_DOWN$FUNC
    );
    /**
     * {@snippet :
 * int (*read_probe)(const AVProbeData*);
     * }
     */
    public interface read_probe {

        int apply(java.lang.foreign.MemorySegment _x0);
        static MemorySegment allocate(read_probe fi, SegmentScope scope) {
            return RuntimeHelper.upcallStub(AVInputFormat.read_probe_UP$MH, fi, AVInputFormat.read_probe$FUNC, scope);
        }
        static read_probe ofAddress(MemorySegment addr, SegmentScope scope) {
            MemorySegment symbol = MemorySegment.ofAddress(addr.address(), 0, scope);
            return (java.lang.foreign.MemorySegment __x0) -> {
                try {
                    return (int)AVInputFormat.read_probe_DOWN$MH.invokeExact(symbol, __x0);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    static final VarHandle read_probe$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("read_probe"));
    public static VarHandle read_probe$VH() {
        return AVInputFormat.read_probe$VH;
    }
    /**
     * Getter for field:
     * {@snippet :
     * int (*read_probe)(const AVProbeData*);
     * }
     */
    public static MemorySegment read_probe$get(MemorySegment seg) {
        return (java.lang.foreign.MemorySegment)AVInputFormat.read_probe$VH.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * int (*read_probe)(const AVProbeData*);
     * }
     */
    public static void read_probe$set(MemorySegment seg, MemorySegment x) {
        AVInputFormat.read_probe$VH.set(seg, x);
    }
    public static MemorySegment read_probe$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemorySegment)AVInputFormat.read_probe$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void read_probe$set(MemorySegment seg, long index, MemorySegment x) {
        AVInputFormat.read_probe$VH.set(seg.asSlice(index*sizeof()), x);
    }
    public static read_probe read_probe(MemorySegment segment, SegmentScope scope) {
        return read_probe.ofAddress(read_probe$get(segment), scope);
    }
    static final FunctionDescriptor read_header$FUNC = FunctionDescriptor.of(Constants$root.C_LONG$LAYOUT,
        Constants$root.C_POINTER$LAYOUT
    );
    static final FunctionDescriptor read_header_UP$FUNC = FunctionDescriptor.of(Constants$root.C_LONG$LAYOUT,
        Constants$root.C_POINTER$LAYOUT
    );
    static final MethodHandle read_header_UP$MH = RuntimeHelper.upcallHandle(read_header.class, "apply", AVInputFormat.read_header_UP$FUNC);
    static final FunctionDescriptor read_header_DOWN$FUNC = FunctionDescriptor.of(Constants$root.C_LONG$LAYOUT,
        Constants$root.C_POINTER$LAYOUT
    );
    static final MethodHandle read_header_DOWN$MH = RuntimeHelper.downcallHandle(
        AVInputFormat.read_header_DOWN$FUNC
    );
    /**
     * {@snippet :
 * int (*read_header)(struct AVFormatContext*);
     * }
     */
    public interface read_header {

        int apply(java.lang.foreign.MemorySegment _x0);
        static MemorySegment allocate(read_header fi, SegmentScope scope) {
            return RuntimeHelper.upcallStub(AVInputFormat.read_header_UP$MH, fi, AVInputFormat.read_header$FUNC, scope);
        }
        static read_header ofAddress(MemorySegment addr, SegmentScope scope) {
            MemorySegment symbol = MemorySegment.ofAddress(addr.address(), 0, scope);
            return (java.lang.foreign.MemorySegment __x0) -> {
                try {
                    return (int)AVInputFormat.read_header_DOWN$MH.invokeExact(symbol, __x0);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    static final VarHandle read_header$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("read_header"));
    public static VarHandle read_header$VH() {
        return AVInputFormat.read_header$VH;
    }
    /**
     * Getter for field:
     * {@snippet :
     * int (*read_header)(struct AVFormatContext*);
     * }
     */
    public static MemorySegment read_header$get(MemorySegment seg) {
        return (java.lang.foreign.MemorySegment)AVInputFormat.read_header$VH.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * int (*read_header)(struct AVFormatContext*);
     * }
     */
    public static void read_header$set(MemorySegment seg, MemorySegment x) {
        AVInputFormat.read_header$VH.set(seg, x);
    }
    public static MemorySegment read_header$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemorySegment)AVInputFormat.read_header$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void read_header$set(MemorySegment seg, long index, MemorySegment x) {
        AVInputFormat.read_header$VH.set(seg.asSlice(index*sizeof()), x);
    }
    public static read_header read_header(MemorySegment segment, SegmentScope scope) {
        return read_header.ofAddress(read_header$get(segment), scope);
    }
    static final FunctionDescriptor read_packet$FUNC = FunctionDescriptor.of(Constants$root.C_LONG$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_POINTER$LAYOUT
    );
    static final FunctionDescriptor read_packet_UP$FUNC = FunctionDescriptor.of(Constants$root.C_LONG$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_POINTER$LAYOUT
    );
    static final MethodHandle read_packet_UP$MH = RuntimeHelper.upcallHandle(read_packet.class, "apply", AVInputFormat.read_packet_UP$FUNC);
    static final FunctionDescriptor read_packet_DOWN$FUNC = FunctionDescriptor.of(Constants$root.C_LONG$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_POINTER$LAYOUT
    );
    static final MethodHandle read_packet_DOWN$MH = RuntimeHelper.downcallHandle(
        AVInputFormat.read_packet_DOWN$FUNC
    );
    /**
     * {@snippet :
 * int (*read_packet)(struct AVFormatContext*,AVPacket*);
     * }
     */
    public interface read_packet {

        int apply(java.lang.foreign.MemorySegment _x0, java.lang.foreign.MemorySegment _x1);
        static MemorySegment allocate(read_packet fi, SegmentScope scope) {
            return RuntimeHelper.upcallStub(AVInputFormat.read_packet_UP$MH, fi, AVInputFormat.read_packet$FUNC, scope);
        }
        static read_packet ofAddress(MemorySegment addr, SegmentScope scope) {
            MemorySegment symbol = MemorySegment.ofAddress(addr.address(), 0, scope);
            return (java.lang.foreign.MemorySegment __x0, java.lang.foreign.MemorySegment __x1) -> {
                try {
                    return (int)AVInputFormat.read_packet_DOWN$MH.invokeExact(symbol, __x0, __x1);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    static final VarHandle read_packet$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("read_packet"));
    public static VarHandle read_packet$VH() {
        return AVInputFormat.read_packet$VH;
    }
    /**
     * Getter for field:
     * {@snippet :
     * int (*read_packet)(struct AVFormatContext*,AVPacket*);
     * }
     */
    public static MemorySegment read_packet$get(MemorySegment seg) {
        return (java.lang.foreign.MemorySegment)AVInputFormat.read_packet$VH.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * int (*read_packet)(struct AVFormatContext*,AVPacket*);
     * }
     */
    public static void read_packet$set(MemorySegment seg, MemorySegment x) {
        AVInputFormat.read_packet$VH.set(seg, x);
    }
    public static MemorySegment read_packet$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemorySegment)AVInputFormat.read_packet$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void read_packet$set(MemorySegment seg, long index, MemorySegment x) {
        AVInputFormat.read_packet$VH.set(seg.asSlice(index*sizeof()), x);
    }
    public static read_packet read_packet(MemorySegment segment, SegmentScope scope) {
        return read_packet.ofAddress(read_packet$get(segment), scope);
    }
    static final FunctionDescriptor read_close$FUNC = FunctionDescriptor.of(Constants$root.C_LONG$LAYOUT,
        Constants$root.C_POINTER$LAYOUT
    );
    static final FunctionDescriptor read_close_UP$FUNC = FunctionDescriptor.of(Constants$root.C_LONG$LAYOUT,
        Constants$root.C_POINTER$LAYOUT
    );
    static final MethodHandle read_close_UP$MH = RuntimeHelper.upcallHandle(read_close.class, "apply", AVInputFormat.read_close_UP$FUNC);
    static final FunctionDescriptor read_close_DOWN$FUNC = FunctionDescriptor.of(Constants$root.C_LONG$LAYOUT,
        Constants$root.C_POINTER$LAYOUT
    );
    static final MethodHandle read_close_DOWN$MH = RuntimeHelper.downcallHandle(
        AVInputFormat.read_close_DOWN$FUNC
    );
    /**
     * {@snippet :
 * int (*read_close)(struct AVFormatContext*);
     * }
     */
    public interface read_close {

        int apply(java.lang.foreign.MemorySegment _x0);
        static MemorySegment allocate(read_close fi, SegmentScope scope) {
            return RuntimeHelper.upcallStub(AVInputFormat.read_close_UP$MH, fi, AVInputFormat.read_close$FUNC, scope);
        }
        static read_close ofAddress(MemorySegment addr, SegmentScope scope) {
            MemorySegment symbol = MemorySegment.ofAddress(addr.address(), 0, scope);
            return (java.lang.foreign.MemorySegment __x0) -> {
                try {
                    return (int)AVInputFormat.read_close_DOWN$MH.invokeExact(symbol, __x0);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    static final VarHandle read_close$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("read_close"));
    public static VarHandle read_close$VH() {
        return AVInputFormat.read_close$VH;
    }
    /**
     * Getter for field:
     * {@snippet :
     * int (*read_close)(struct AVFormatContext*);
     * }
     */
    public static MemorySegment read_close$get(MemorySegment seg) {
        return (java.lang.foreign.MemorySegment)AVInputFormat.read_close$VH.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * int (*read_close)(struct AVFormatContext*);
     * }
     */
    public static void read_close$set(MemorySegment seg, MemorySegment x) {
        AVInputFormat.read_close$VH.set(seg, x);
    }
    public static MemorySegment read_close$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemorySegment)AVInputFormat.read_close$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void read_close$set(MemorySegment seg, long index, MemorySegment x) {
        AVInputFormat.read_close$VH.set(seg.asSlice(index*sizeof()), x);
    }
    public static read_close read_close(MemorySegment segment, SegmentScope scope) {
        return read_close.ofAddress(read_close$get(segment), scope);
    }
    static final FunctionDescriptor read_seek$FUNC = FunctionDescriptor.of(Constants$root.C_LONG$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_LONG$LAYOUT,
        Constants$root.C_LONG_LONG$LAYOUT,
        Constants$root.C_LONG$LAYOUT
    );
    static final FunctionDescriptor read_seek_UP$FUNC = FunctionDescriptor.of(Constants$root.C_LONG$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_LONG$LAYOUT,
        Constants$root.C_LONG_LONG$LAYOUT,
        Constants$root.C_LONG$LAYOUT
    );
    static final MethodHandle read_seek_UP$MH = RuntimeHelper.upcallHandle(read_seek.class, "apply", AVInputFormat.read_seek_UP$FUNC);
    static final FunctionDescriptor read_seek_DOWN$FUNC = FunctionDescriptor.of(Constants$root.C_LONG$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_LONG$LAYOUT,
        Constants$root.C_LONG_LONG$LAYOUT,
        Constants$root.C_LONG$LAYOUT
    );
    static final MethodHandle read_seek_DOWN$MH = RuntimeHelper.downcallHandle(
        AVInputFormat.read_seek_DOWN$FUNC
    );
    /**
     * {@snippet :
 * int (*read_seek)(struct AVFormatContext*,int,int64_t,int);
     * }
     */
    public interface read_seek {

        int apply(java.lang.foreign.MemorySegment _x0, int _x1, long _x2, int _x3);
        static MemorySegment allocate(read_seek fi, SegmentScope scope) {
            return RuntimeHelper.upcallStub(AVInputFormat.read_seek_UP$MH, fi, AVInputFormat.read_seek$FUNC, scope);
        }
        static read_seek ofAddress(MemorySegment addr, SegmentScope scope) {
            MemorySegment symbol = MemorySegment.ofAddress(addr.address(), 0, scope);
            return (java.lang.foreign.MemorySegment __x0, int __x1, long __x2, int __x3) -> {
                try {
                    return (int)AVInputFormat.read_seek_DOWN$MH.invokeExact(symbol, __x0, __x1, __x2, __x3);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    static final VarHandle read_seek$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("read_seek"));
    public static VarHandle read_seek$VH() {
        return AVInputFormat.read_seek$VH;
    }
    /**
     * Getter for field:
     * {@snippet :
     * int (*read_seek)(struct AVFormatContext*,int,int64_t,int);
     * }
     */
    public static MemorySegment read_seek$get(MemorySegment seg) {
        return (java.lang.foreign.MemorySegment)AVInputFormat.read_seek$VH.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * int (*read_seek)(struct AVFormatContext*,int,int64_t,int);
     * }
     */
    public static void read_seek$set(MemorySegment seg, MemorySegment x) {
        AVInputFormat.read_seek$VH.set(seg, x);
    }
    public static MemorySegment read_seek$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemorySegment)AVInputFormat.read_seek$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void read_seek$set(MemorySegment seg, long index, MemorySegment x) {
        AVInputFormat.read_seek$VH.set(seg.asSlice(index*sizeof()), x);
    }
    public static read_seek read_seek(MemorySegment segment, SegmentScope scope) {
        return read_seek.ofAddress(read_seek$get(segment), scope);
    }
    static final FunctionDescriptor read_timestamp$FUNC = FunctionDescriptor.of(Constants$root.C_LONG_LONG$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_LONG$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_LONG_LONG$LAYOUT
    );
    static final FunctionDescriptor read_timestamp_UP$FUNC = FunctionDescriptor.of(Constants$root.C_LONG_LONG$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_LONG$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_LONG_LONG$LAYOUT
    );
    static final MethodHandle read_timestamp_UP$MH = RuntimeHelper.upcallHandle(read_timestamp.class, "apply", AVInputFormat.read_timestamp_UP$FUNC);
    static final FunctionDescriptor read_timestamp_DOWN$FUNC = FunctionDescriptor.of(Constants$root.C_LONG_LONG$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_LONG$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_LONG_LONG$LAYOUT
    );
    static final MethodHandle read_timestamp_DOWN$MH = RuntimeHelper.downcallHandle(
        AVInputFormat.read_timestamp_DOWN$FUNC
    );
    /**
     * {@snippet :
 * int64_t (*read_timestamp)(struct AVFormatContext*,int,int64_t*,int64_t);
     * }
     */
    public interface read_timestamp {

        long apply(java.lang.foreign.MemorySegment _x0, int _x1, java.lang.foreign.MemorySegment _x2, long _x3);
        static MemorySegment allocate(read_timestamp fi, SegmentScope scope) {
            return RuntimeHelper.upcallStub(AVInputFormat.read_timestamp_UP$MH, fi, AVInputFormat.read_timestamp$FUNC, scope);
        }
        static read_timestamp ofAddress(MemorySegment addr, SegmentScope scope) {
            MemorySegment symbol = MemorySegment.ofAddress(addr.address(), 0, scope);
            return (java.lang.foreign.MemorySegment __x0, int __x1, java.lang.foreign.MemorySegment __x2, long __x3) -> {
                try {
                    return (long)AVInputFormat.read_timestamp_DOWN$MH.invokeExact(symbol, __x0, __x1, __x2, __x3);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    static final VarHandle read_timestamp$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("read_timestamp"));
    public static VarHandle read_timestamp$VH() {
        return AVInputFormat.read_timestamp$VH;
    }
    /**
     * Getter for field:
     * {@snippet :
     * int64_t (*read_timestamp)(struct AVFormatContext*,int,int64_t*,int64_t);
     * }
     */
    public static MemorySegment read_timestamp$get(MemorySegment seg) {
        return (java.lang.foreign.MemorySegment)AVInputFormat.read_timestamp$VH.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * int64_t (*read_timestamp)(struct AVFormatContext*,int,int64_t*,int64_t);
     * }
     */
    public static void read_timestamp$set(MemorySegment seg, MemorySegment x) {
        AVInputFormat.read_timestamp$VH.set(seg, x);
    }
    public static MemorySegment read_timestamp$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemorySegment)AVInputFormat.read_timestamp$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void read_timestamp$set(MemorySegment seg, long index, MemorySegment x) {
        AVInputFormat.read_timestamp$VH.set(seg.asSlice(index*sizeof()), x);
    }
    public static read_timestamp read_timestamp(MemorySegment segment, SegmentScope scope) {
        return read_timestamp.ofAddress(read_timestamp$get(segment), scope);
    }
    static final FunctionDescriptor read_play$FUNC = FunctionDescriptor.of(Constants$root.C_LONG$LAYOUT,
        Constants$root.C_POINTER$LAYOUT
    );
    static final FunctionDescriptor read_play_UP$FUNC = FunctionDescriptor.of(Constants$root.C_LONG$LAYOUT,
        Constants$root.C_POINTER$LAYOUT
    );
    static final MethodHandle read_play_UP$MH = RuntimeHelper.upcallHandle(read_play.class, "apply", AVInputFormat.read_play_UP$FUNC);
    static final FunctionDescriptor read_play_DOWN$FUNC = FunctionDescriptor.of(Constants$root.C_LONG$LAYOUT,
        Constants$root.C_POINTER$LAYOUT
    );
    static final MethodHandle read_play_DOWN$MH = RuntimeHelper.downcallHandle(
        AVInputFormat.read_play_DOWN$FUNC
    );
    /**
     * {@snippet :
 * int (*read_play)(struct AVFormatContext*);
     * }
     */
    public interface read_play {

        int apply(java.lang.foreign.MemorySegment _x0);
        static MemorySegment allocate(read_play fi, SegmentScope scope) {
            return RuntimeHelper.upcallStub(AVInputFormat.read_play_UP$MH, fi, AVInputFormat.read_play$FUNC, scope);
        }
        static read_play ofAddress(MemorySegment addr, SegmentScope scope) {
            MemorySegment symbol = MemorySegment.ofAddress(addr.address(), 0, scope);
            return (java.lang.foreign.MemorySegment __x0) -> {
                try {
                    return (int)AVInputFormat.read_play_DOWN$MH.invokeExact(symbol, __x0);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    static final VarHandle read_play$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("read_play"));
    public static VarHandle read_play$VH() {
        return AVInputFormat.read_play$VH;
    }
    /**
     * Getter for field:
     * {@snippet :
     * int (*read_play)(struct AVFormatContext*);
     * }
     */
    public static MemorySegment read_play$get(MemorySegment seg) {
        return (java.lang.foreign.MemorySegment)AVInputFormat.read_play$VH.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * int (*read_play)(struct AVFormatContext*);
     * }
     */
    public static void read_play$set(MemorySegment seg, MemorySegment x) {
        AVInputFormat.read_play$VH.set(seg, x);
    }
    public static MemorySegment read_play$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemorySegment)AVInputFormat.read_play$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void read_play$set(MemorySegment seg, long index, MemorySegment x) {
        AVInputFormat.read_play$VH.set(seg.asSlice(index*sizeof()), x);
    }
    public static read_play read_play(MemorySegment segment, SegmentScope scope) {
        return read_play.ofAddress(read_play$get(segment), scope);
    }
    static final FunctionDescriptor read_pause$FUNC = FunctionDescriptor.of(Constants$root.C_LONG$LAYOUT,
        Constants$root.C_POINTER$LAYOUT
    );
    static final FunctionDescriptor read_pause_UP$FUNC = FunctionDescriptor.of(Constants$root.C_LONG$LAYOUT,
        Constants$root.C_POINTER$LAYOUT
    );
    static final MethodHandle read_pause_UP$MH = RuntimeHelper.upcallHandle(read_pause.class, "apply", AVInputFormat.read_pause_UP$FUNC);
    static final FunctionDescriptor read_pause_DOWN$FUNC = FunctionDescriptor.of(Constants$root.C_LONG$LAYOUT,
        Constants$root.C_POINTER$LAYOUT
    );
    static final MethodHandle read_pause_DOWN$MH = RuntimeHelper.downcallHandle(
        AVInputFormat.read_pause_DOWN$FUNC
    );
    /**
     * {@snippet :
 * int (*read_pause)(struct AVFormatContext*);
     * }
     */
    public interface read_pause {

        int apply(java.lang.foreign.MemorySegment _x0);
        static MemorySegment allocate(read_pause fi, SegmentScope scope) {
            return RuntimeHelper.upcallStub(AVInputFormat.read_pause_UP$MH, fi, AVInputFormat.read_pause$FUNC, scope);
        }
        static read_pause ofAddress(MemorySegment addr, SegmentScope scope) {
            MemorySegment symbol = MemorySegment.ofAddress(addr.address(), 0, scope);
            return (java.lang.foreign.MemorySegment __x0) -> {
                try {
                    return (int)AVInputFormat.read_pause_DOWN$MH.invokeExact(symbol, __x0);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    static final VarHandle read_pause$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("read_pause"));
    public static VarHandle read_pause$VH() {
        return AVInputFormat.read_pause$VH;
    }
    /**
     * Getter for field:
     * {@snippet :
     * int (*read_pause)(struct AVFormatContext*);
     * }
     */
    public static MemorySegment read_pause$get(MemorySegment seg) {
        return (java.lang.foreign.MemorySegment)AVInputFormat.read_pause$VH.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * int (*read_pause)(struct AVFormatContext*);
     * }
     */
    public static void read_pause$set(MemorySegment seg, MemorySegment x) {
        AVInputFormat.read_pause$VH.set(seg, x);
    }
    public static MemorySegment read_pause$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemorySegment)AVInputFormat.read_pause$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void read_pause$set(MemorySegment seg, long index, MemorySegment x) {
        AVInputFormat.read_pause$VH.set(seg.asSlice(index*sizeof()), x);
    }
    public static read_pause read_pause(MemorySegment segment, SegmentScope scope) {
        return read_pause.ofAddress(read_pause$get(segment), scope);
    }
    static final FunctionDescriptor read_seek2$FUNC = FunctionDescriptor.of(Constants$root.C_LONG$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_LONG$LAYOUT,
        Constants$root.C_LONG_LONG$LAYOUT,
        Constants$root.C_LONG_LONG$LAYOUT,
        Constants$root.C_LONG_LONG$LAYOUT,
        Constants$root.C_LONG$LAYOUT
    );
    static final FunctionDescriptor read_seek2_UP$FUNC = FunctionDescriptor.of(Constants$root.C_LONG$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_LONG$LAYOUT,
        Constants$root.C_LONG_LONG$LAYOUT,
        Constants$root.C_LONG_LONG$LAYOUT,
        Constants$root.C_LONG_LONG$LAYOUT,
        Constants$root.C_LONG$LAYOUT
    );
    static final MethodHandle read_seek2_UP$MH = RuntimeHelper.upcallHandle(read_seek2.class, "apply", AVInputFormat.read_seek2_UP$FUNC);
    static final FunctionDescriptor read_seek2_DOWN$FUNC = FunctionDescriptor.of(Constants$root.C_LONG$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_LONG$LAYOUT,
        Constants$root.C_LONG_LONG$LAYOUT,
        Constants$root.C_LONG_LONG$LAYOUT,
        Constants$root.C_LONG_LONG$LAYOUT,
        Constants$root.C_LONG$LAYOUT
    );
    static final MethodHandle read_seek2_DOWN$MH = RuntimeHelper.downcallHandle(
        AVInputFormat.read_seek2_DOWN$FUNC
    );
    /**
     * {@snippet :
 * int (*read_seek2)(struct AVFormatContext*,int,int64_t,int64_t,int64_t,int);
     * }
     */
    public interface read_seek2 {

        int apply(java.lang.foreign.MemorySegment _x0, int _x1, long _x2, long _x3, long _x4, int _x5);
        static MemorySegment allocate(read_seek2 fi, SegmentScope scope) {
            return RuntimeHelper.upcallStub(AVInputFormat.read_seek2_UP$MH, fi, AVInputFormat.read_seek2$FUNC, scope);
        }
        static read_seek2 ofAddress(MemorySegment addr, SegmentScope scope) {
            MemorySegment symbol = MemorySegment.ofAddress(addr.address(), 0, scope);
            return (java.lang.foreign.MemorySegment __x0, int __x1, long __x2, long __x3, long __x4, int __x5) -> {
                try {
                    return (int)AVInputFormat.read_seek2_DOWN$MH.invokeExact(symbol, __x0, __x1, __x2, __x3, __x4, __x5);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    static final VarHandle read_seek2$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("read_seek2"));
    public static VarHandle read_seek2$VH() {
        return AVInputFormat.read_seek2$VH;
    }
    /**
     * Getter for field:
     * {@snippet :
     * int (*read_seek2)(struct AVFormatContext*,int,int64_t,int64_t,int64_t,int);
     * }
     */
    public static MemorySegment read_seek2$get(MemorySegment seg) {
        return (java.lang.foreign.MemorySegment)AVInputFormat.read_seek2$VH.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * int (*read_seek2)(struct AVFormatContext*,int,int64_t,int64_t,int64_t,int);
     * }
     */
    public static void read_seek2$set(MemorySegment seg, MemorySegment x) {
        AVInputFormat.read_seek2$VH.set(seg, x);
    }
    public static MemorySegment read_seek2$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemorySegment)AVInputFormat.read_seek2$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void read_seek2$set(MemorySegment seg, long index, MemorySegment x) {
        AVInputFormat.read_seek2$VH.set(seg.asSlice(index*sizeof()), x);
    }
    public static read_seek2 read_seek2(MemorySegment segment, SegmentScope scope) {
        return read_seek2.ofAddress(read_seek2$get(segment), scope);
    }
    static final FunctionDescriptor get_device_list$FUNC = FunctionDescriptor.of(Constants$root.C_LONG$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_POINTER$LAYOUT
    );
    static final FunctionDescriptor get_device_list_UP$FUNC = FunctionDescriptor.of(Constants$root.C_LONG$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_POINTER$LAYOUT
    );
    static final MethodHandle get_device_list_UP$MH = RuntimeHelper.upcallHandle(get_device_list.class, "apply", AVInputFormat.get_device_list_UP$FUNC);
    static final FunctionDescriptor get_device_list_DOWN$FUNC = FunctionDescriptor.of(Constants$root.C_LONG$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_POINTER$LAYOUT
    );
    static final MethodHandle get_device_list_DOWN$MH = RuntimeHelper.downcallHandle(
        AVInputFormat.get_device_list_DOWN$FUNC
    );
    /**
     * {@snippet :
 * int (*get_device_list)(struct AVFormatContext*,struct AVDeviceInfoList*);
     * }
     */
    public interface get_device_list {

        int apply(java.lang.foreign.MemorySegment _x0, java.lang.foreign.MemorySegment _x1);
        static MemorySegment allocate(get_device_list fi, SegmentScope scope) {
            return RuntimeHelper.upcallStub(AVInputFormat.get_device_list_UP$MH, fi, AVInputFormat.get_device_list$FUNC, scope);
        }
        static get_device_list ofAddress(MemorySegment addr, SegmentScope scope) {
            MemorySegment symbol = MemorySegment.ofAddress(addr.address(), 0, scope);
            return (java.lang.foreign.MemorySegment __x0, java.lang.foreign.MemorySegment __x1) -> {
                try {
                    return (int)AVInputFormat.get_device_list_DOWN$MH.invokeExact(symbol, __x0, __x1);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    static final VarHandle get_device_list$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("get_device_list"));
    public static VarHandle get_device_list$VH() {
        return AVInputFormat.get_device_list$VH;
    }
    /**
     * Getter for field:
     * {@snippet :
     * int (*get_device_list)(struct AVFormatContext*,struct AVDeviceInfoList*);
     * }
     */
    public static MemorySegment get_device_list$get(MemorySegment seg) {
        return (java.lang.foreign.MemorySegment)AVInputFormat.get_device_list$VH.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * int (*get_device_list)(struct AVFormatContext*,struct AVDeviceInfoList*);
     * }
     */
    public static void get_device_list$set(MemorySegment seg, MemorySegment x) {
        AVInputFormat.get_device_list$VH.set(seg, x);
    }
    public static MemorySegment get_device_list$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemorySegment)AVInputFormat.get_device_list$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void get_device_list$set(MemorySegment seg, long index, MemorySegment x) {
        AVInputFormat.get_device_list$VH.set(seg.asSlice(index*sizeof()), x);
    }
    public static get_device_list get_device_list(MemorySegment segment, SegmentScope scope) {
        return get_device_list.ofAddress(get_device_list$get(segment), scope);
    }
    public static long sizeof() { return $LAYOUT().byteSize(); }
    public static MemorySegment allocate(SegmentAllocator allocator) { return allocator.allocate($LAYOUT()); }
    public static MemorySegment allocateArray(long len, SegmentAllocator allocator) {
        return allocator.allocate(MemoryLayout.sequenceLayout(len, $LAYOUT()));
    }
    public static MemorySegment ofAddress(MemorySegment addr, SegmentScope scope) { return RuntimeHelper.asArray(addr, $LAYOUT(), 1, scope); }
}


