// Generated by jextract

package com.icuxika.jextract.libffmpeg;

import java.lang.invoke.MethodHandle;
import java.lang.invoke.VarHandle;
import java.nio.ByteOrder;
import java.lang.foreign.*;
import static java.lang.foreign.ValueLayout.*;
final class constants$24 {

    // Suppresses default constructor, ensuring non-instantiability.
    private constants$24() {}
    static final FunctionDescriptor _j0$FUNC = FunctionDescriptor.of(Constants$root.C_DOUBLE$LAYOUT,
        Constants$root.C_DOUBLE$LAYOUT
    );
    static final MethodHandle _j0$MH = RuntimeHelper.downcallHandle(
        "_j0",
        constants$24._j0$FUNC
    );
    static final FunctionDescriptor _j1$FUNC = FunctionDescriptor.of(Constants$root.C_DOUBLE$LAYOUT,
        Constants$root.C_DOUBLE$LAYOUT
    );
    static final MethodHandle _j1$MH = RuntimeHelper.downcallHandle(
        "_j1",
        constants$24._j1$FUNC
    );
    static final FunctionDescriptor _jn$FUNC = FunctionDescriptor.of(Constants$root.C_DOUBLE$LAYOUT,
        Constants$root.C_LONG$LAYOUT,
        Constants$root.C_DOUBLE$LAYOUT
    );
    static final MethodHandle _jn$MH = RuntimeHelper.downcallHandle(
        "_jn",
        constants$24._jn$FUNC
    );
    static final FunctionDescriptor _y0$FUNC = FunctionDescriptor.of(Constants$root.C_DOUBLE$LAYOUT,
        Constants$root.C_DOUBLE$LAYOUT
    );
    static final MethodHandle _y0$MH = RuntimeHelper.downcallHandle(
        "_y0",
        constants$24._y0$FUNC
    );
    static final FunctionDescriptor _y1$FUNC = FunctionDescriptor.of(Constants$root.C_DOUBLE$LAYOUT,
        Constants$root.C_DOUBLE$LAYOUT
    );
    static final MethodHandle _y1$MH = RuntimeHelper.downcallHandle(
        "_y1",
        constants$24._y1$FUNC
    );
    static final FunctionDescriptor _yn$FUNC = FunctionDescriptor.of(Constants$root.C_DOUBLE$LAYOUT,
        Constants$root.C_LONG$LAYOUT,
        Constants$root.C_DOUBLE$LAYOUT
    );
    static final MethodHandle _yn$MH = RuntimeHelper.downcallHandle(
        "_yn",
        constants$24._yn$FUNC
    );
}


