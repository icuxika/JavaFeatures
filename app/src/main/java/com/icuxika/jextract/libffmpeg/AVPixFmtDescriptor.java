// Generated by jextract

package com.icuxika.jextract.libffmpeg;

import java.lang.invoke.MethodHandle;
import java.lang.invoke.VarHandle;
import java.nio.ByteOrder;
import java.lang.foreign.*;
import static java.lang.foreign.ValueLayout.*;
/**
 * {@snippet :
 * struct AVPixFmtDescriptor {
 *     char* name;
 *     uint8_t nb_components;
 *     uint8_t log2_chroma_w;
 *     uint8_t log2_chroma_h;
 *     uint64_t flags;
 *     AVComponentDescriptor comp[4];
 *     char* alias;
 * };
 * }
 */
public class AVPixFmtDescriptor {

    static final StructLayout $struct$LAYOUT = MemoryLayout.structLayout(
        Constants$root.C_POINTER$LAYOUT.withName("name"),
        Constants$root.C_CHAR$LAYOUT.withName("nb_components"),
        Constants$root.C_CHAR$LAYOUT.withName("log2_chroma_w"),
        Constants$root.C_CHAR$LAYOUT.withName("log2_chroma_h"),
        MemoryLayout.paddingLayout(40),
        Constants$root.C_LONG_LONG$LAYOUT.withName("flags"),
        MemoryLayout.sequenceLayout(4, MemoryLayout.structLayout(
            Constants$root.C_LONG$LAYOUT.withName("plane"),
            Constants$root.C_LONG$LAYOUT.withName("step"),
            Constants$root.C_LONG$LAYOUT.withName("offset"),
            Constants$root.C_LONG$LAYOUT.withName("shift"),
            Constants$root.C_LONG$LAYOUT.withName("depth")
        ).withName("AVComponentDescriptor")).withName("comp"),
        Constants$root.C_POINTER$LAYOUT.withName("alias")
    ).withName("AVPixFmtDescriptor");
    public static MemoryLayout $LAYOUT() {
        return AVPixFmtDescriptor.$struct$LAYOUT;
    }
    static final VarHandle name$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("name"));
    public static VarHandle name$VH() {
        return AVPixFmtDescriptor.name$VH;
    }
    /**
     * Getter for field:
     * {@snippet :
     * char* name;
     * }
     */
    public static MemorySegment name$get(MemorySegment seg) {
        return (java.lang.foreign.MemorySegment)AVPixFmtDescriptor.name$VH.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * char* name;
     * }
     */
    public static void name$set(MemorySegment seg, MemorySegment x) {
        AVPixFmtDescriptor.name$VH.set(seg, x);
    }
    public static MemorySegment name$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemorySegment)AVPixFmtDescriptor.name$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void name$set(MemorySegment seg, long index, MemorySegment x) {
        AVPixFmtDescriptor.name$VH.set(seg.asSlice(index*sizeof()), x);
    }
    static final VarHandle nb_components$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("nb_components"));
    public static VarHandle nb_components$VH() {
        return AVPixFmtDescriptor.nb_components$VH;
    }
    /**
     * Getter for field:
     * {@snippet :
     * uint8_t nb_components;
     * }
     */
    public static byte nb_components$get(MemorySegment seg) {
        return (byte)AVPixFmtDescriptor.nb_components$VH.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * uint8_t nb_components;
     * }
     */
    public static void nb_components$set(MemorySegment seg, byte x) {
        AVPixFmtDescriptor.nb_components$VH.set(seg, x);
    }
    public static byte nb_components$get(MemorySegment seg, long index) {
        return (byte)AVPixFmtDescriptor.nb_components$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void nb_components$set(MemorySegment seg, long index, byte x) {
        AVPixFmtDescriptor.nb_components$VH.set(seg.asSlice(index*sizeof()), x);
    }
    static final VarHandle log2_chroma_w$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("log2_chroma_w"));
    public static VarHandle log2_chroma_w$VH() {
        return AVPixFmtDescriptor.log2_chroma_w$VH;
    }
    /**
     * Getter for field:
     * {@snippet :
     * uint8_t log2_chroma_w;
     * }
     */
    public static byte log2_chroma_w$get(MemorySegment seg) {
        return (byte)AVPixFmtDescriptor.log2_chroma_w$VH.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * uint8_t log2_chroma_w;
     * }
     */
    public static void log2_chroma_w$set(MemorySegment seg, byte x) {
        AVPixFmtDescriptor.log2_chroma_w$VH.set(seg, x);
    }
    public static byte log2_chroma_w$get(MemorySegment seg, long index) {
        return (byte)AVPixFmtDescriptor.log2_chroma_w$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void log2_chroma_w$set(MemorySegment seg, long index, byte x) {
        AVPixFmtDescriptor.log2_chroma_w$VH.set(seg.asSlice(index*sizeof()), x);
    }
    static final VarHandle log2_chroma_h$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("log2_chroma_h"));
    public static VarHandle log2_chroma_h$VH() {
        return AVPixFmtDescriptor.log2_chroma_h$VH;
    }
    /**
     * Getter for field:
     * {@snippet :
     * uint8_t log2_chroma_h;
     * }
     */
    public static byte log2_chroma_h$get(MemorySegment seg) {
        return (byte)AVPixFmtDescriptor.log2_chroma_h$VH.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * uint8_t log2_chroma_h;
     * }
     */
    public static void log2_chroma_h$set(MemorySegment seg, byte x) {
        AVPixFmtDescriptor.log2_chroma_h$VH.set(seg, x);
    }
    public static byte log2_chroma_h$get(MemorySegment seg, long index) {
        return (byte)AVPixFmtDescriptor.log2_chroma_h$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void log2_chroma_h$set(MemorySegment seg, long index, byte x) {
        AVPixFmtDescriptor.log2_chroma_h$VH.set(seg.asSlice(index*sizeof()), x);
    }
    static final VarHandle flags$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("flags"));
    public static VarHandle flags$VH() {
        return AVPixFmtDescriptor.flags$VH;
    }
    /**
     * Getter for field:
     * {@snippet :
     * uint64_t flags;
     * }
     */
    public static long flags$get(MemorySegment seg) {
        return (long)AVPixFmtDescriptor.flags$VH.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * uint64_t flags;
     * }
     */
    public static void flags$set(MemorySegment seg, long x) {
        AVPixFmtDescriptor.flags$VH.set(seg, x);
    }
    public static long flags$get(MemorySegment seg, long index) {
        return (long)AVPixFmtDescriptor.flags$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void flags$set(MemorySegment seg, long index, long x) {
        AVPixFmtDescriptor.flags$VH.set(seg.asSlice(index*sizeof()), x);
    }
    public static MemorySegment comp$slice(MemorySegment seg) {
        return seg.asSlice(24, 80);
    }
    static final VarHandle alias$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("alias"));
    public static VarHandle alias$VH() {
        return AVPixFmtDescriptor.alias$VH;
    }
    /**
     * Getter for field:
     * {@snippet :
     * char* alias;
     * }
     */
    public static MemorySegment alias$get(MemorySegment seg) {
        return (java.lang.foreign.MemorySegment)AVPixFmtDescriptor.alias$VH.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * char* alias;
     * }
     */
    public static void alias$set(MemorySegment seg, MemorySegment x) {
        AVPixFmtDescriptor.alias$VH.set(seg, x);
    }
    public static MemorySegment alias$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemorySegment)AVPixFmtDescriptor.alias$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void alias$set(MemorySegment seg, long index, MemorySegment x) {
        AVPixFmtDescriptor.alias$VH.set(seg.asSlice(index*sizeof()), x);
    }
    public static long sizeof() { return $LAYOUT().byteSize(); }
    public static MemorySegment allocate(SegmentAllocator allocator) { return allocator.allocate($LAYOUT()); }
    public static MemorySegment allocateArray(long len, SegmentAllocator allocator) {
        return allocator.allocate(MemoryLayout.sequenceLayout(len, $LAYOUT()));
    }
    public static MemorySegment ofAddress(MemorySegment addr, SegmentScope scope) { return RuntimeHelper.asArray(addr, $LAYOUT(), 1, scope); }
}


