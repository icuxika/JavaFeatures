// Generated by jextract

package com.icuxika.jextract.libffmpeg;

import java.lang.invoke.MethodHandle;
import java.lang.invoke.VarHandle;
import java.nio.ByteOrder;
import java.lang.foreign.*;
import static java.lang.foreign.ValueLayout.*;
final class constants$26 {

    // Suppresses default constructor, ensuring non-instantiability.
    private constants$26() {}
    static final FunctionDescriptor _copysignf$FUNC = FunctionDescriptor.of(Constants$root.C_FLOAT$LAYOUT,
        Constants$root.C_FLOAT$LAYOUT,
        Constants$root.C_FLOAT$LAYOUT
    );
    static final MethodHandle _copysignf$MH = RuntimeHelper.downcallHandle(
        "_copysignf",
        constants$26._copysignf$FUNC
    );
    static final FunctionDescriptor erff$FUNC = FunctionDescriptor.of(Constants$root.C_FLOAT$LAYOUT,
        Constants$root.C_FLOAT$LAYOUT
    );
    static final MethodHandle erff$MH = RuntimeHelper.downcallHandle(
        "erff",
        constants$26.erff$FUNC
    );
    static final FunctionDescriptor erfcf$FUNC = FunctionDescriptor.of(Constants$root.C_FLOAT$LAYOUT,
        Constants$root.C_FLOAT$LAYOUT
    );
    static final MethodHandle erfcf$MH = RuntimeHelper.downcallHandle(
        "erfcf",
        constants$26.erfcf$FUNC
    );
    static final FunctionDescriptor expm1f$FUNC = FunctionDescriptor.of(Constants$root.C_FLOAT$LAYOUT,
        Constants$root.C_FLOAT$LAYOUT
    );
    static final MethodHandle expm1f$MH = RuntimeHelper.downcallHandle(
        "expm1f",
        constants$26.expm1f$FUNC
    );
    static final FunctionDescriptor exp2f$FUNC = FunctionDescriptor.of(Constants$root.C_FLOAT$LAYOUT,
        Constants$root.C_FLOAT$LAYOUT
    );
    static final MethodHandle exp2f$MH = RuntimeHelper.downcallHandle(
        "exp2f",
        constants$26.exp2f$FUNC
    );
    static final FunctionDescriptor fdimf$FUNC = FunctionDescriptor.of(Constants$root.C_FLOAT$LAYOUT,
        Constants$root.C_FLOAT$LAYOUT,
        Constants$root.C_FLOAT$LAYOUT
    );
    static final MethodHandle fdimf$MH = RuntimeHelper.downcallHandle(
        "fdimf",
        constants$26.fdimf$FUNC
    );
}


