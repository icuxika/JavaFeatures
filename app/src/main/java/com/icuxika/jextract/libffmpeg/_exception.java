// Generated by jextract

package com.icuxika.jextract.libffmpeg;

import java.lang.invoke.MethodHandle;
import java.lang.invoke.VarHandle;
import java.nio.ByteOrder;
import java.lang.foreign.*;
import static java.lang.foreign.ValueLayout.*;
/**
 * {@snippet :
 * struct _exception {
 *     int type;
 *     char* name;
 *     double arg1;
 *     double arg2;
 *     double retval;
 * };
 * }
 */
public class _exception {

    static final StructLayout $struct$LAYOUT = MemoryLayout.structLayout(
        Constants$root.C_LONG$LAYOUT.withName("type"),
        MemoryLayout.paddingLayout(32),
        Constants$root.C_POINTER$LAYOUT.withName("name"),
        Constants$root.C_DOUBLE$LAYOUT.withName("arg1"),
        Constants$root.C_DOUBLE$LAYOUT.withName("arg2"),
        Constants$root.C_DOUBLE$LAYOUT.withName("retval")
    ).withName("_exception");
    public static MemoryLayout $LAYOUT() {
        return _exception.$struct$LAYOUT;
    }
    static final VarHandle type$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("type"));
    public static VarHandle type$VH() {
        return _exception.type$VH;
    }
    /**
     * Getter for field:
     * {@snippet :
     * int type;
     * }
     */
    public static int type$get(MemorySegment seg) {
        return (int)_exception.type$VH.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * int type;
     * }
     */
    public static void type$set(MemorySegment seg, int x) {
        _exception.type$VH.set(seg, x);
    }
    public static int type$get(MemorySegment seg, long index) {
        return (int)_exception.type$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void type$set(MemorySegment seg, long index, int x) {
        _exception.type$VH.set(seg.asSlice(index*sizeof()), x);
    }
    static final VarHandle name$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("name"));
    public static VarHandle name$VH() {
        return _exception.name$VH;
    }
    /**
     * Getter for field:
     * {@snippet :
     * char* name;
     * }
     */
    public static MemorySegment name$get(MemorySegment seg) {
        return (java.lang.foreign.MemorySegment)_exception.name$VH.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * char* name;
     * }
     */
    public static void name$set(MemorySegment seg, MemorySegment x) {
        _exception.name$VH.set(seg, x);
    }
    public static MemorySegment name$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemorySegment)_exception.name$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void name$set(MemorySegment seg, long index, MemorySegment x) {
        _exception.name$VH.set(seg.asSlice(index*sizeof()), x);
    }
    static final VarHandle arg1$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("arg1"));
    public static VarHandle arg1$VH() {
        return _exception.arg1$VH;
    }
    /**
     * Getter for field:
     * {@snippet :
     * double arg1;
     * }
     */
    public static double arg1$get(MemorySegment seg) {
        return (double)_exception.arg1$VH.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * double arg1;
     * }
     */
    public static void arg1$set(MemorySegment seg, double x) {
        _exception.arg1$VH.set(seg, x);
    }
    public static double arg1$get(MemorySegment seg, long index) {
        return (double)_exception.arg1$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void arg1$set(MemorySegment seg, long index, double x) {
        _exception.arg1$VH.set(seg.asSlice(index*sizeof()), x);
    }
    static final VarHandle arg2$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("arg2"));
    public static VarHandle arg2$VH() {
        return _exception.arg2$VH;
    }
    /**
     * Getter for field:
     * {@snippet :
     * double arg2;
     * }
     */
    public static double arg2$get(MemorySegment seg) {
        return (double)_exception.arg2$VH.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * double arg2;
     * }
     */
    public static void arg2$set(MemorySegment seg, double x) {
        _exception.arg2$VH.set(seg, x);
    }
    public static double arg2$get(MemorySegment seg, long index) {
        return (double)_exception.arg2$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void arg2$set(MemorySegment seg, long index, double x) {
        _exception.arg2$VH.set(seg.asSlice(index*sizeof()), x);
    }
    static final VarHandle retval$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("retval"));
    public static VarHandle retval$VH() {
        return _exception.retval$VH;
    }
    /**
     * Getter for field:
     * {@snippet :
     * double retval;
     * }
     */
    public static double retval$get(MemorySegment seg) {
        return (double)_exception.retval$VH.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * double retval;
     * }
     */
    public static void retval$set(MemorySegment seg, double x) {
        _exception.retval$VH.set(seg, x);
    }
    public static double retval$get(MemorySegment seg, long index) {
        return (double)_exception.retval$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void retval$set(MemorySegment seg, long index, double x) {
        _exception.retval$VH.set(seg.asSlice(index*sizeof()), x);
    }
    public static long sizeof() { return $LAYOUT().byteSize(); }
    public static MemorySegment allocate(SegmentAllocator allocator) { return allocator.allocate($LAYOUT()); }
    public static MemorySegment allocateArray(long len, SegmentAllocator allocator) {
        return allocator.allocate(MemoryLayout.sequenceLayout(len, $LAYOUT()));
    }
    public static MemorySegment ofAddress(MemorySegment addr, SegmentScope scope) { return RuntimeHelper.asArray(addr, $LAYOUT(), 1, scope); }
}


