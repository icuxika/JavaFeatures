// Generated by jextract

package com.icuxika.jextract.libffmpeg;

import java.lang.invoke.MethodHandle;
import java.lang.invoke.VarHandle;
import java.nio.ByteOrder;
import java.lang.foreign.*;
import static java.lang.foreign.ValueLayout.*;
/**
 * {@snippet :
 * void (*av_log_set_callback$callback)(void*,int,char*,va_list);
 * }
 */
public interface av_log_set_callback$callback {

    void apply(java.lang.foreign.MemorySegment _x0, int _x1, java.lang.foreign.MemorySegment _x2, java.lang.foreign.MemorySegment _x3);
    static MemorySegment allocate(av_log_set_callback$callback fi, SegmentScope scope) {
        return RuntimeHelper.upcallStub(constants$128.av_log_set_callback$callback_UP$MH, fi, constants$128.av_log_set_callback$callback$FUNC, scope);
    }
    static av_log_set_callback$callback ofAddress(MemorySegment addr, SegmentScope scope) {
        MemorySegment symbol = MemorySegment.ofAddress(addr.address(), 0, scope);
        return (java.lang.foreign.MemorySegment __x0, int __x1, java.lang.foreign.MemorySegment __x2, java.lang.foreign.MemorySegment __x3) -> {
            try {
                constants$129.av_log_set_callback$callback_DOWN$MH.invokeExact(symbol, __x0, __x1, __x2, __x3);
            } catch (Throwable ex$) {
                throw new AssertionError("should not reach here", ex$);
            }
        };
    }
}


