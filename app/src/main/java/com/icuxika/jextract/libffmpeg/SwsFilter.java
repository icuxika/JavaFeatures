// Generated by jextract

package com.icuxika.jextract.libffmpeg;

import java.lang.invoke.MethodHandle;
import java.lang.invoke.VarHandle;
import java.nio.ByteOrder;
import java.lang.foreign.*;
import static java.lang.foreign.ValueLayout.*;
/**
 * {@snippet :
 * struct SwsFilter {
 *     SwsVector* lumH;
 *     SwsVector* lumV;
 *     SwsVector* chrH;
 *     SwsVector* chrV;
 * };
 * }
 */
public class SwsFilter {

    static final StructLayout $struct$LAYOUT = MemoryLayout.structLayout(
        Constants$root.C_POINTER$LAYOUT.withName("lumH"),
        Constants$root.C_POINTER$LAYOUT.withName("lumV"),
        Constants$root.C_POINTER$LAYOUT.withName("chrH"),
        Constants$root.C_POINTER$LAYOUT.withName("chrV")
    ).withName("SwsFilter");
    public static MemoryLayout $LAYOUT() {
        return SwsFilter.$struct$LAYOUT;
    }
    static final VarHandle lumH$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("lumH"));
    public static VarHandle lumH$VH() {
        return SwsFilter.lumH$VH;
    }
    /**
     * Getter for field:
     * {@snippet :
     * SwsVector* lumH;
     * }
     */
    public static MemorySegment lumH$get(MemorySegment seg) {
        return (java.lang.foreign.MemorySegment)SwsFilter.lumH$VH.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * SwsVector* lumH;
     * }
     */
    public static void lumH$set(MemorySegment seg, MemorySegment x) {
        SwsFilter.lumH$VH.set(seg, x);
    }
    public static MemorySegment lumH$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemorySegment)SwsFilter.lumH$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void lumH$set(MemorySegment seg, long index, MemorySegment x) {
        SwsFilter.lumH$VH.set(seg.asSlice(index*sizeof()), x);
    }
    static final VarHandle lumV$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("lumV"));
    public static VarHandle lumV$VH() {
        return SwsFilter.lumV$VH;
    }
    /**
     * Getter for field:
     * {@snippet :
     * SwsVector* lumV;
     * }
     */
    public static MemorySegment lumV$get(MemorySegment seg) {
        return (java.lang.foreign.MemorySegment)SwsFilter.lumV$VH.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * SwsVector* lumV;
     * }
     */
    public static void lumV$set(MemorySegment seg, MemorySegment x) {
        SwsFilter.lumV$VH.set(seg, x);
    }
    public static MemorySegment lumV$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemorySegment)SwsFilter.lumV$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void lumV$set(MemorySegment seg, long index, MemorySegment x) {
        SwsFilter.lumV$VH.set(seg.asSlice(index*sizeof()), x);
    }
    static final VarHandle chrH$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("chrH"));
    public static VarHandle chrH$VH() {
        return SwsFilter.chrH$VH;
    }
    /**
     * Getter for field:
     * {@snippet :
     * SwsVector* chrH;
     * }
     */
    public static MemorySegment chrH$get(MemorySegment seg) {
        return (java.lang.foreign.MemorySegment)SwsFilter.chrH$VH.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * SwsVector* chrH;
     * }
     */
    public static void chrH$set(MemorySegment seg, MemorySegment x) {
        SwsFilter.chrH$VH.set(seg, x);
    }
    public static MemorySegment chrH$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemorySegment)SwsFilter.chrH$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void chrH$set(MemorySegment seg, long index, MemorySegment x) {
        SwsFilter.chrH$VH.set(seg.asSlice(index*sizeof()), x);
    }
    static final VarHandle chrV$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("chrV"));
    public static VarHandle chrV$VH() {
        return SwsFilter.chrV$VH;
    }
    /**
     * Getter for field:
     * {@snippet :
     * SwsVector* chrV;
     * }
     */
    public static MemorySegment chrV$get(MemorySegment seg) {
        return (java.lang.foreign.MemorySegment)SwsFilter.chrV$VH.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * SwsVector* chrV;
     * }
     */
    public static void chrV$set(MemorySegment seg, MemorySegment x) {
        SwsFilter.chrV$VH.set(seg, x);
    }
    public static MemorySegment chrV$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemorySegment)SwsFilter.chrV$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void chrV$set(MemorySegment seg, long index, MemorySegment x) {
        SwsFilter.chrV$VH.set(seg.asSlice(index*sizeof()), x);
    }
    public static long sizeof() { return $LAYOUT().byteSize(); }
    public static MemorySegment allocate(SegmentAllocator allocator) { return allocator.allocate($LAYOUT()); }
    public static MemorySegment allocateArray(long len, SegmentAllocator allocator) {
        return allocator.allocate(MemoryLayout.sequenceLayout(len, $LAYOUT()));
    }
    public static MemorySegment ofAddress(MemorySegment addr, SegmentScope scope) { return RuntimeHelper.asArray(addr, $LAYOUT(), 1, scope); }
}


