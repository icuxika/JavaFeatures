// Generated by jextract

package com.icuxika.jextract.libffmpeg;

import java.lang.invoke.MethodHandle;
import java.lang.invoke.VarHandle;
import java.nio.ByteOrder;
import java.lang.foreign.*;
import static java.lang.foreign.ValueLayout.*;
/**
 * {@snippet :
 * struct SwsVector {
 *     double* coeff;
 *     int length;
 * };
 * }
 */
public class SwsVector {

    static final StructLayout $struct$LAYOUT = MemoryLayout.structLayout(
        Constants$root.C_POINTER$LAYOUT.withName("coeff"),
        Constants$root.C_LONG$LAYOUT.withName("length"),
        MemoryLayout.paddingLayout(32)
    ).withName("SwsVector");
    public static MemoryLayout $LAYOUT() {
        return SwsVector.$struct$LAYOUT;
    }
    static final VarHandle coeff$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("coeff"));
    public static VarHandle coeff$VH() {
        return SwsVector.coeff$VH;
    }
    /**
     * Getter for field:
     * {@snippet :
     * double* coeff;
     * }
     */
    public static MemorySegment coeff$get(MemorySegment seg) {
        return (java.lang.foreign.MemorySegment)SwsVector.coeff$VH.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * double* coeff;
     * }
     */
    public static void coeff$set(MemorySegment seg, MemorySegment x) {
        SwsVector.coeff$VH.set(seg, x);
    }
    public static MemorySegment coeff$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemorySegment)SwsVector.coeff$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void coeff$set(MemorySegment seg, long index, MemorySegment x) {
        SwsVector.coeff$VH.set(seg.asSlice(index*sizeof()), x);
    }
    static final VarHandle length$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("length"));
    public static VarHandle length$VH() {
        return SwsVector.length$VH;
    }
    /**
     * Getter for field:
     * {@snippet :
     * int length;
     * }
     */
    public static int length$get(MemorySegment seg) {
        return (int)SwsVector.length$VH.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * int length;
     * }
     */
    public static void length$set(MemorySegment seg, int x) {
        SwsVector.length$VH.set(seg, x);
    }
    public static int length$get(MemorySegment seg, long index) {
        return (int)SwsVector.length$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void length$set(MemorySegment seg, long index, int x) {
        SwsVector.length$VH.set(seg.asSlice(index*sizeof()), x);
    }
    public static long sizeof() { return $LAYOUT().byteSize(); }
    public static MemorySegment allocate(SegmentAllocator allocator) { return allocator.allocate($LAYOUT()); }
    public static MemorySegment allocateArray(long len, SegmentAllocator allocator) {
        return allocator.allocate(MemoryLayout.sequenceLayout(len, $LAYOUT()));
    }
    public static MemorySegment ofAddress(MemorySegment addr, SegmentScope scope) { return RuntimeHelper.asArray(addr, $LAYOUT(), 1, scope); }
}


