// Generated by jextract

package com.icuxika.jextract.libffmpeg;

import java.lang.invoke.MethodHandle;
import java.lang.invoke.VarHandle;
import java.nio.ByteOrder;
import java.lang.foreign.*;
import static java.lang.foreign.ValueLayout.*;
/**
 * {@snippet :
 * struct AVFrame {
 *     uint8_t* data[8];
 *     int linesize[8];
 *     uint8_t** extended_data;
 *     int width;
 *     int height;
 *     int nb_samples;
 *     int format;
 *     int key_frame;
 *     enum AVPictureType pict_type;
 *     AVRational sample_aspect_ratio;
 *     int64_t pts;
 *     int64_t pkt_dts;
 *     AVRational time_base;
 *     int coded_picture_number;
 *     int display_picture_number;
 *     int quality;
 *     void* opaque;
 *     int repeat_pict;
 *     int interlaced_frame;
 *     int top_field_first;
 *     int palette_has_changed;
 *     int64_t reordered_opaque;
 *     int sample_rate;
 *     uint64_t channel_layout;
 *     AVBufferRef* buf[8];
 *     AVBufferRef** extended_buf;
 *     int nb_extended_buf;
 *     AVFrameSideData** side_data;
 *     int nb_side_data;
 *     int flags;
 *     enum AVColorRange color_range;
 *     enum AVColorPrimaries color_primaries;
 *     enum AVColorTransferCharacteristic color_trc;
 *     enum AVColorSpace colorspace;
 *     enum AVChromaLocation chroma_location;
 *     int64_t best_effort_timestamp;
 *     int64_t pkt_pos;
 *     int64_t pkt_duration;
 *     AVDictionary* metadata;
 *     int decode_error_flags;
 *     int channels;
 *     int pkt_size;
 *     AVBufferRef* hw_frames_ctx;
 *     AVBufferRef* opaque_ref;
 *     size_t crop_top;
 *     size_t crop_bottom;
 *     size_t crop_left;
 *     size_t crop_right;
 *     AVBufferRef* private_ref;
 *     AVChannelLayout ch_layout;
 *     int64_t duration;
 * };
 * }
 */
public class AVFrame {

    static final StructLayout $struct$LAYOUT = MemoryLayout.structLayout(
        MemoryLayout.sequenceLayout(8, Constants$root.C_POINTER$LAYOUT).withName("data"),
        MemoryLayout.sequenceLayout(8, Constants$root.C_LONG$LAYOUT).withName("linesize"),
        Constants$root.C_POINTER$LAYOUT.withName("extended_data"),
        Constants$root.C_LONG$LAYOUT.withName("width"),
        Constants$root.C_LONG$LAYOUT.withName("height"),
        Constants$root.C_LONG$LAYOUT.withName("nb_samples"),
        Constants$root.C_LONG$LAYOUT.withName("format"),
        Constants$root.C_LONG$LAYOUT.withName("key_frame"),
        Constants$root.C_LONG$LAYOUT.withName("pict_type"),
        MemoryLayout.structLayout(
            Constants$root.C_LONG$LAYOUT.withName("num"),
            Constants$root.C_LONG$LAYOUT.withName("den")
        ).withName("sample_aspect_ratio"),
        Constants$root.C_LONG_LONG$LAYOUT.withName("pts"),
        Constants$root.C_LONG_LONG$LAYOUT.withName("pkt_dts"),
        MemoryLayout.structLayout(
            Constants$root.C_LONG$LAYOUT.withName("num"),
            Constants$root.C_LONG$LAYOUT.withName("den")
        ).withName("time_base"),
        Constants$root.C_LONG$LAYOUT.withName("coded_picture_number"),
        Constants$root.C_LONG$LAYOUT.withName("display_picture_number"),
        Constants$root.C_LONG$LAYOUT.withName("quality"),
        MemoryLayout.paddingLayout(32),
        Constants$root.C_POINTER$LAYOUT.withName("opaque"),
        Constants$root.C_LONG$LAYOUT.withName("repeat_pict"),
        Constants$root.C_LONG$LAYOUT.withName("interlaced_frame"),
        Constants$root.C_LONG$LAYOUT.withName("top_field_first"),
        Constants$root.C_LONG$LAYOUT.withName("palette_has_changed"),
        Constants$root.C_LONG_LONG$LAYOUT.withName("reordered_opaque"),
        Constants$root.C_LONG$LAYOUT.withName("sample_rate"),
        MemoryLayout.paddingLayout(32),
        Constants$root.C_LONG_LONG$LAYOUT.withName("channel_layout"),
        MemoryLayout.sequenceLayout(8, Constants$root.C_POINTER$LAYOUT).withName("buf"),
        Constants$root.C_POINTER$LAYOUT.withName("extended_buf"),
        Constants$root.C_LONG$LAYOUT.withName("nb_extended_buf"),
        MemoryLayout.paddingLayout(32),
        Constants$root.C_POINTER$LAYOUT.withName("side_data"),
        Constants$root.C_LONG$LAYOUT.withName("nb_side_data"),
        Constants$root.C_LONG$LAYOUT.withName("flags"),
        Constants$root.C_LONG$LAYOUT.withName("color_range"),
        Constants$root.C_LONG$LAYOUT.withName("color_primaries"),
        Constants$root.C_LONG$LAYOUT.withName("color_trc"),
        Constants$root.C_LONG$LAYOUT.withName("colorspace"),
        Constants$root.C_LONG$LAYOUT.withName("chroma_location"),
        MemoryLayout.paddingLayout(32),
        Constants$root.C_LONG_LONG$LAYOUT.withName("best_effort_timestamp"),
        Constants$root.C_LONG_LONG$LAYOUT.withName("pkt_pos"),
        Constants$root.C_LONG_LONG$LAYOUT.withName("pkt_duration"),
        Constants$root.C_POINTER$LAYOUT.withName("metadata"),
        Constants$root.C_LONG$LAYOUT.withName("decode_error_flags"),
        Constants$root.C_LONG$LAYOUT.withName("channels"),
        Constants$root.C_LONG$LAYOUT.withName("pkt_size"),
        MemoryLayout.paddingLayout(32),
        Constants$root.C_POINTER$LAYOUT.withName("hw_frames_ctx"),
        Constants$root.C_POINTER$LAYOUT.withName("opaque_ref"),
        Constants$root.C_LONG_LONG$LAYOUT.withName("crop_top"),
        Constants$root.C_LONG_LONG$LAYOUT.withName("crop_bottom"),
        Constants$root.C_LONG_LONG$LAYOUT.withName("crop_left"),
        Constants$root.C_LONG_LONG$LAYOUT.withName("crop_right"),
        Constants$root.C_POINTER$LAYOUT.withName("private_ref"),
        MemoryLayout.structLayout(
            Constants$root.C_LONG$LAYOUT.withName("order"),
            Constants$root.C_LONG$LAYOUT.withName("nb_channels"),
            MemoryLayout.unionLayout(
                Constants$root.C_LONG_LONG$LAYOUT.withName("mask"),
                Constants$root.C_POINTER$LAYOUT.withName("map")
            ).withName("u"),
            Constants$root.C_POINTER$LAYOUT.withName("opaque")
        ).withName("ch_layout"),
        Constants$root.C_LONG_LONG$LAYOUT.withName("duration")
    ).withName("AVFrame");
    public static MemoryLayout $LAYOUT() {
        return AVFrame.$struct$LAYOUT;
    }
    public static MemorySegment data$slice(MemorySegment seg) {
        return seg.asSlice(0, 64);
    }
    public static MemorySegment linesize$slice(MemorySegment seg) {
        return seg.asSlice(64, 32);
    }
    static final VarHandle extended_data$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("extended_data"));
    public static VarHandle extended_data$VH() {
        return AVFrame.extended_data$VH;
    }
    /**
     * Getter for field:
     * {@snippet :
     * uint8_t** extended_data;
     * }
     */
    public static MemorySegment extended_data$get(MemorySegment seg) {
        return (java.lang.foreign.MemorySegment)AVFrame.extended_data$VH.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * uint8_t** extended_data;
     * }
     */
    public static void extended_data$set(MemorySegment seg, MemorySegment x) {
        AVFrame.extended_data$VH.set(seg, x);
    }
    public static MemorySegment extended_data$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemorySegment)AVFrame.extended_data$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void extended_data$set(MemorySegment seg, long index, MemorySegment x) {
        AVFrame.extended_data$VH.set(seg.asSlice(index*sizeof()), x);
    }
    static final VarHandle width$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("width"));
    public static VarHandle width$VH() {
        return AVFrame.width$VH;
    }
    /**
     * Getter for field:
     * {@snippet :
     * int width;
     * }
     */
    public static int width$get(MemorySegment seg) {
        return (int)AVFrame.width$VH.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * int width;
     * }
     */
    public static void width$set(MemorySegment seg, int x) {
        AVFrame.width$VH.set(seg, x);
    }
    public static int width$get(MemorySegment seg, long index) {
        return (int)AVFrame.width$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void width$set(MemorySegment seg, long index, int x) {
        AVFrame.width$VH.set(seg.asSlice(index*sizeof()), x);
    }
    static final VarHandle height$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("height"));
    public static VarHandle height$VH() {
        return AVFrame.height$VH;
    }
    /**
     * Getter for field:
     * {@snippet :
     * int height;
     * }
     */
    public static int height$get(MemorySegment seg) {
        return (int)AVFrame.height$VH.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * int height;
     * }
     */
    public static void height$set(MemorySegment seg, int x) {
        AVFrame.height$VH.set(seg, x);
    }
    public static int height$get(MemorySegment seg, long index) {
        return (int)AVFrame.height$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void height$set(MemorySegment seg, long index, int x) {
        AVFrame.height$VH.set(seg.asSlice(index*sizeof()), x);
    }
    static final VarHandle nb_samples$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("nb_samples"));
    public static VarHandle nb_samples$VH() {
        return AVFrame.nb_samples$VH;
    }
    /**
     * Getter for field:
     * {@snippet :
     * int nb_samples;
     * }
     */
    public static int nb_samples$get(MemorySegment seg) {
        return (int)AVFrame.nb_samples$VH.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * int nb_samples;
     * }
     */
    public static void nb_samples$set(MemorySegment seg, int x) {
        AVFrame.nb_samples$VH.set(seg, x);
    }
    public static int nb_samples$get(MemorySegment seg, long index) {
        return (int)AVFrame.nb_samples$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void nb_samples$set(MemorySegment seg, long index, int x) {
        AVFrame.nb_samples$VH.set(seg.asSlice(index*sizeof()), x);
    }
    static final VarHandle format$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("format"));
    public static VarHandle format$VH() {
        return AVFrame.format$VH;
    }
    /**
     * Getter for field:
     * {@snippet :
     * int format;
     * }
     */
    public static int format$get(MemorySegment seg) {
        return (int)AVFrame.format$VH.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * int format;
     * }
     */
    public static void format$set(MemorySegment seg, int x) {
        AVFrame.format$VH.set(seg, x);
    }
    public static int format$get(MemorySegment seg, long index) {
        return (int)AVFrame.format$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void format$set(MemorySegment seg, long index, int x) {
        AVFrame.format$VH.set(seg.asSlice(index*sizeof()), x);
    }
    static final VarHandle key_frame$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("key_frame"));
    public static VarHandle key_frame$VH() {
        return AVFrame.key_frame$VH;
    }
    /**
     * Getter for field:
     * {@snippet :
     * int key_frame;
     * }
     */
    public static int key_frame$get(MemorySegment seg) {
        return (int)AVFrame.key_frame$VH.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * int key_frame;
     * }
     */
    public static void key_frame$set(MemorySegment seg, int x) {
        AVFrame.key_frame$VH.set(seg, x);
    }
    public static int key_frame$get(MemorySegment seg, long index) {
        return (int)AVFrame.key_frame$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void key_frame$set(MemorySegment seg, long index, int x) {
        AVFrame.key_frame$VH.set(seg.asSlice(index*sizeof()), x);
    }
    static final VarHandle pict_type$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("pict_type"));
    public static VarHandle pict_type$VH() {
        return AVFrame.pict_type$VH;
    }
    /**
     * Getter for field:
     * {@snippet :
     * enum AVPictureType pict_type;
     * }
     */
    public static int pict_type$get(MemorySegment seg) {
        return (int)AVFrame.pict_type$VH.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * enum AVPictureType pict_type;
     * }
     */
    public static void pict_type$set(MemorySegment seg, int x) {
        AVFrame.pict_type$VH.set(seg, x);
    }
    public static int pict_type$get(MemorySegment seg, long index) {
        return (int)AVFrame.pict_type$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void pict_type$set(MemorySegment seg, long index, int x) {
        AVFrame.pict_type$VH.set(seg.asSlice(index*sizeof()), x);
    }
    public static MemorySegment sample_aspect_ratio$slice(MemorySegment seg) {
        return seg.asSlice(128, 8);
    }
    static final VarHandle pts$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("pts"));
    public static VarHandle pts$VH() {
        return AVFrame.pts$VH;
    }
    /**
     * Getter for field:
     * {@snippet :
     * int64_t pts;
     * }
     */
    public static long pts$get(MemorySegment seg) {
        return (long)AVFrame.pts$VH.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * int64_t pts;
     * }
     */
    public static void pts$set(MemorySegment seg, long x) {
        AVFrame.pts$VH.set(seg, x);
    }
    public static long pts$get(MemorySegment seg, long index) {
        return (long)AVFrame.pts$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void pts$set(MemorySegment seg, long index, long x) {
        AVFrame.pts$VH.set(seg.asSlice(index*sizeof()), x);
    }
    static final VarHandle pkt_dts$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("pkt_dts"));
    public static VarHandle pkt_dts$VH() {
        return AVFrame.pkt_dts$VH;
    }
    /**
     * Getter for field:
     * {@snippet :
     * int64_t pkt_dts;
     * }
     */
    public static long pkt_dts$get(MemorySegment seg) {
        return (long)AVFrame.pkt_dts$VH.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * int64_t pkt_dts;
     * }
     */
    public static void pkt_dts$set(MemorySegment seg, long x) {
        AVFrame.pkt_dts$VH.set(seg, x);
    }
    public static long pkt_dts$get(MemorySegment seg, long index) {
        return (long)AVFrame.pkt_dts$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void pkt_dts$set(MemorySegment seg, long index, long x) {
        AVFrame.pkt_dts$VH.set(seg.asSlice(index*sizeof()), x);
    }
    public static MemorySegment time_base$slice(MemorySegment seg) {
        return seg.asSlice(152, 8);
    }
    static final VarHandle coded_picture_number$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("coded_picture_number"));
    public static VarHandle coded_picture_number$VH() {
        return AVFrame.coded_picture_number$VH;
    }
    /**
     * Getter for field:
     * {@snippet :
     * int coded_picture_number;
     * }
     */
    public static int coded_picture_number$get(MemorySegment seg) {
        return (int)AVFrame.coded_picture_number$VH.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * int coded_picture_number;
     * }
     */
    public static void coded_picture_number$set(MemorySegment seg, int x) {
        AVFrame.coded_picture_number$VH.set(seg, x);
    }
    public static int coded_picture_number$get(MemorySegment seg, long index) {
        return (int)AVFrame.coded_picture_number$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void coded_picture_number$set(MemorySegment seg, long index, int x) {
        AVFrame.coded_picture_number$VH.set(seg.asSlice(index*sizeof()), x);
    }
    static final VarHandle display_picture_number$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("display_picture_number"));
    public static VarHandle display_picture_number$VH() {
        return AVFrame.display_picture_number$VH;
    }
    /**
     * Getter for field:
     * {@snippet :
     * int display_picture_number;
     * }
     */
    public static int display_picture_number$get(MemorySegment seg) {
        return (int)AVFrame.display_picture_number$VH.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * int display_picture_number;
     * }
     */
    public static void display_picture_number$set(MemorySegment seg, int x) {
        AVFrame.display_picture_number$VH.set(seg, x);
    }
    public static int display_picture_number$get(MemorySegment seg, long index) {
        return (int)AVFrame.display_picture_number$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void display_picture_number$set(MemorySegment seg, long index, int x) {
        AVFrame.display_picture_number$VH.set(seg.asSlice(index*sizeof()), x);
    }
    static final VarHandle quality$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("quality"));
    public static VarHandle quality$VH() {
        return AVFrame.quality$VH;
    }
    /**
     * Getter for field:
     * {@snippet :
     * int quality;
     * }
     */
    public static int quality$get(MemorySegment seg) {
        return (int)AVFrame.quality$VH.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * int quality;
     * }
     */
    public static void quality$set(MemorySegment seg, int x) {
        AVFrame.quality$VH.set(seg, x);
    }
    public static int quality$get(MemorySegment seg, long index) {
        return (int)AVFrame.quality$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void quality$set(MemorySegment seg, long index, int x) {
        AVFrame.quality$VH.set(seg.asSlice(index*sizeof()), x);
    }
    static final VarHandle opaque$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("opaque"));
    public static VarHandle opaque$VH() {
        return AVFrame.opaque$VH;
    }
    /**
     * Getter for field:
     * {@snippet :
     * void* opaque;
     * }
     */
    public static MemorySegment opaque$get(MemorySegment seg) {
        return (java.lang.foreign.MemorySegment)AVFrame.opaque$VH.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * void* opaque;
     * }
     */
    public static void opaque$set(MemorySegment seg, MemorySegment x) {
        AVFrame.opaque$VH.set(seg, x);
    }
    public static MemorySegment opaque$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemorySegment)AVFrame.opaque$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void opaque$set(MemorySegment seg, long index, MemorySegment x) {
        AVFrame.opaque$VH.set(seg.asSlice(index*sizeof()), x);
    }
    static final VarHandle repeat_pict$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("repeat_pict"));
    public static VarHandle repeat_pict$VH() {
        return AVFrame.repeat_pict$VH;
    }
    /**
     * Getter for field:
     * {@snippet :
     * int repeat_pict;
     * }
     */
    public static int repeat_pict$get(MemorySegment seg) {
        return (int)AVFrame.repeat_pict$VH.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * int repeat_pict;
     * }
     */
    public static void repeat_pict$set(MemorySegment seg, int x) {
        AVFrame.repeat_pict$VH.set(seg, x);
    }
    public static int repeat_pict$get(MemorySegment seg, long index) {
        return (int)AVFrame.repeat_pict$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void repeat_pict$set(MemorySegment seg, long index, int x) {
        AVFrame.repeat_pict$VH.set(seg.asSlice(index*sizeof()), x);
    }
    static final VarHandle interlaced_frame$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("interlaced_frame"));
    public static VarHandle interlaced_frame$VH() {
        return AVFrame.interlaced_frame$VH;
    }
    /**
     * Getter for field:
     * {@snippet :
     * int interlaced_frame;
     * }
     */
    public static int interlaced_frame$get(MemorySegment seg) {
        return (int)AVFrame.interlaced_frame$VH.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * int interlaced_frame;
     * }
     */
    public static void interlaced_frame$set(MemorySegment seg, int x) {
        AVFrame.interlaced_frame$VH.set(seg, x);
    }
    public static int interlaced_frame$get(MemorySegment seg, long index) {
        return (int)AVFrame.interlaced_frame$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void interlaced_frame$set(MemorySegment seg, long index, int x) {
        AVFrame.interlaced_frame$VH.set(seg.asSlice(index*sizeof()), x);
    }
    static final VarHandle top_field_first$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("top_field_first"));
    public static VarHandle top_field_first$VH() {
        return AVFrame.top_field_first$VH;
    }
    /**
     * Getter for field:
     * {@snippet :
     * int top_field_first;
     * }
     */
    public static int top_field_first$get(MemorySegment seg) {
        return (int)AVFrame.top_field_first$VH.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * int top_field_first;
     * }
     */
    public static void top_field_first$set(MemorySegment seg, int x) {
        AVFrame.top_field_first$VH.set(seg, x);
    }
    public static int top_field_first$get(MemorySegment seg, long index) {
        return (int)AVFrame.top_field_first$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void top_field_first$set(MemorySegment seg, long index, int x) {
        AVFrame.top_field_first$VH.set(seg.asSlice(index*sizeof()), x);
    }
    static final VarHandle palette_has_changed$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("palette_has_changed"));
    public static VarHandle palette_has_changed$VH() {
        return AVFrame.palette_has_changed$VH;
    }
    /**
     * Getter for field:
     * {@snippet :
     * int palette_has_changed;
     * }
     */
    public static int palette_has_changed$get(MemorySegment seg) {
        return (int)AVFrame.palette_has_changed$VH.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * int palette_has_changed;
     * }
     */
    public static void palette_has_changed$set(MemorySegment seg, int x) {
        AVFrame.palette_has_changed$VH.set(seg, x);
    }
    public static int palette_has_changed$get(MemorySegment seg, long index) {
        return (int)AVFrame.palette_has_changed$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void palette_has_changed$set(MemorySegment seg, long index, int x) {
        AVFrame.palette_has_changed$VH.set(seg.asSlice(index*sizeof()), x);
    }
    static final VarHandle reordered_opaque$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("reordered_opaque"));
    public static VarHandle reordered_opaque$VH() {
        return AVFrame.reordered_opaque$VH;
    }
    /**
     * Getter for field:
     * {@snippet :
     * int64_t reordered_opaque;
     * }
     */
    public static long reordered_opaque$get(MemorySegment seg) {
        return (long)AVFrame.reordered_opaque$VH.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * int64_t reordered_opaque;
     * }
     */
    public static void reordered_opaque$set(MemorySegment seg, long x) {
        AVFrame.reordered_opaque$VH.set(seg, x);
    }
    public static long reordered_opaque$get(MemorySegment seg, long index) {
        return (long)AVFrame.reordered_opaque$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void reordered_opaque$set(MemorySegment seg, long index, long x) {
        AVFrame.reordered_opaque$VH.set(seg.asSlice(index*sizeof()), x);
    }
    static final VarHandle sample_rate$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("sample_rate"));
    public static VarHandle sample_rate$VH() {
        return AVFrame.sample_rate$VH;
    }
    /**
     * Getter for field:
     * {@snippet :
     * int sample_rate;
     * }
     */
    public static int sample_rate$get(MemorySegment seg) {
        return (int)AVFrame.sample_rate$VH.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * int sample_rate;
     * }
     */
    public static void sample_rate$set(MemorySegment seg, int x) {
        AVFrame.sample_rate$VH.set(seg, x);
    }
    public static int sample_rate$get(MemorySegment seg, long index) {
        return (int)AVFrame.sample_rate$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void sample_rate$set(MemorySegment seg, long index, int x) {
        AVFrame.sample_rate$VH.set(seg.asSlice(index*sizeof()), x);
    }
    static final VarHandle channel_layout$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("channel_layout"));
    public static VarHandle channel_layout$VH() {
        return AVFrame.channel_layout$VH;
    }
    /**
     * Getter for field:
     * {@snippet :
     * uint64_t channel_layout;
     * }
     */
    public static long channel_layout$get(MemorySegment seg) {
        return (long)AVFrame.channel_layout$VH.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * uint64_t channel_layout;
     * }
     */
    public static void channel_layout$set(MemorySegment seg, long x) {
        AVFrame.channel_layout$VH.set(seg, x);
    }
    public static long channel_layout$get(MemorySegment seg, long index) {
        return (long)AVFrame.channel_layout$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void channel_layout$set(MemorySegment seg, long index, long x) {
        AVFrame.channel_layout$VH.set(seg.asSlice(index*sizeof()), x);
    }
    public static MemorySegment buf$slice(MemorySegment seg) {
        return seg.asSlice(224, 64);
    }
    static final VarHandle extended_buf$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("extended_buf"));
    public static VarHandle extended_buf$VH() {
        return AVFrame.extended_buf$VH;
    }
    /**
     * Getter for field:
     * {@snippet :
     * AVBufferRef** extended_buf;
     * }
     */
    public static MemorySegment extended_buf$get(MemorySegment seg) {
        return (java.lang.foreign.MemorySegment)AVFrame.extended_buf$VH.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * AVBufferRef** extended_buf;
     * }
     */
    public static void extended_buf$set(MemorySegment seg, MemorySegment x) {
        AVFrame.extended_buf$VH.set(seg, x);
    }
    public static MemorySegment extended_buf$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemorySegment)AVFrame.extended_buf$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void extended_buf$set(MemorySegment seg, long index, MemorySegment x) {
        AVFrame.extended_buf$VH.set(seg.asSlice(index*sizeof()), x);
    }
    static final VarHandle nb_extended_buf$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("nb_extended_buf"));
    public static VarHandle nb_extended_buf$VH() {
        return AVFrame.nb_extended_buf$VH;
    }
    /**
     * Getter for field:
     * {@snippet :
     * int nb_extended_buf;
     * }
     */
    public static int nb_extended_buf$get(MemorySegment seg) {
        return (int)AVFrame.nb_extended_buf$VH.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * int nb_extended_buf;
     * }
     */
    public static void nb_extended_buf$set(MemorySegment seg, int x) {
        AVFrame.nb_extended_buf$VH.set(seg, x);
    }
    public static int nb_extended_buf$get(MemorySegment seg, long index) {
        return (int)AVFrame.nb_extended_buf$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void nb_extended_buf$set(MemorySegment seg, long index, int x) {
        AVFrame.nb_extended_buf$VH.set(seg.asSlice(index*sizeof()), x);
    }
    static final VarHandle side_data$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("side_data"));
    public static VarHandle side_data$VH() {
        return AVFrame.side_data$VH;
    }
    /**
     * Getter for field:
     * {@snippet :
     * AVFrameSideData** side_data;
     * }
     */
    public static MemorySegment side_data$get(MemorySegment seg) {
        return (java.lang.foreign.MemorySegment)AVFrame.side_data$VH.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * AVFrameSideData** side_data;
     * }
     */
    public static void side_data$set(MemorySegment seg, MemorySegment x) {
        AVFrame.side_data$VH.set(seg, x);
    }
    public static MemorySegment side_data$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemorySegment)AVFrame.side_data$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void side_data$set(MemorySegment seg, long index, MemorySegment x) {
        AVFrame.side_data$VH.set(seg.asSlice(index*sizeof()), x);
    }
    static final VarHandle nb_side_data$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("nb_side_data"));
    public static VarHandle nb_side_data$VH() {
        return AVFrame.nb_side_data$VH;
    }
    /**
     * Getter for field:
     * {@snippet :
     * int nb_side_data;
     * }
     */
    public static int nb_side_data$get(MemorySegment seg) {
        return (int)AVFrame.nb_side_data$VH.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * int nb_side_data;
     * }
     */
    public static void nb_side_data$set(MemorySegment seg, int x) {
        AVFrame.nb_side_data$VH.set(seg, x);
    }
    public static int nb_side_data$get(MemorySegment seg, long index) {
        return (int)AVFrame.nb_side_data$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void nb_side_data$set(MemorySegment seg, long index, int x) {
        AVFrame.nb_side_data$VH.set(seg.asSlice(index*sizeof()), x);
    }
    static final VarHandle flags$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("flags"));
    public static VarHandle flags$VH() {
        return AVFrame.flags$VH;
    }
    /**
     * Getter for field:
     * {@snippet :
     * int flags;
     * }
     */
    public static int flags$get(MemorySegment seg) {
        return (int)AVFrame.flags$VH.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * int flags;
     * }
     */
    public static void flags$set(MemorySegment seg, int x) {
        AVFrame.flags$VH.set(seg, x);
    }
    public static int flags$get(MemorySegment seg, long index) {
        return (int)AVFrame.flags$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void flags$set(MemorySegment seg, long index, int x) {
        AVFrame.flags$VH.set(seg.asSlice(index*sizeof()), x);
    }
    static final VarHandle color_range$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("color_range"));
    public static VarHandle color_range$VH() {
        return AVFrame.color_range$VH;
    }
    /**
     * Getter for field:
     * {@snippet :
     * enum AVColorRange color_range;
     * }
     */
    public static int color_range$get(MemorySegment seg) {
        return (int)AVFrame.color_range$VH.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * enum AVColorRange color_range;
     * }
     */
    public static void color_range$set(MemorySegment seg, int x) {
        AVFrame.color_range$VH.set(seg, x);
    }
    public static int color_range$get(MemorySegment seg, long index) {
        return (int)AVFrame.color_range$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void color_range$set(MemorySegment seg, long index, int x) {
        AVFrame.color_range$VH.set(seg.asSlice(index*sizeof()), x);
    }
    static final VarHandle color_primaries$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("color_primaries"));
    public static VarHandle color_primaries$VH() {
        return AVFrame.color_primaries$VH;
    }
    /**
     * Getter for field:
     * {@snippet :
     * enum AVColorPrimaries color_primaries;
     * }
     */
    public static int color_primaries$get(MemorySegment seg) {
        return (int)AVFrame.color_primaries$VH.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * enum AVColorPrimaries color_primaries;
     * }
     */
    public static void color_primaries$set(MemorySegment seg, int x) {
        AVFrame.color_primaries$VH.set(seg, x);
    }
    public static int color_primaries$get(MemorySegment seg, long index) {
        return (int)AVFrame.color_primaries$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void color_primaries$set(MemorySegment seg, long index, int x) {
        AVFrame.color_primaries$VH.set(seg.asSlice(index*sizeof()), x);
    }
    static final VarHandle color_trc$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("color_trc"));
    public static VarHandle color_trc$VH() {
        return AVFrame.color_trc$VH;
    }
    /**
     * Getter for field:
     * {@snippet :
     * enum AVColorTransferCharacteristic color_trc;
     * }
     */
    public static int color_trc$get(MemorySegment seg) {
        return (int)AVFrame.color_trc$VH.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * enum AVColorTransferCharacteristic color_trc;
     * }
     */
    public static void color_trc$set(MemorySegment seg, int x) {
        AVFrame.color_trc$VH.set(seg, x);
    }
    public static int color_trc$get(MemorySegment seg, long index) {
        return (int)AVFrame.color_trc$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void color_trc$set(MemorySegment seg, long index, int x) {
        AVFrame.color_trc$VH.set(seg.asSlice(index*sizeof()), x);
    }
    static final VarHandle colorspace$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("colorspace"));
    public static VarHandle colorspace$VH() {
        return AVFrame.colorspace$VH;
    }
    /**
     * Getter for field:
     * {@snippet :
     * enum AVColorSpace colorspace;
     * }
     */
    public static int colorspace$get(MemorySegment seg) {
        return (int)AVFrame.colorspace$VH.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * enum AVColorSpace colorspace;
     * }
     */
    public static void colorspace$set(MemorySegment seg, int x) {
        AVFrame.colorspace$VH.set(seg, x);
    }
    public static int colorspace$get(MemorySegment seg, long index) {
        return (int)AVFrame.colorspace$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void colorspace$set(MemorySegment seg, long index, int x) {
        AVFrame.colorspace$VH.set(seg.asSlice(index*sizeof()), x);
    }
    static final VarHandle chroma_location$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("chroma_location"));
    public static VarHandle chroma_location$VH() {
        return AVFrame.chroma_location$VH;
    }
    /**
     * Getter for field:
     * {@snippet :
     * enum AVChromaLocation chroma_location;
     * }
     */
    public static int chroma_location$get(MemorySegment seg) {
        return (int)AVFrame.chroma_location$VH.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * enum AVChromaLocation chroma_location;
     * }
     */
    public static void chroma_location$set(MemorySegment seg, int x) {
        AVFrame.chroma_location$VH.set(seg, x);
    }
    public static int chroma_location$get(MemorySegment seg, long index) {
        return (int)AVFrame.chroma_location$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void chroma_location$set(MemorySegment seg, long index, int x) {
        AVFrame.chroma_location$VH.set(seg.asSlice(index*sizeof()), x);
    }
    static final VarHandle best_effort_timestamp$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("best_effort_timestamp"));
    public static VarHandle best_effort_timestamp$VH() {
        return AVFrame.best_effort_timestamp$VH;
    }
    /**
     * Getter for field:
     * {@snippet :
     * int64_t best_effort_timestamp;
     * }
     */
    public static long best_effort_timestamp$get(MemorySegment seg) {
        return (long)AVFrame.best_effort_timestamp$VH.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * int64_t best_effort_timestamp;
     * }
     */
    public static void best_effort_timestamp$set(MemorySegment seg, long x) {
        AVFrame.best_effort_timestamp$VH.set(seg, x);
    }
    public static long best_effort_timestamp$get(MemorySegment seg, long index) {
        return (long)AVFrame.best_effort_timestamp$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void best_effort_timestamp$set(MemorySegment seg, long index, long x) {
        AVFrame.best_effort_timestamp$VH.set(seg.asSlice(index*sizeof()), x);
    }
    static final VarHandle pkt_pos$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("pkt_pos"));
    public static VarHandle pkt_pos$VH() {
        return AVFrame.pkt_pos$VH;
    }
    /**
     * Getter for field:
     * {@snippet :
     * int64_t pkt_pos;
     * }
     */
    public static long pkt_pos$get(MemorySegment seg) {
        return (long)AVFrame.pkt_pos$VH.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * int64_t pkt_pos;
     * }
     */
    public static void pkt_pos$set(MemorySegment seg, long x) {
        AVFrame.pkt_pos$VH.set(seg, x);
    }
    public static long pkt_pos$get(MemorySegment seg, long index) {
        return (long)AVFrame.pkt_pos$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void pkt_pos$set(MemorySegment seg, long index, long x) {
        AVFrame.pkt_pos$VH.set(seg.asSlice(index*sizeof()), x);
    }
    static final VarHandle pkt_duration$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("pkt_duration"));
    public static VarHandle pkt_duration$VH() {
        return AVFrame.pkt_duration$VH;
    }
    /**
     * Getter for field:
     * {@snippet :
     * int64_t pkt_duration;
     * }
     */
    public static long pkt_duration$get(MemorySegment seg) {
        return (long)AVFrame.pkt_duration$VH.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * int64_t pkt_duration;
     * }
     */
    public static void pkt_duration$set(MemorySegment seg, long x) {
        AVFrame.pkt_duration$VH.set(seg, x);
    }
    public static long pkt_duration$get(MemorySegment seg, long index) {
        return (long)AVFrame.pkt_duration$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void pkt_duration$set(MemorySegment seg, long index, long x) {
        AVFrame.pkt_duration$VH.set(seg.asSlice(index*sizeof()), x);
    }
    static final VarHandle metadata$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("metadata"));
    public static VarHandle metadata$VH() {
        return AVFrame.metadata$VH;
    }
    /**
     * Getter for field:
     * {@snippet :
     * AVDictionary* metadata;
     * }
     */
    public static MemorySegment metadata$get(MemorySegment seg) {
        return (java.lang.foreign.MemorySegment)AVFrame.metadata$VH.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * AVDictionary* metadata;
     * }
     */
    public static void metadata$set(MemorySegment seg, MemorySegment x) {
        AVFrame.metadata$VH.set(seg, x);
    }
    public static MemorySegment metadata$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemorySegment)AVFrame.metadata$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void metadata$set(MemorySegment seg, long index, MemorySegment x) {
        AVFrame.metadata$VH.set(seg.asSlice(index*sizeof()), x);
    }
    static final VarHandle decode_error_flags$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("decode_error_flags"));
    public static VarHandle decode_error_flags$VH() {
        return AVFrame.decode_error_flags$VH;
    }
    /**
     * Getter for field:
     * {@snippet :
     * int decode_error_flags;
     * }
     */
    public static int decode_error_flags$get(MemorySegment seg) {
        return (int)AVFrame.decode_error_flags$VH.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * int decode_error_flags;
     * }
     */
    public static void decode_error_flags$set(MemorySegment seg, int x) {
        AVFrame.decode_error_flags$VH.set(seg, x);
    }
    public static int decode_error_flags$get(MemorySegment seg, long index) {
        return (int)AVFrame.decode_error_flags$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void decode_error_flags$set(MemorySegment seg, long index, int x) {
        AVFrame.decode_error_flags$VH.set(seg.asSlice(index*sizeof()), x);
    }
    static final VarHandle channels$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("channels"));
    public static VarHandle channels$VH() {
        return AVFrame.channels$VH;
    }
    /**
     * Getter for field:
     * {@snippet :
     * int channels;
     * }
     */
    public static int channels$get(MemorySegment seg) {
        return (int)AVFrame.channels$VH.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * int channels;
     * }
     */
    public static void channels$set(MemorySegment seg, int x) {
        AVFrame.channels$VH.set(seg, x);
    }
    public static int channels$get(MemorySegment seg, long index) {
        return (int)AVFrame.channels$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void channels$set(MemorySegment seg, long index, int x) {
        AVFrame.channels$VH.set(seg.asSlice(index*sizeof()), x);
    }
    static final VarHandle pkt_size$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("pkt_size"));
    public static VarHandle pkt_size$VH() {
        return AVFrame.pkt_size$VH;
    }
    /**
     * Getter for field:
     * {@snippet :
     * int pkt_size;
     * }
     */
    public static int pkt_size$get(MemorySegment seg) {
        return (int)AVFrame.pkt_size$VH.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * int pkt_size;
     * }
     */
    public static void pkt_size$set(MemorySegment seg, int x) {
        AVFrame.pkt_size$VH.set(seg, x);
    }
    public static int pkt_size$get(MemorySegment seg, long index) {
        return (int)AVFrame.pkt_size$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void pkt_size$set(MemorySegment seg, long index, int x) {
        AVFrame.pkt_size$VH.set(seg.asSlice(index*sizeof()), x);
    }
    static final VarHandle hw_frames_ctx$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("hw_frames_ctx"));
    public static VarHandle hw_frames_ctx$VH() {
        return AVFrame.hw_frames_ctx$VH;
    }
    /**
     * Getter for field:
     * {@snippet :
     * AVBufferRef* hw_frames_ctx;
     * }
     */
    public static MemorySegment hw_frames_ctx$get(MemorySegment seg) {
        return (java.lang.foreign.MemorySegment)AVFrame.hw_frames_ctx$VH.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * AVBufferRef* hw_frames_ctx;
     * }
     */
    public static void hw_frames_ctx$set(MemorySegment seg, MemorySegment x) {
        AVFrame.hw_frames_ctx$VH.set(seg, x);
    }
    public static MemorySegment hw_frames_ctx$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemorySegment)AVFrame.hw_frames_ctx$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void hw_frames_ctx$set(MemorySegment seg, long index, MemorySegment x) {
        AVFrame.hw_frames_ctx$VH.set(seg.asSlice(index*sizeof()), x);
    }
    static final VarHandle opaque_ref$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("opaque_ref"));
    public static VarHandle opaque_ref$VH() {
        return AVFrame.opaque_ref$VH;
    }
    /**
     * Getter for field:
     * {@snippet :
     * AVBufferRef* opaque_ref;
     * }
     */
    public static MemorySegment opaque_ref$get(MemorySegment seg) {
        return (java.lang.foreign.MemorySegment)AVFrame.opaque_ref$VH.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * AVBufferRef* opaque_ref;
     * }
     */
    public static void opaque_ref$set(MemorySegment seg, MemorySegment x) {
        AVFrame.opaque_ref$VH.set(seg, x);
    }
    public static MemorySegment opaque_ref$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemorySegment)AVFrame.opaque_ref$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void opaque_ref$set(MemorySegment seg, long index, MemorySegment x) {
        AVFrame.opaque_ref$VH.set(seg.asSlice(index*sizeof()), x);
    }
    static final VarHandle crop_top$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("crop_top"));
    public static VarHandle crop_top$VH() {
        return AVFrame.crop_top$VH;
    }
    /**
     * Getter for field:
     * {@snippet :
     * size_t crop_top;
     * }
     */
    public static long crop_top$get(MemorySegment seg) {
        return (long)AVFrame.crop_top$VH.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * size_t crop_top;
     * }
     */
    public static void crop_top$set(MemorySegment seg, long x) {
        AVFrame.crop_top$VH.set(seg, x);
    }
    public static long crop_top$get(MemorySegment seg, long index) {
        return (long)AVFrame.crop_top$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void crop_top$set(MemorySegment seg, long index, long x) {
        AVFrame.crop_top$VH.set(seg.asSlice(index*sizeof()), x);
    }
    static final VarHandle crop_bottom$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("crop_bottom"));
    public static VarHandle crop_bottom$VH() {
        return AVFrame.crop_bottom$VH;
    }
    /**
     * Getter for field:
     * {@snippet :
     * size_t crop_bottom;
     * }
     */
    public static long crop_bottom$get(MemorySegment seg) {
        return (long)AVFrame.crop_bottom$VH.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * size_t crop_bottom;
     * }
     */
    public static void crop_bottom$set(MemorySegment seg, long x) {
        AVFrame.crop_bottom$VH.set(seg, x);
    }
    public static long crop_bottom$get(MemorySegment seg, long index) {
        return (long)AVFrame.crop_bottom$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void crop_bottom$set(MemorySegment seg, long index, long x) {
        AVFrame.crop_bottom$VH.set(seg.asSlice(index*sizeof()), x);
    }
    static final VarHandle crop_left$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("crop_left"));
    public static VarHandle crop_left$VH() {
        return AVFrame.crop_left$VH;
    }
    /**
     * Getter for field:
     * {@snippet :
     * size_t crop_left;
     * }
     */
    public static long crop_left$get(MemorySegment seg) {
        return (long)AVFrame.crop_left$VH.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * size_t crop_left;
     * }
     */
    public static void crop_left$set(MemorySegment seg, long x) {
        AVFrame.crop_left$VH.set(seg, x);
    }
    public static long crop_left$get(MemorySegment seg, long index) {
        return (long)AVFrame.crop_left$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void crop_left$set(MemorySegment seg, long index, long x) {
        AVFrame.crop_left$VH.set(seg.asSlice(index*sizeof()), x);
    }
    static final VarHandle crop_right$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("crop_right"));
    public static VarHandle crop_right$VH() {
        return AVFrame.crop_right$VH;
    }
    /**
     * Getter for field:
     * {@snippet :
     * size_t crop_right;
     * }
     */
    public static long crop_right$get(MemorySegment seg) {
        return (long)AVFrame.crop_right$VH.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * size_t crop_right;
     * }
     */
    public static void crop_right$set(MemorySegment seg, long x) {
        AVFrame.crop_right$VH.set(seg, x);
    }
    public static long crop_right$get(MemorySegment seg, long index) {
        return (long)AVFrame.crop_right$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void crop_right$set(MemorySegment seg, long index, long x) {
        AVFrame.crop_right$VH.set(seg.asSlice(index*sizeof()), x);
    }
    static final VarHandle private_ref$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("private_ref"));
    public static VarHandle private_ref$VH() {
        return AVFrame.private_ref$VH;
    }
    /**
     * Getter for field:
     * {@snippet :
     * AVBufferRef* private_ref;
     * }
     */
    public static MemorySegment private_ref$get(MemorySegment seg) {
        return (java.lang.foreign.MemorySegment)AVFrame.private_ref$VH.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * AVBufferRef* private_ref;
     * }
     */
    public static void private_ref$set(MemorySegment seg, MemorySegment x) {
        AVFrame.private_ref$VH.set(seg, x);
    }
    public static MemorySegment private_ref$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemorySegment)AVFrame.private_ref$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void private_ref$set(MemorySegment seg, long index, MemorySegment x) {
        AVFrame.private_ref$VH.set(seg.asSlice(index*sizeof()), x);
    }
    public static MemorySegment ch_layout$slice(MemorySegment seg) {
        return seg.asSlice(448, 24);
    }
    static final VarHandle duration$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("duration"));
    public static VarHandle duration$VH() {
        return AVFrame.duration$VH;
    }
    /**
     * Getter for field:
     * {@snippet :
     * int64_t duration;
     * }
     */
    public static long duration$get(MemorySegment seg) {
        return (long)AVFrame.duration$VH.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * int64_t duration;
     * }
     */
    public static void duration$set(MemorySegment seg, long x) {
        AVFrame.duration$VH.set(seg, x);
    }
    public static long duration$get(MemorySegment seg, long index) {
        return (long)AVFrame.duration$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void duration$set(MemorySegment seg, long index, long x) {
        AVFrame.duration$VH.set(seg.asSlice(index*sizeof()), x);
    }
    public static long sizeof() { return $LAYOUT().byteSize(); }
    public static MemorySegment allocate(SegmentAllocator allocator) { return allocator.allocate($LAYOUT()); }
    public static MemorySegment allocateArray(long len, SegmentAllocator allocator) {
        return allocator.allocate(MemoryLayout.sequenceLayout(len, $LAYOUT()));
    }
    public static MemorySegment ofAddress(MemorySegment addr, SegmentScope scope) { return RuntimeHelper.asArray(addr, $LAYOUT(), 1, scope); }
}


