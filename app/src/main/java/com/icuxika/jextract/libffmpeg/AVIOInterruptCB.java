// Generated by jextract

package com.icuxika.jextract.libffmpeg;

import java.lang.invoke.MethodHandle;
import java.lang.invoke.VarHandle;
import java.nio.ByteOrder;
import java.lang.foreign.*;
import static java.lang.foreign.ValueLayout.*;
/**
 * {@snippet :
 * struct AVIOInterruptCB {
 *     int (*callback)(void*);
 *     void* opaque;
 * };
 * }
 */
public class AVIOInterruptCB {

    static final StructLayout $struct$LAYOUT = MemoryLayout.structLayout(
        Constants$root.C_POINTER$LAYOUT.withName("callback"),
        Constants$root.C_POINTER$LAYOUT.withName("opaque")
    ).withName("AVIOInterruptCB");
    public static MemoryLayout $LAYOUT() {
        return AVIOInterruptCB.$struct$LAYOUT;
    }
    static final FunctionDescriptor callback$FUNC = FunctionDescriptor.of(Constants$root.C_LONG$LAYOUT,
        Constants$root.C_POINTER$LAYOUT
    );
    static final FunctionDescriptor callback_UP$FUNC = FunctionDescriptor.of(Constants$root.C_LONG$LAYOUT,
        Constants$root.C_POINTER$LAYOUT
    );
    static final MethodHandle callback_UP$MH = RuntimeHelper.upcallHandle(callback.class, "apply", AVIOInterruptCB.callback_UP$FUNC);
    static final FunctionDescriptor callback_DOWN$FUNC = FunctionDescriptor.of(Constants$root.C_LONG$LAYOUT,
        Constants$root.C_POINTER$LAYOUT
    );
    static final MethodHandle callback_DOWN$MH = RuntimeHelper.downcallHandle(
        AVIOInterruptCB.callback_DOWN$FUNC
    );
    /**
     * {@snippet :
 * int (*callback)(void*);
     * }
     */
    public interface callback {

        int apply(java.lang.foreign.MemorySegment _x0);
        static MemorySegment allocate(callback fi, SegmentScope scope) {
            return RuntimeHelper.upcallStub(AVIOInterruptCB.callback_UP$MH, fi, AVIOInterruptCB.callback$FUNC, scope);
        }
        static callback ofAddress(MemorySegment addr, SegmentScope scope) {
            MemorySegment symbol = MemorySegment.ofAddress(addr.address(), 0, scope);
            return (java.lang.foreign.MemorySegment __x0) -> {
                try {
                    return (int)AVIOInterruptCB.callback_DOWN$MH.invokeExact(symbol, __x0);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    static final VarHandle callback$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("callback"));
    public static VarHandle callback$VH() {
        return AVIOInterruptCB.callback$VH;
    }
    /**
     * Getter for field:
     * {@snippet :
     * int (*callback)(void*);
     * }
     */
    public static MemorySegment callback$get(MemorySegment seg) {
        return (java.lang.foreign.MemorySegment)AVIOInterruptCB.callback$VH.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * int (*callback)(void*);
     * }
     */
    public static void callback$set(MemorySegment seg, MemorySegment x) {
        AVIOInterruptCB.callback$VH.set(seg, x);
    }
    public static MemorySegment callback$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemorySegment)AVIOInterruptCB.callback$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void callback$set(MemorySegment seg, long index, MemorySegment x) {
        AVIOInterruptCB.callback$VH.set(seg.asSlice(index*sizeof()), x);
    }
    public static callback callback(MemorySegment segment, SegmentScope scope) {
        return callback.ofAddress(callback$get(segment), scope);
    }
    static final VarHandle opaque$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("opaque"));
    public static VarHandle opaque$VH() {
        return AVIOInterruptCB.opaque$VH;
    }
    /**
     * Getter for field:
     * {@snippet :
     * void* opaque;
     * }
     */
    public static MemorySegment opaque$get(MemorySegment seg) {
        return (java.lang.foreign.MemorySegment)AVIOInterruptCB.opaque$VH.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * void* opaque;
     * }
     */
    public static void opaque$set(MemorySegment seg, MemorySegment x) {
        AVIOInterruptCB.opaque$VH.set(seg, x);
    }
    public static MemorySegment opaque$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemorySegment)AVIOInterruptCB.opaque$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void opaque$set(MemorySegment seg, long index, MemorySegment x) {
        AVIOInterruptCB.opaque$VH.set(seg.asSlice(index*sizeof()), x);
    }
    public static long sizeof() { return $LAYOUT().byteSize(); }
    public static MemorySegment allocate(SegmentAllocator allocator) { return allocator.allocate($LAYOUT()); }
    public static MemorySegment allocateArray(long len, SegmentAllocator allocator) {
        return allocator.allocate(MemoryLayout.sequenceLayout(len, $LAYOUT()));
    }
    public static MemorySegment ofAddress(MemorySegment addr, SegmentScope scope) { return RuntimeHelper.asArray(addr, $LAYOUT(), 1, scope); }
}


