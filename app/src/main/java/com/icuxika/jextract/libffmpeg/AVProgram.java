// Generated by jextract

package com.icuxika.jextract.libffmpeg;

import java.lang.invoke.MethodHandle;
import java.lang.invoke.VarHandle;
import java.nio.ByteOrder;
import java.lang.foreign.*;
import static java.lang.foreign.ValueLayout.*;
/**
 * {@snippet :
 * struct AVProgram {
 *     int id;
 *     int flags;
 *     enum AVDiscard discard;
 *     unsigned int* stream_index;
 *     unsigned int nb_stream_indexes;
 *     AVDictionary* metadata;
 *     int program_num;
 *     int pmt_pid;
 *     int pcr_pid;
 *     int pmt_version;
 *     int64_t start_time;
 *     int64_t end_time;
 *     int64_t pts_wrap_reference;
 *     int pts_wrap_behavior;
 * };
 * }
 */
public class AVProgram {

    static final StructLayout $struct$LAYOUT = MemoryLayout.structLayout(
        Constants$root.C_LONG$LAYOUT.withName("id"),
        Constants$root.C_LONG$LAYOUT.withName("flags"),
        Constants$root.C_LONG$LAYOUT.withName("discard"),
        MemoryLayout.paddingLayout(32),
        Constants$root.C_POINTER$LAYOUT.withName("stream_index"),
        Constants$root.C_LONG$LAYOUT.withName("nb_stream_indexes"),
        MemoryLayout.paddingLayout(32),
        Constants$root.C_POINTER$LAYOUT.withName("metadata"),
        Constants$root.C_LONG$LAYOUT.withName("program_num"),
        Constants$root.C_LONG$LAYOUT.withName("pmt_pid"),
        Constants$root.C_LONG$LAYOUT.withName("pcr_pid"),
        Constants$root.C_LONG$LAYOUT.withName("pmt_version"),
        Constants$root.C_LONG_LONG$LAYOUT.withName("start_time"),
        Constants$root.C_LONG_LONG$LAYOUT.withName("end_time"),
        Constants$root.C_LONG_LONG$LAYOUT.withName("pts_wrap_reference"),
        Constants$root.C_LONG$LAYOUT.withName("pts_wrap_behavior"),
        MemoryLayout.paddingLayout(32)
    ).withName("AVProgram");
    public static MemoryLayout $LAYOUT() {
        return AVProgram.$struct$LAYOUT;
    }
    static final VarHandle id$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("id"));
    public static VarHandle id$VH() {
        return AVProgram.id$VH;
    }
    /**
     * Getter for field:
     * {@snippet :
     * int id;
     * }
     */
    public static int id$get(MemorySegment seg) {
        return (int)AVProgram.id$VH.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * int id;
     * }
     */
    public static void id$set(MemorySegment seg, int x) {
        AVProgram.id$VH.set(seg, x);
    }
    public static int id$get(MemorySegment seg, long index) {
        return (int)AVProgram.id$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void id$set(MemorySegment seg, long index, int x) {
        AVProgram.id$VH.set(seg.asSlice(index*sizeof()), x);
    }
    static final VarHandle flags$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("flags"));
    public static VarHandle flags$VH() {
        return AVProgram.flags$VH;
    }
    /**
     * Getter for field:
     * {@snippet :
     * int flags;
     * }
     */
    public static int flags$get(MemorySegment seg) {
        return (int)AVProgram.flags$VH.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * int flags;
     * }
     */
    public static void flags$set(MemorySegment seg, int x) {
        AVProgram.flags$VH.set(seg, x);
    }
    public static int flags$get(MemorySegment seg, long index) {
        return (int)AVProgram.flags$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void flags$set(MemorySegment seg, long index, int x) {
        AVProgram.flags$VH.set(seg.asSlice(index*sizeof()), x);
    }
    static final VarHandle discard$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("discard"));
    public static VarHandle discard$VH() {
        return AVProgram.discard$VH;
    }
    /**
     * Getter for field:
     * {@snippet :
     * enum AVDiscard discard;
     * }
     */
    public static int discard$get(MemorySegment seg) {
        return (int)AVProgram.discard$VH.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * enum AVDiscard discard;
     * }
     */
    public static void discard$set(MemorySegment seg, int x) {
        AVProgram.discard$VH.set(seg, x);
    }
    public static int discard$get(MemorySegment seg, long index) {
        return (int)AVProgram.discard$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void discard$set(MemorySegment seg, long index, int x) {
        AVProgram.discard$VH.set(seg.asSlice(index*sizeof()), x);
    }
    static final VarHandle stream_index$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("stream_index"));
    public static VarHandle stream_index$VH() {
        return AVProgram.stream_index$VH;
    }
    /**
     * Getter for field:
     * {@snippet :
     * unsigned int* stream_index;
     * }
     */
    public static MemorySegment stream_index$get(MemorySegment seg) {
        return (java.lang.foreign.MemorySegment)AVProgram.stream_index$VH.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * unsigned int* stream_index;
     * }
     */
    public static void stream_index$set(MemorySegment seg, MemorySegment x) {
        AVProgram.stream_index$VH.set(seg, x);
    }
    public static MemorySegment stream_index$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemorySegment)AVProgram.stream_index$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void stream_index$set(MemorySegment seg, long index, MemorySegment x) {
        AVProgram.stream_index$VH.set(seg.asSlice(index*sizeof()), x);
    }
    static final VarHandle nb_stream_indexes$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("nb_stream_indexes"));
    public static VarHandle nb_stream_indexes$VH() {
        return AVProgram.nb_stream_indexes$VH;
    }
    /**
     * Getter for field:
     * {@snippet :
     * unsigned int nb_stream_indexes;
     * }
     */
    public static int nb_stream_indexes$get(MemorySegment seg) {
        return (int)AVProgram.nb_stream_indexes$VH.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * unsigned int nb_stream_indexes;
     * }
     */
    public static void nb_stream_indexes$set(MemorySegment seg, int x) {
        AVProgram.nb_stream_indexes$VH.set(seg, x);
    }
    public static int nb_stream_indexes$get(MemorySegment seg, long index) {
        return (int)AVProgram.nb_stream_indexes$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void nb_stream_indexes$set(MemorySegment seg, long index, int x) {
        AVProgram.nb_stream_indexes$VH.set(seg.asSlice(index*sizeof()), x);
    }
    static final VarHandle metadata$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("metadata"));
    public static VarHandle metadata$VH() {
        return AVProgram.metadata$VH;
    }
    /**
     * Getter for field:
     * {@snippet :
     * AVDictionary* metadata;
     * }
     */
    public static MemorySegment metadata$get(MemorySegment seg) {
        return (java.lang.foreign.MemorySegment)AVProgram.metadata$VH.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * AVDictionary* metadata;
     * }
     */
    public static void metadata$set(MemorySegment seg, MemorySegment x) {
        AVProgram.metadata$VH.set(seg, x);
    }
    public static MemorySegment metadata$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemorySegment)AVProgram.metadata$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void metadata$set(MemorySegment seg, long index, MemorySegment x) {
        AVProgram.metadata$VH.set(seg.asSlice(index*sizeof()), x);
    }
    static final VarHandle program_num$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("program_num"));
    public static VarHandle program_num$VH() {
        return AVProgram.program_num$VH;
    }
    /**
     * Getter for field:
     * {@snippet :
     * int program_num;
     * }
     */
    public static int program_num$get(MemorySegment seg) {
        return (int)AVProgram.program_num$VH.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * int program_num;
     * }
     */
    public static void program_num$set(MemorySegment seg, int x) {
        AVProgram.program_num$VH.set(seg, x);
    }
    public static int program_num$get(MemorySegment seg, long index) {
        return (int)AVProgram.program_num$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void program_num$set(MemorySegment seg, long index, int x) {
        AVProgram.program_num$VH.set(seg.asSlice(index*sizeof()), x);
    }
    static final VarHandle pmt_pid$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("pmt_pid"));
    public static VarHandle pmt_pid$VH() {
        return AVProgram.pmt_pid$VH;
    }
    /**
     * Getter for field:
     * {@snippet :
     * int pmt_pid;
     * }
     */
    public static int pmt_pid$get(MemorySegment seg) {
        return (int)AVProgram.pmt_pid$VH.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * int pmt_pid;
     * }
     */
    public static void pmt_pid$set(MemorySegment seg, int x) {
        AVProgram.pmt_pid$VH.set(seg, x);
    }
    public static int pmt_pid$get(MemorySegment seg, long index) {
        return (int)AVProgram.pmt_pid$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void pmt_pid$set(MemorySegment seg, long index, int x) {
        AVProgram.pmt_pid$VH.set(seg.asSlice(index*sizeof()), x);
    }
    static final VarHandle pcr_pid$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("pcr_pid"));
    public static VarHandle pcr_pid$VH() {
        return AVProgram.pcr_pid$VH;
    }
    /**
     * Getter for field:
     * {@snippet :
     * int pcr_pid;
     * }
     */
    public static int pcr_pid$get(MemorySegment seg) {
        return (int)AVProgram.pcr_pid$VH.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * int pcr_pid;
     * }
     */
    public static void pcr_pid$set(MemorySegment seg, int x) {
        AVProgram.pcr_pid$VH.set(seg, x);
    }
    public static int pcr_pid$get(MemorySegment seg, long index) {
        return (int)AVProgram.pcr_pid$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void pcr_pid$set(MemorySegment seg, long index, int x) {
        AVProgram.pcr_pid$VH.set(seg.asSlice(index*sizeof()), x);
    }
    static final VarHandle pmt_version$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("pmt_version"));
    public static VarHandle pmt_version$VH() {
        return AVProgram.pmt_version$VH;
    }
    /**
     * Getter for field:
     * {@snippet :
     * int pmt_version;
     * }
     */
    public static int pmt_version$get(MemorySegment seg) {
        return (int)AVProgram.pmt_version$VH.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * int pmt_version;
     * }
     */
    public static void pmt_version$set(MemorySegment seg, int x) {
        AVProgram.pmt_version$VH.set(seg, x);
    }
    public static int pmt_version$get(MemorySegment seg, long index) {
        return (int)AVProgram.pmt_version$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void pmt_version$set(MemorySegment seg, long index, int x) {
        AVProgram.pmt_version$VH.set(seg.asSlice(index*sizeof()), x);
    }
    static final VarHandle start_time$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("start_time"));
    public static VarHandle start_time$VH() {
        return AVProgram.start_time$VH;
    }
    /**
     * Getter for field:
     * {@snippet :
     * int64_t start_time;
     * }
     */
    public static long start_time$get(MemorySegment seg) {
        return (long)AVProgram.start_time$VH.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * int64_t start_time;
     * }
     */
    public static void start_time$set(MemorySegment seg, long x) {
        AVProgram.start_time$VH.set(seg, x);
    }
    public static long start_time$get(MemorySegment seg, long index) {
        return (long)AVProgram.start_time$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void start_time$set(MemorySegment seg, long index, long x) {
        AVProgram.start_time$VH.set(seg.asSlice(index*sizeof()), x);
    }
    static final VarHandle end_time$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("end_time"));
    public static VarHandle end_time$VH() {
        return AVProgram.end_time$VH;
    }
    /**
     * Getter for field:
     * {@snippet :
     * int64_t end_time;
     * }
     */
    public static long end_time$get(MemorySegment seg) {
        return (long)AVProgram.end_time$VH.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * int64_t end_time;
     * }
     */
    public static void end_time$set(MemorySegment seg, long x) {
        AVProgram.end_time$VH.set(seg, x);
    }
    public static long end_time$get(MemorySegment seg, long index) {
        return (long)AVProgram.end_time$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void end_time$set(MemorySegment seg, long index, long x) {
        AVProgram.end_time$VH.set(seg.asSlice(index*sizeof()), x);
    }
    static final VarHandle pts_wrap_reference$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("pts_wrap_reference"));
    public static VarHandle pts_wrap_reference$VH() {
        return AVProgram.pts_wrap_reference$VH;
    }
    /**
     * Getter for field:
     * {@snippet :
     * int64_t pts_wrap_reference;
     * }
     */
    public static long pts_wrap_reference$get(MemorySegment seg) {
        return (long)AVProgram.pts_wrap_reference$VH.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * int64_t pts_wrap_reference;
     * }
     */
    public static void pts_wrap_reference$set(MemorySegment seg, long x) {
        AVProgram.pts_wrap_reference$VH.set(seg, x);
    }
    public static long pts_wrap_reference$get(MemorySegment seg, long index) {
        return (long)AVProgram.pts_wrap_reference$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void pts_wrap_reference$set(MemorySegment seg, long index, long x) {
        AVProgram.pts_wrap_reference$VH.set(seg.asSlice(index*sizeof()), x);
    }
    static final VarHandle pts_wrap_behavior$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("pts_wrap_behavior"));
    public static VarHandle pts_wrap_behavior$VH() {
        return AVProgram.pts_wrap_behavior$VH;
    }
    /**
     * Getter for field:
     * {@snippet :
     * int pts_wrap_behavior;
     * }
     */
    public static int pts_wrap_behavior$get(MemorySegment seg) {
        return (int)AVProgram.pts_wrap_behavior$VH.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * int pts_wrap_behavior;
     * }
     */
    public static void pts_wrap_behavior$set(MemorySegment seg, int x) {
        AVProgram.pts_wrap_behavior$VH.set(seg, x);
    }
    public static int pts_wrap_behavior$get(MemorySegment seg, long index) {
        return (int)AVProgram.pts_wrap_behavior$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void pts_wrap_behavior$set(MemorySegment seg, long index, int x) {
        AVProgram.pts_wrap_behavior$VH.set(seg.asSlice(index*sizeof()), x);
    }
    public static long sizeof() { return $LAYOUT().byteSize(); }
    public static MemorySegment allocate(SegmentAllocator allocator) { return allocator.allocate($LAYOUT()); }
    public static MemorySegment allocateArray(long len, SegmentAllocator allocator) {
        return allocator.allocate(MemoryLayout.sequenceLayout(len, $LAYOUT()));
    }
    public static MemorySegment ofAddress(MemorySegment addr, SegmentScope scope) { return RuntimeHelper.asArray(addr, $LAYOUT(), 1, scope); }
}


