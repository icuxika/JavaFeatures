// Generated by jextract

package com.icuxika.jextract.libffmpeg;

import java.lang.invoke.MethodHandle;
import java.lang.invoke.VarHandle;
import java.nio.ByteOrder;
import java.lang.foreign.*;
import static java.lang.foreign.ValueLayout.*;
/**
 * {@snippet :
 * struct AVCodecParameters {
 *     enum AVMediaType codec_type;
 *     enum AVCodecID codec_id;
 *     uint32_t codec_tag;
 *     uint8_t* extradata;
 *     int extradata_size;
 *     int format;
 *     int64_t bit_rate;
 *     int bits_per_coded_sample;
 *     int bits_per_raw_sample;
 *     int profile;
 *     int level;
 *     int width;
 *     int height;
 *     AVRational sample_aspect_ratio;
 *     enum AVFieldOrder field_order;
 *     enum AVColorRange color_range;
 *     enum AVColorPrimaries color_primaries;
 *     enum AVColorTransferCharacteristic color_trc;
 *     enum AVColorSpace color_space;
 *     enum AVChromaLocation chroma_location;
 *     int video_delay;
 *     uint64_t channel_layout;
 *     int channels;
 *     int sample_rate;
 *     int block_align;
 *     int frame_size;
 *     int initial_padding;
 *     int trailing_padding;
 *     int seek_preroll;
 *     AVChannelLayout ch_layout;
 * };
 * }
 */
public class AVCodecParameters {

    static final StructLayout $struct$LAYOUT = MemoryLayout.structLayout(
        Constants$root.C_LONG$LAYOUT.withName("codec_type"),
        Constants$root.C_LONG$LAYOUT.withName("codec_id"),
        Constants$root.C_LONG$LAYOUT.withName("codec_tag"),
        MemoryLayout.paddingLayout(32),
        Constants$root.C_POINTER$LAYOUT.withName("extradata"),
        Constants$root.C_LONG$LAYOUT.withName("extradata_size"),
        Constants$root.C_LONG$LAYOUT.withName("format"),
        Constants$root.C_LONG_LONG$LAYOUT.withName("bit_rate"),
        Constants$root.C_LONG$LAYOUT.withName("bits_per_coded_sample"),
        Constants$root.C_LONG$LAYOUT.withName("bits_per_raw_sample"),
        Constants$root.C_LONG$LAYOUT.withName("profile"),
        Constants$root.C_LONG$LAYOUT.withName("level"),
        Constants$root.C_LONG$LAYOUT.withName("width"),
        Constants$root.C_LONG$LAYOUT.withName("height"),
        MemoryLayout.structLayout(
            Constants$root.C_LONG$LAYOUT.withName("num"),
            Constants$root.C_LONG$LAYOUT.withName("den")
        ).withName("sample_aspect_ratio"),
        Constants$root.C_LONG$LAYOUT.withName("field_order"),
        Constants$root.C_LONG$LAYOUT.withName("color_range"),
        Constants$root.C_LONG$LAYOUT.withName("color_primaries"),
        Constants$root.C_LONG$LAYOUT.withName("color_trc"),
        Constants$root.C_LONG$LAYOUT.withName("color_space"),
        Constants$root.C_LONG$LAYOUT.withName("chroma_location"),
        Constants$root.C_LONG$LAYOUT.withName("video_delay"),
        MemoryLayout.paddingLayout(32),
        Constants$root.C_LONG_LONG$LAYOUT.withName("channel_layout"),
        Constants$root.C_LONG$LAYOUT.withName("channels"),
        Constants$root.C_LONG$LAYOUT.withName("sample_rate"),
        Constants$root.C_LONG$LAYOUT.withName("block_align"),
        Constants$root.C_LONG$LAYOUT.withName("frame_size"),
        Constants$root.C_LONG$LAYOUT.withName("initial_padding"),
        Constants$root.C_LONG$LAYOUT.withName("trailing_padding"),
        Constants$root.C_LONG$LAYOUT.withName("seek_preroll"),
        MemoryLayout.paddingLayout(32),
        MemoryLayout.structLayout(
            Constants$root.C_LONG$LAYOUT.withName("order"),
            Constants$root.C_LONG$LAYOUT.withName("nb_channels"),
            MemoryLayout.unionLayout(
                Constants$root.C_LONG_LONG$LAYOUT.withName("mask"),
                Constants$root.C_POINTER$LAYOUT.withName("map")
            ).withName("u"),
            Constants$root.C_POINTER$LAYOUT.withName("opaque")
        ).withName("ch_layout")
    ).withName("AVCodecParameters");
    public static MemoryLayout $LAYOUT() {
        return AVCodecParameters.$struct$LAYOUT;
    }
    static final VarHandle codec_type$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("codec_type"));
    public static VarHandle codec_type$VH() {
        return AVCodecParameters.codec_type$VH;
    }
    /**
     * Getter for field:
     * {@snippet :
     * enum AVMediaType codec_type;
     * }
     */
    public static int codec_type$get(MemorySegment seg) {
        return (int)AVCodecParameters.codec_type$VH.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * enum AVMediaType codec_type;
     * }
     */
    public static void codec_type$set(MemorySegment seg, int x) {
        AVCodecParameters.codec_type$VH.set(seg, x);
    }
    public static int codec_type$get(MemorySegment seg, long index) {
        return (int)AVCodecParameters.codec_type$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void codec_type$set(MemorySegment seg, long index, int x) {
        AVCodecParameters.codec_type$VH.set(seg.asSlice(index*sizeof()), x);
    }
    static final VarHandle codec_id$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("codec_id"));
    public static VarHandle codec_id$VH() {
        return AVCodecParameters.codec_id$VH;
    }
    /**
     * Getter for field:
     * {@snippet :
     * enum AVCodecID codec_id;
     * }
     */
    public static int codec_id$get(MemorySegment seg) {
        return (int)AVCodecParameters.codec_id$VH.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * enum AVCodecID codec_id;
     * }
     */
    public static void codec_id$set(MemorySegment seg, int x) {
        AVCodecParameters.codec_id$VH.set(seg, x);
    }
    public static int codec_id$get(MemorySegment seg, long index) {
        return (int)AVCodecParameters.codec_id$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void codec_id$set(MemorySegment seg, long index, int x) {
        AVCodecParameters.codec_id$VH.set(seg.asSlice(index*sizeof()), x);
    }
    static final VarHandle codec_tag$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("codec_tag"));
    public static VarHandle codec_tag$VH() {
        return AVCodecParameters.codec_tag$VH;
    }
    /**
     * Getter for field:
     * {@snippet :
     * uint32_t codec_tag;
     * }
     */
    public static int codec_tag$get(MemorySegment seg) {
        return (int)AVCodecParameters.codec_tag$VH.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * uint32_t codec_tag;
     * }
     */
    public static void codec_tag$set(MemorySegment seg, int x) {
        AVCodecParameters.codec_tag$VH.set(seg, x);
    }
    public static int codec_tag$get(MemorySegment seg, long index) {
        return (int)AVCodecParameters.codec_tag$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void codec_tag$set(MemorySegment seg, long index, int x) {
        AVCodecParameters.codec_tag$VH.set(seg.asSlice(index*sizeof()), x);
    }
    static final VarHandle extradata$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("extradata"));
    public static VarHandle extradata$VH() {
        return AVCodecParameters.extradata$VH;
    }
    /**
     * Getter for field:
     * {@snippet :
     * uint8_t* extradata;
     * }
     */
    public static MemorySegment extradata$get(MemorySegment seg) {
        return (java.lang.foreign.MemorySegment)AVCodecParameters.extradata$VH.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * uint8_t* extradata;
     * }
     */
    public static void extradata$set(MemorySegment seg, MemorySegment x) {
        AVCodecParameters.extradata$VH.set(seg, x);
    }
    public static MemorySegment extradata$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemorySegment)AVCodecParameters.extradata$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void extradata$set(MemorySegment seg, long index, MemorySegment x) {
        AVCodecParameters.extradata$VH.set(seg.asSlice(index*sizeof()), x);
    }
    static final VarHandle extradata_size$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("extradata_size"));
    public static VarHandle extradata_size$VH() {
        return AVCodecParameters.extradata_size$VH;
    }
    /**
     * Getter for field:
     * {@snippet :
     * int extradata_size;
     * }
     */
    public static int extradata_size$get(MemorySegment seg) {
        return (int)AVCodecParameters.extradata_size$VH.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * int extradata_size;
     * }
     */
    public static void extradata_size$set(MemorySegment seg, int x) {
        AVCodecParameters.extradata_size$VH.set(seg, x);
    }
    public static int extradata_size$get(MemorySegment seg, long index) {
        return (int)AVCodecParameters.extradata_size$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void extradata_size$set(MemorySegment seg, long index, int x) {
        AVCodecParameters.extradata_size$VH.set(seg.asSlice(index*sizeof()), x);
    }
    static final VarHandle format$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("format"));
    public static VarHandle format$VH() {
        return AVCodecParameters.format$VH;
    }
    /**
     * Getter for field:
     * {@snippet :
     * int format;
     * }
     */
    public static int format$get(MemorySegment seg) {
        return (int)AVCodecParameters.format$VH.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * int format;
     * }
     */
    public static void format$set(MemorySegment seg, int x) {
        AVCodecParameters.format$VH.set(seg, x);
    }
    public static int format$get(MemorySegment seg, long index) {
        return (int)AVCodecParameters.format$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void format$set(MemorySegment seg, long index, int x) {
        AVCodecParameters.format$VH.set(seg.asSlice(index*sizeof()), x);
    }
    static final VarHandle bit_rate$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("bit_rate"));
    public static VarHandle bit_rate$VH() {
        return AVCodecParameters.bit_rate$VH;
    }
    /**
     * Getter for field:
     * {@snippet :
     * int64_t bit_rate;
     * }
     */
    public static long bit_rate$get(MemorySegment seg) {
        return (long)AVCodecParameters.bit_rate$VH.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * int64_t bit_rate;
     * }
     */
    public static void bit_rate$set(MemorySegment seg, long x) {
        AVCodecParameters.bit_rate$VH.set(seg, x);
    }
    public static long bit_rate$get(MemorySegment seg, long index) {
        return (long)AVCodecParameters.bit_rate$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void bit_rate$set(MemorySegment seg, long index, long x) {
        AVCodecParameters.bit_rate$VH.set(seg.asSlice(index*sizeof()), x);
    }
    static final VarHandle bits_per_coded_sample$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("bits_per_coded_sample"));
    public static VarHandle bits_per_coded_sample$VH() {
        return AVCodecParameters.bits_per_coded_sample$VH;
    }
    /**
     * Getter for field:
     * {@snippet :
     * int bits_per_coded_sample;
     * }
     */
    public static int bits_per_coded_sample$get(MemorySegment seg) {
        return (int)AVCodecParameters.bits_per_coded_sample$VH.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * int bits_per_coded_sample;
     * }
     */
    public static void bits_per_coded_sample$set(MemorySegment seg, int x) {
        AVCodecParameters.bits_per_coded_sample$VH.set(seg, x);
    }
    public static int bits_per_coded_sample$get(MemorySegment seg, long index) {
        return (int)AVCodecParameters.bits_per_coded_sample$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void bits_per_coded_sample$set(MemorySegment seg, long index, int x) {
        AVCodecParameters.bits_per_coded_sample$VH.set(seg.asSlice(index*sizeof()), x);
    }
    static final VarHandle bits_per_raw_sample$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("bits_per_raw_sample"));
    public static VarHandle bits_per_raw_sample$VH() {
        return AVCodecParameters.bits_per_raw_sample$VH;
    }
    /**
     * Getter for field:
     * {@snippet :
     * int bits_per_raw_sample;
     * }
     */
    public static int bits_per_raw_sample$get(MemorySegment seg) {
        return (int)AVCodecParameters.bits_per_raw_sample$VH.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * int bits_per_raw_sample;
     * }
     */
    public static void bits_per_raw_sample$set(MemorySegment seg, int x) {
        AVCodecParameters.bits_per_raw_sample$VH.set(seg, x);
    }
    public static int bits_per_raw_sample$get(MemorySegment seg, long index) {
        return (int)AVCodecParameters.bits_per_raw_sample$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void bits_per_raw_sample$set(MemorySegment seg, long index, int x) {
        AVCodecParameters.bits_per_raw_sample$VH.set(seg.asSlice(index*sizeof()), x);
    }
    static final VarHandle profile$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("profile"));
    public static VarHandle profile$VH() {
        return AVCodecParameters.profile$VH;
    }
    /**
     * Getter for field:
     * {@snippet :
     * int profile;
     * }
     */
    public static int profile$get(MemorySegment seg) {
        return (int)AVCodecParameters.profile$VH.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * int profile;
     * }
     */
    public static void profile$set(MemorySegment seg, int x) {
        AVCodecParameters.profile$VH.set(seg, x);
    }
    public static int profile$get(MemorySegment seg, long index) {
        return (int)AVCodecParameters.profile$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void profile$set(MemorySegment seg, long index, int x) {
        AVCodecParameters.profile$VH.set(seg.asSlice(index*sizeof()), x);
    }
    static final VarHandle level$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("level"));
    public static VarHandle level$VH() {
        return AVCodecParameters.level$VH;
    }
    /**
     * Getter for field:
     * {@snippet :
     * int level;
     * }
     */
    public static int level$get(MemorySegment seg) {
        return (int)AVCodecParameters.level$VH.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * int level;
     * }
     */
    public static void level$set(MemorySegment seg, int x) {
        AVCodecParameters.level$VH.set(seg, x);
    }
    public static int level$get(MemorySegment seg, long index) {
        return (int)AVCodecParameters.level$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void level$set(MemorySegment seg, long index, int x) {
        AVCodecParameters.level$VH.set(seg.asSlice(index*sizeof()), x);
    }
    static final VarHandle width$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("width"));
    public static VarHandle width$VH() {
        return AVCodecParameters.width$VH;
    }
    /**
     * Getter for field:
     * {@snippet :
     * int width;
     * }
     */
    public static int width$get(MemorySegment seg) {
        return (int)AVCodecParameters.width$VH.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * int width;
     * }
     */
    public static void width$set(MemorySegment seg, int x) {
        AVCodecParameters.width$VH.set(seg, x);
    }
    public static int width$get(MemorySegment seg, long index) {
        return (int)AVCodecParameters.width$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void width$set(MemorySegment seg, long index, int x) {
        AVCodecParameters.width$VH.set(seg.asSlice(index*sizeof()), x);
    }
    static final VarHandle height$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("height"));
    public static VarHandle height$VH() {
        return AVCodecParameters.height$VH;
    }
    /**
     * Getter for field:
     * {@snippet :
     * int height;
     * }
     */
    public static int height$get(MemorySegment seg) {
        return (int)AVCodecParameters.height$VH.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * int height;
     * }
     */
    public static void height$set(MemorySegment seg, int x) {
        AVCodecParameters.height$VH.set(seg, x);
    }
    public static int height$get(MemorySegment seg, long index) {
        return (int)AVCodecParameters.height$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void height$set(MemorySegment seg, long index, int x) {
        AVCodecParameters.height$VH.set(seg.asSlice(index*sizeof()), x);
    }
    public static MemorySegment sample_aspect_ratio$slice(MemorySegment seg) {
        return seg.asSlice(64, 8);
    }
    static final VarHandle field_order$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("field_order"));
    public static VarHandle field_order$VH() {
        return AVCodecParameters.field_order$VH;
    }
    /**
     * Getter for field:
     * {@snippet :
     * enum AVFieldOrder field_order;
     * }
     */
    public static int field_order$get(MemorySegment seg) {
        return (int)AVCodecParameters.field_order$VH.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * enum AVFieldOrder field_order;
     * }
     */
    public static void field_order$set(MemorySegment seg, int x) {
        AVCodecParameters.field_order$VH.set(seg, x);
    }
    public static int field_order$get(MemorySegment seg, long index) {
        return (int)AVCodecParameters.field_order$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void field_order$set(MemorySegment seg, long index, int x) {
        AVCodecParameters.field_order$VH.set(seg.asSlice(index*sizeof()), x);
    }
    static final VarHandle color_range$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("color_range"));
    public static VarHandle color_range$VH() {
        return AVCodecParameters.color_range$VH;
    }
    /**
     * Getter for field:
     * {@snippet :
     * enum AVColorRange color_range;
     * }
     */
    public static int color_range$get(MemorySegment seg) {
        return (int)AVCodecParameters.color_range$VH.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * enum AVColorRange color_range;
     * }
     */
    public static void color_range$set(MemorySegment seg, int x) {
        AVCodecParameters.color_range$VH.set(seg, x);
    }
    public static int color_range$get(MemorySegment seg, long index) {
        return (int)AVCodecParameters.color_range$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void color_range$set(MemorySegment seg, long index, int x) {
        AVCodecParameters.color_range$VH.set(seg.asSlice(index*sizeof()), x);
    }
    static final VarHandle color_primaries$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("color_primaries"));
    public static VarHandle color_primaries$VH() {
        return AVCodecParameters.color_primaries$VH;
    }
    /**
     * Getter for field:
     * {@snippet :
     * enum AVColorPrimaries color_primaries;
     * }
     */
    public static int color_primaries$get(MemorySegment seg) {
        return (int)AVCodecParameters.color_primaries$VH.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * enum AVColorPrimaries color_primaries;
     * }
     */
    public static void color_primaries$set(MemorySegment seg, int x) {
        AVCodecParameters.color_primaries$VH.set(seg, x);
    }
    public static int color_primaries$get(MemorySegment seg, long index) {
        return (int)AVCodecParameters.color_primaries$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void color_primaries$set(MemorySegment seg, long index, int x) {
        AVCodecParameters.color_primaries$VH.set(seg.asSlice(index*sizeof()), x);
    }
    static final VarHandle color_trc$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("color_trc"));
    public static VarHandle color_trc$VH() {
        return AVCodecParameters.color_trc$VH;
    }
    /**
     * Getter for field:
     * {@snippet :
     * enum AVColorTransferCharacteristic color_trc;
     * }
     */
    public static int color_trc$get(MemorySegment seg) {
        return (int)AVCodecParameters.color_trc$VH.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * enum AVColorTransferCharacteristic color_trc;
     * }
     */
    public static void color_trc$set(MemorySegment seg, int x) {
        AVCodecParameters.color_trc$VH.set(seg, x);
    }
    public static int color_trc$get(MemorySegment seg, long index) {
        return (int)AVCodecParameters.color_trc$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void color_trc$set(MemorySegment seg, long index, int x) {
        AVCodecParameters.color_trc$VH.set(seg.asSlice(index*sizeof()), x);
    }
    static final VarHandle color_space$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("color_space"));
    public static VarHandle color_space$VH() {
        return AVCodecParameters.color_space$VH;
    }
    /**
     * Getter for field:
     * {@snippet :
     * enum AVColorSpace color_space;
     * }
     */
    public static int color_space$get(MemorySegment seg) {
        return (int)AVCodecParameters.color_space$VH.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * enum AVColorSpace color_space;
     * }
     */
    public static void color_space$set(MemorySegment seg, int x) {
        AVCodecParameters.color_space$VH.set(seg, x);
    }
    public static int color_space$get(MemorySegment seg, long index) {
        return (int)AVCodecParameters.color_space$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void color_space$set(MemorySegment seg, long index, int x) {
        AVCodecParameters.color_space$VH.set(seg.asSlice(index*sizeof()), x);
    }
    static final VarHandle chroma_location$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("chroma_location"));
    public static VarHandle chroma_location$VH() {
        return AVCodecParameters.chroma_location$VH;
    }
    /**
     * Getter for field:
     * {@snippet :
     * enum AVChromaLocation chroma_location;
     * }
     */
    public static int chroma_location$get(MemorySegment seg) {
        return (int)AVCodecParameters.chroma_location$VH.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * enum AVChromaLocation chroma_location;
     * }
     */
    public static void chroma_location$set(MemorySegment seg, int x) {
        AVCodecParameters.chroma_location$VH.set(seg, x);
    }
    public static int chroma_location$get(MemorySegment seg, long index) {
        return (int)AVCodecParameters.chroma_location$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void chroma_location$set(MemorySegment seg, long index, int x) {
        AVCodecParameters.chroma_location$VH.set(seg.asSlice(index*sizeof()), x);
    }
    static final VarHandle video_delay$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("video_delay"));
    public static VarHandle video_delay$VH() {
        return AVCodecParameters.video_delay$VH;
    }
    /**
     * Getter for field:
     * {@snippet :
     * int video_delay;
     * }
     */
    public static int video_delay$get(MemorySegment seg) {
        return (int)AVCodecParameters.video_delay$VH.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * int video_delay;
     * }
     */
    public static void video_delay$set(MemorySegment seg, int x) {
        AVCodecParameters.video_delay$VH.set(seg, x);
    }
    public static int video_delay$get(MemorySegment seg, long index) {
        return (int)AVCodecParameters.video_delay$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void video_delay$set(MemorySegment seg, long index, int x) {
        AVCodecParameters.video_delay$VH.set(seg.asSlice(index*sizeof()), x);
    }
    static final VarHandle channel_layout$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("channel_layout"));
    public static VarHandle channel_layout$VH() {
        return AVCodecParameters.channel_layout$VH;
    }
    /**
     * Getter for field:
     * {@snippet :
     * uint64_t channel_layout;
     * }
     */
    public static long channel_layout$get(MemorySegment seg) {
        return (long)AVCodecParameters.channel_layout$VH.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * uint64_t channel_layout;
     * }
     */
    public static void channel_layout$set(MemorySegment seg, long x) {
        AVCodecParameters.channel_layout$VH.set(seg, x);
    }
    public static long channel_layout$get(MemorySegment seg, long index) {
        return (long)AVCodecParameters.channel_layout$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void channel_layout$set(MemorySegment seg, long index, long x) {
        AVCodecParameters.channel_layout$VH.set(seg.asSlice(index*sizeof()), x);
    }
    static final VarHandle channels$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("channels"));
    public static VarHandle channels$VH() {
        return AVCodecParameters.channels$VH;
    }
    /**
     * Getter for field:
     * {@snippet :
     * int channels;
     * }
     */
    public static int channels$get(MemorySegment seg) {
        return (int)AVCodecParameters.channels$VH.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * int channels;
     * }
     */
    public static void channels$set(MemorySegment seg, int x) {
        AVCodecParameters.channels$VH.set(seg, x);
    }
    public static int channels$get(MemorySegment seg, long index) {
        return (int)AVCodecParameters.channels$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void channels$set(MemorySegment seg, long index, int x) {
        AVCodecParameters.channels$VH.set(seg.asSlice(index*sizeof()), x);
    }
    static final VarHandle sample_rate$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("sample_rate"));
    public static VarHandle sample_rate$VH() {
        return AVCodecParameters.sample_rate$VH;
    }
    /**
     * Getter for field:
     * {@snippet :
     * int sample_rate;
     * }
     */
    public static int sample_rate$get(MemorySegment seg) {
        return (int)AVCodecParameters.sample_rate$VH.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * int sample_rate;
     * }
     */
    public static void sample_rate$set(MemorySegment seg, int x) {
        AVCodecParameters.sample_rate$VH.set(seg, x);
    }
    public static int sample_rate$get(MemorySegment seg, long index) {
        return (int)AVCodecParameters.sample_rate$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void sample_rate$set(MemorySegment seg, long index, int x) {
        AVCodecParameters.sample_rate$VH.set(seg.asSlice(index*sizeof()), x);
    }
    static final VarHandle block_align$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("block_align"));
    public static VarHandle block_align$VH() {
        return AVCodecParameters.block_align$VH;
    }
    /**
     * Getter for field:
     * {@snippet :
     * int block_align;
     * }
     */
    public static int block_align$get(MemorySegment seg) {
        return (int)AVCodecParameters.block_align$VH.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * int block_align;
     * }
     */
    public static void block_align$set(MemorySegment seg, int x) {
        AVCodecParameters.block_align$VH.set(seg, x);
    }
    public static int block_align$get(MemorySegment seg, long index) {
        return (int)AVCodecParameters.block_align$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void block_align$set(MemorySegment seg, long index, int x) {
        AVCodecParameters.block_align$VH.set(seg.asSlice(index*sizeof()), x);
    }
    static final VarHandle frame_size$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("frame_size"));
    public static VarHandle frame_size$VH() {
        return AVCodecParameters.frame_size$VH;
    }
    /**
     * Getter for field:
     * {@snippet :
     * int frame_size;
     * }
     */
    public static int frame_size$get(MemorySegment seg) {
        return (int)AVCodecParameters.frame_size$VH.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * int frame_size;
     * }
     */
    public static void frame_size$set(MemorySegment seg, int x) {
        AVCodecParameters.frame_size$VH.set(seg, x);
    }
    public static int frame_size$get(MemorySegment seg, long index) {
        return (int)AVCodecParameters.frame_size$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void frame_size$set(MemorySegment seg, long index, int x) {
        AVCodecParameters.frame_size$VH.set(seg.asSlice(index*sizeof()), x);
    }
    static final VarHandle initial_padding$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("initial_padding"));
    public static VarHandle initial_padding$VH() {
        return AVCodecParameters.initial_padding$VH;
    }
    /**
     * Getter for field:
     * {@snippet :
     * int initial_padding;
     * }
     */
    public static int initial_padding$get(MemorySegment seg) {
        return (int)AVCodecParameters.initial_padding$VH.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * int initial_padding;
     * }
     */
    public static void initial_padding$set(MemorySegment seg, int x) {
        AVCodecParameters.initial_padding$VH.set(seg, x);
    }
    public static int initial_padding$get(MemorySegment seg, long index) {
        return (int)AVCodecParameters.initial_padding$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void initial_padding$set(MemorySegment seg, long index, int x) {
        AVCodecParameters.initial_padding$VH.set(seg.asSlice(index*sizeof()), x);
    }
    static final VarHandle trailing_padding$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("trailing_padding"));
    public static VarHandle trailing_padding$VH() {
        return AVCodecParameters.trailing_padding$VH;
    }
    /**
     * Getter for field:
     * {@snippet :
     * int trailing_padding;
     * }
     */
    public static int trailing_padding$get(MemorySegment seg) {
        return (int)AVCodecParameters.trailing_padding$VH.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * int trailing_padding;
     * }
     */
    public static void trailing_padding$set(MemorySegment seg, int x) {
        AVCodecParameters.trailing_padding$VH.set(seg, x);
    }
    public static int trailing_padding$get(MemorySegment seg, long index) {
        return (int)AVCodecParameters.trailing_padding$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void trailing_padding$set(MemorySegment seg, long index, int x) {
        AVCodecParameters.trailing_padding$VH.set(seg.asSlice(index*sizeof()), x);
    }
    static final VarHandle seek_preroll$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("seek_preroll"));
    public static VarHandle seek_preroll$VH() {
        return AVCodecParameters.seek_preroll$VH;
    }
    /**
     * Getter for field:
     * {@snippet :
     * int seek_preroll;
     * }
     */
    public static int seek_preroll$get(MemorySegment seg) {
        return (int)AVCodecParameters.seek_preroll$VH.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * int seek_preroll;
     * }
     */
    public static void seek_preroll$set(MemorySegment seg, int x) {
        AVCodecParameters.seek_preroll$VH.set(seg, x);
    }
    public static int seek_preroll$get(MemorySegment seg, long index) {
        return (int)AVCodecParameters.seek_preroll$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void seek_preroll$set(MemorySegment seg, long index, int x) {
        AVCodecParameters.seek_preroll$VH.set(seg.asSlice(index*sizeof()), x);
    }
    public static MemorySegment ch_layout$slice(MemorySegment seg) {
        return seg.asSlice(144, 24);
    }
    public static long sizeof() { return $LAYOUT().byteSize(); }
    public static MemorySegment allocate(SegmentAllocator allocator) { return allocator.allocate($LAYOUT()); }
    public static MemorySegment allocateArray(long len, SegmentAllocator allocator) {
        return allocator.allocate(MemoryLayout.sequenceLayout(len, $LAYOUT()));
    }
    public static MemorySegment ofAddress(MemorySegment addr, SegmentScope scope) { return RuntimeHelper.asArray(addr, $LAYOUT(), 1, scope); }
}


