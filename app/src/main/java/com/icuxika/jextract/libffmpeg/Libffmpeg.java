// Generated by jextract

package com.icuxika.jextract.libffmpeg;

import java.lang.invoke.MethodHandle;
import java.lang.invoke.VarHandle;
import java.nio.ByteOrder;
import java.lang.foreign.*;
import static java.lang.foreign.ValueLayout.*;
public class Libffmpeg extends Libffmpeg_3 {

    public static final OfByte C_CHAR = Constants$root.C_CHAR$LAYOUT;
    public static final OfShort C_SHORT = Constants$root.C_SHORT$LAYOUT;
    public static final OfInt C_INT = Constants$root.C_LONG$LAYOUT;
    public static final OfInt C_LONG = Constants$root.C_LONG$LAYOUT;
    public static final OfLong C_LONG_LONG = Constants$root.C_LONG_LONG$LAYOUT;
    public static final OfFloat C_FLOAT = Constants$root.C_FLOAT$LAYOUT;
    public static final OfDouble C_DOUBLE = Constants$root.C_DOUBLE$LAYOUT;
    public static final OfAddress C_POINTER = Constants$root.C_POINTER$LAYOUT;
    /**
     * {@snippet :
     * #define _VCRT_COMPILER_PREPROCESSOR 1
     * }
     */
    public static int _VCRT_COMPILER_PREPROCESSOR() {
        return (int)1L;
    }
    /**
     * {@snippet :
     * #define _SAL_VERSION 20
     * }
     */
    public static int _SAL_VERSION() {
        return (int)20L;
    }
    /**
     * {@snippet :
     * #define __SAL_H_VERSION 180000000
     * }
     */
    public static int __SAL_H_VERSION() {
        return (int)180000000L;
    }
    /**
     * {@snippet :
     * #define _USE_DECLSPECS_FOR_SAL 0
     * }
     */
    public static int _USE_DECLSPECS_FOR_SAL() {
        return (int)0L;
    }
    /**
     * {@snippet :
     * #define _USE_ATTRIBUTES_FOR_SAL 0
     * }
     */
    public static int _USE_ATTRIBUTES_FOR_SAL() {
        return (int)0L;
    }
    /**
     * {@snippet :
     * #define _CRT_PACKING 8
     * }
     */
    public static int _CRT_PACKING() {
        return (int)8L;
    }
    /**
     * {@snippet :
     * #define _HAS_EXCEPTIONS 1
     * }
     */
    public static int _HAS_EXCEPTIONS() {
        return (int)1L;
    }
    /**
     * {@snippet :
     * #define _HAS_CXX17 0
     * }
     */
    public static int _HAS_CXX17() {
        return (int)0L;
    }
    /**
     * {@snippet :
     * #define _HAS_CXX20 0
     * }
     */
    public static int _HAS_CXX20() {
        return (int)0L;
    }
    /**
     * {@snippet :
     * #define _HAS_CXX23 0
     * }
     */
    public static int _HAS_CXX23() {
        return (int)0L;
    }
    /**
     * {@snippet :
     * #define _HAS_NODISCARD 0
     * }
     */
    public static int _HAS_NODISCARD() {
        return (int)0L;
    }
    /**
     * {@snippet :
     * #define WCHAR_MIN 0
     * }
     */
    public static int WCHAR_MIN() {
        return (int)0L;
    }
    /**
     * {@snippet :
     * #define WCHAR_MAX 65535
     * }
     */
    public static int WCHAR_MAX() {
        return (int)65535L;
    }
    /**
     * {@snippet :
     * #define WINT_MIN 0
     * }
     */
    public static int WINT_MIN() {
        return (int)0L;
    }
    /**
     * {@snippet :
     * #define WINT_MAX 65535
     * }
     */
    public static int WINT_MAX() {
        return (int)65535L;
    }
    /**
     * {@snippet :
     * #define FF_LAMBDA_SHIFT 7
     * }
     */
    public static int FF_LAMBDA_SHIFT() {
        return (int)7L;
    }
    /**
     * {@snippet :
     * #define FF_QP2LAMBDA 118
     * }
     */
    public static int FF_QP2LAMBDA() {
        return (int)118L;
    }
    /**
     * {@snippet :
     * #define AV_TIME_BASE 1000000
     * }
     */
    public static int AV_TIME_BASE() {
        return (int)1000000L;
    }
    /**
     * {@snippet :
     * #define _ARM_WINAPI_PARTITION_DESKTOP_SDK_AVAILABLE 1
     * }
     */
    public static int _ARM_WINAPI_PARTITION_DESKTOP_SDK_AVAILABLE() {
        return (int)1L;
    }
    /**
     * {@snippet :
     * #define _CRT_BUILD_DESKTOP_APP 1
     * }
     */
    public static int _CRT_BUILD_DESKTOP_APP() {
        return (int)1L;
    }
    /**
     * {@snippet :
     * #define _ARGMAX 100
     * }
     */
    public static int _ARGMAX() {
        return (int)100L;
    }
    /**
     * {@snippet :
     * #define _CRT_INT_MAX 2147483647
     * }
     */
    public static int _CRT_INT_MAX() {
        return (int)2147483647L;
    }
    /**
     * {@snippet :
     * #define _CRT_FUNCTIONS_REQUIRED 1
     * }
     */
    public static int _CRT_FUNCTIONS_REQUIRED() {
        return (int)1L;
    }
    /**
     * {@snippet :
     * #define _CRT_HAS_CXX17 0
     * }
     */
    public static int _CRT_HAS_CXX17() {
        return (int)0L;
    }
    /**
     * {@snippet :
     * #define _CRT_HAS_C11 1
     * }
     */
    public static int _CRT_HAS_C11() {
        return (int)1L;
    }
    /**
     * {@snippet :
     * #define _CRT_INTERNAL_NONSTDC_NAMES 1
     * }
     */
    public static int _CRT_INTERNAL_NONSTDC_NAMES() {
        return (int)1L;
    }
    /**
     * {@snippet :
     * #define __STDC_WANT_SECURE_LIB__ 1
     * }
     */
    public static int __STDC_WANT_SECURE_LIB__() {
        return (int)1L;
    }
    /**
     * {@snippet :
     * #define _SECURECRT_FILL_BUFFER_PATTERN 254
     * }
     */
    public static int _SECURECRT_FILL_BUFFER_PATTERN() {
        return (int)254L;
    }
    /**
     * {@snippet :
     * #define _CRT_SECURE_CPP_OVERLOAD_STANDARD_NAMES 0
     * }
     */
    public static int _CRT_SECURE_CPP_OVERLOAD_STANDARD_NAMES() {
        return (int)0L;
    }
    /**
     * {@snippet :
     * #define _CRT_SECURE_CPP_OVERLOAD_STANDARD_NAMES_COUNT 0
     * }
     */
    public static int _CRT_SECURE_CPP_OVERLOAD_STANDARD_NAMES_COUNT() {
        return (int)0L;
    }
    /**
     * {@snippet :
     * #define _CRT_SECURE_CPP_OVERLOAD_SECURE_NAMES 1
     * }
     */
    public static int _CRT_SECURE_CPP_OVERLOAD_SECURE_NAMES() {
        return (int)1L;
    }
    /**
     * {@snippet :
     * #define _CRT_SECURE_CPP_OVERLOAD_STANDARD_NAMES_MEMORY 0
     * }
     */
    public static int _CRT_SECURE_CPP_OVERLOAD_STANDARD_NAMES_MEMORY() {
        return (int)0L;
    }
    /**
     * {@snippet :
     * #define _CRT_SECURE_CPP_OVERLOAD_SECURE_NAMES_MEMORY 0
     * }
     */
    public static int _CRT_SECURE_CPP_OVERLOAD_SECURE_NAMES_MEMORY() {
        return (int)0L;
    }
    /**
     * {@snippet :
     * #define EPERM 1
     * }
     */
    public static int EPERM() {
        return (int)1L;
    }
    /**
     * {@snippet :
     * #define ENOENT 2
     * }
     */
    public static int ENOENT() {
        return (int)2L;
    }
    /**
     * {@snippet :
     * #define ESRCH 3
     * }
     */
    public static int ESRCH() {
        return (int)3L;
    }
    /**
     * {@snippet :
     * #define EINTR 4
     * }
     */
    public static int EINTR() {
        return (int)4L;
    }
    /**
     * {@snippet :
     * #define EIO 5
     * }
     */
    public static int EIO() {
        return (int)5L;
    }
    /**
     * {@snippet :
     * #define ENXIO 6
     * }
     */
    public static int ENXIO() {
        return (int)6L;
    }
    /**
     * {@snippet :
     * #define E2BIG 7
     * }
     */
    public static int E2BIG() {
        return (int)7L;
    }
    /**
     * {@snippet :
     * #define ENOEXEC 8
     * }
     */
    public static int ENOEXEC() {
        return (int)8L;
    }
    /**
     * {@snippet :
     * #define EBADF 9
     * }
     */
    public static int EBADF() {
        return (int)9L;
    }
    /**
     * {@snippet :
     * #define ECHILD 10
     * }
     */
    public static int ECHILD() {
        return (int)10L;
    }
    /**
     * {@snippet :
     * #define EAGAIN 11
     * }
     */
    public static int EAGAIN() {
        return (int)11L;
    }
    /**
     * {@snippet :
     * #define ENOMEM 12
     * }
     */
    public static int ENOMEM() {
        return (int)12L;
    }
    /**
     * {@snippet :
     * #define EACCES 13
     * }
     */
    public static int EACCES() {
        return (int)13L;
    }
    /**
     * {@snippet :
     * #define EFAULT 14
     * }
     */
    public static int EFAULT() {
        return (int)14L;
    }
    /**
     * {@snippet :
     * #define EBUSY 16
     * }
     */
    public static int EBUSY() {
        return (int)16L;
    }
    /**
     * {@snippet :
     * #define EEXIST 17
     * }
     */
    public static int EEXIST() {
        return (int)17L;
    }
    /**
     * {@snippet :
     * #define EXDEV 18
     * }
     */
    public static int EXDEV() {
        return (int)18L;
    }
    /**
     * {@snippet :
     * #define ENODEV 19
     * }
     */
    public static int ENODEV() {
        return (int)19L;
    }
    /**
     * {@snippet :
     * #define ENOTDIR 20
     * }
     */
    public static int ENOTDIR() {
        return (int)20L;
    }
    /**
     * {@snippet :
     * #define EISDIR 21
     * }
     */
    public static int EISDIR() {
        return (int)21L;
    }
    /**
     * {@snippet :
     * #define ENFILE 23
     * }
     */
    public static int ENFILE() {
        return (int)23L;
    }
    /**
     * {@snippet :
     * #define EMFILE 24
     * }
     */
    public static int EMFILE() {
        return (int)24L;
    }
    /**
     * {@snippet :
     * #define ENOTTY 25
     * }
     */
    public static int ENOTTY() {
        return (int)25L;
    }
    /**
     * {@snippet :
     * #define EFBIG 27
     * }
     */
    public static int EFBIG() {
        return (int)27L;
    }
    /**
     * {@snippet :
     * #define ENOSPC 28
     * }
     */
    public static int ENOSPC() {
        return (int)28L;
    }
    /**
     * {@snippet :
     * #define ESPIPE 29
     * }
     */
    public static int ESPIPE() {
        return (int)29L;
    }
    /**
     * {@snippet :
     * #define EROFS 30
     * }
     */
    public static int EROFS() {
        return (int)30L;
    }
    /**
     * {@snippet :
     * #define EMLINK 31
     * }
     */
    public static int EMLINK() {
        return (int)31L;
    }
    /**
     * {@snippet :
     * #define EPIPE 32
     * }
     */
    public static int EPIPE() {
        return (int)32L;
    }
    /**
     * {@snippet :
     * #define EDOM 33
     * }
     */
    public static int EDOM() {
        return (int)33L;
    }
    /**
     * {@snippet :
     * #define EDEADLK 36
     * }
     */
    public static int EDEADLK() {
        return (int)36L;
    }
    /**
     * {@snippet :
     * #define ENAMETOOLONG 38
     * }
     */
    public static int ENAMETOOLONG() {
        return (int)38L;
    }
    /**
     * {@snippet :
     * #define ENOLCK 39
     * }
     */
    public static int ENOLCK() {
        return (int)39L;
    }
    /**
     * {@snippet :
     * #define ENOSYS 40
     * }
     */
    public static int ENOSYS() {
        return (int)40L;
    }
    /**
     * {@snippet :
     * #define ENOTEMPTY 41
     * }
     */
    public static int ENOTEMPTY() {
        return (int)41L;
    }
    /**
     * {@snippet :
     * #define EINVAL 22
     * }
     */
    public static int EINVAL() {
        return (int)22L;
    }
    /**
     * {@snippet :
     * #define ERANGE 34
     * }
     */
    public static int ERANGE() {
        return (int)34L;
    }
    /**
     * {@snippet :
     * #define EILSEQ 42
     * }
     */
    public static int EILSEQ() {
        return (int)42L;
    }
    /**
     * {@snippet :
     * #define STRUNCATE 80
     * }
     */
    public static int STRUNCATE() {
        return (int)80L;
    }
    /**
     * {@snippet :
     * #define EADDRINUSE 100
     * }
     */
    public static int EADDRINUSE() {
        return (int)100L;
    }
    /**
     * {@snippet :
     * #define EADDRNOTAVAIL 101
     * }
     */
    public static int EADDRNOTAVAIL() {
        return (int)101L;
    }
    /**
     * {@snippet :
     * #define EAFNOSUPPORT 102
     * }
     */
    public static int EAFNOSUPPORT() {
        return (int)102L;
    }
    /**
     * {@snippet :
     * #define EALREADY 103
     * }
     */
    public static int EALREADY() {
        return (int)103L;
    }
    /**
     * {@snippet :
     * #define EBADMSG 104
     * }
     */
    public static int EBADMSG() {
        return (int)104L;
    }
    /**
     * {@snippet :
     * #define ECANCELED 105
     * }
     */
    public static int ECANCELED() {
        return (int)105L;
    }
    /**
     * {@snippet :
     * #define ECONNABORTED 106
     * }
     */
    public static int ECONNABORTED() {
        return (int)106L;
    }
    /**
     * {@snippet :
     * #define ECONNREFUSED 107
     * }
     */
    public static int ECONNREFUSED() {
        return (int)107L;
    }
    /**
     * {@snippet :
     * #define ECONNRESET 108
     * }
     */
    public static int ECONNRESET() {
        return (int)108L;
    }
    /**
     * {@snippet :
     * #define EDESTADDRREQ 109
     * }
     */
    public static int EDESTADDRREQ() {
        return (int)109L;
    }
    /**
     * {@snippet :
     * #define EHOSTUNREACH 110
     * }
     */
    public static int EHOSTUNREACH() {
        return (int)110L;
    }
    /**
     * {@snippet :
     * #define EIDRM 111
     * }
     */
    public static int EIDRM() {
        return (int)111L;
    }
    /**
     * {@snippet :
     * #define EINPROGRESS 112
     * }
     */
    public static int EINPROGRESS() {
        return (int)112L;
    }
    /**
     * {@snippet :
     * #define EISCONN 113
     * }
     */
    public static int EISCONN() {
        return (int)113L;
    }
    /**
     * {@snippet :
     * #define ELOOP 114
     * }
     */
    public static int ELOOP() {
        return (int)114L;
    }
    /**
     * {@snippet :
     * #define EMSGSIZE 115
     * }
     */
    public static int EMSGSIZE() {
        return (int)115L;
    }
    /**
     * {@snippet :
     * #define ENETDOWN 116
     * }
     */
    public static int ENETDOWN() {
        return (int)116L;
    }
    /**
     * {@snippet :
     * #define ENETRESET 117
     * }
     */
    public static int ENETRESET() {
        return (int)117L;
    }
    /**
     * {@snippet :
     * #define ENETUNREACH 118
     * }
     */
    public static int ENETUNREACH() {
        return (int)118L;
    }
    /**
     * {@snippet :
     * #define ENOBUFS 119
     * }
     */
    public static int ENOBUFS() {
        return (int)119L;
    }
    /**
     * {@snippet :
     * #define ENODATA 120
     * }
     */
    public static int ENODATA() {
        return (int)120L;
    }
    /**
     * {@snippet :
     * #define ENOLINK 121
     * }
     */
    public static int ENOLINK() {
        return (int)121L;
    }
    /**
     * {@snippet :
     * #define ENOMSG 122
     * }
     */
    public static int ENOMSG() {
        return (int)122L;
    }
    /**
     * {@snippet :
     * #define ENOPROTOOPT 123
     * }
     */
    public static int ENOPROTOOPT() {
        return (int)123L;
    }
    /**
     * {@snippet :
     * #define ENOSR 124
     * }
     */
    public static int ENOSR() {
        return (int)124L;
    }
    /**
     * {@snippet :
     * #define ENOSTR 125
     * }
     */
    public static int ENOSTR() {
        return (int)125L;
    }
    /**
     * {@snippet :
     * #define ENOTCONN 126
     * }
     */
    public static int ENOTCONN() {
        return (int)126L;
    }
    /**
     * {@snippet :
     * #define ENOTRECOVERABLE 127
     * }
     */
    public static int ENOTRECOVERABLE() {
        return (int)127L;
    }
    /**
     * {@snippet :
     * #define ENOTSOCK 128
     * }
     */
    public static int ENOTSOCK() {
        return (int)128L;
    }
    /**
     * {@snippet :
     * #define ENOTSUP 129
     * }
     */
    public static int ENOTSUP() {
        return (int)129L;
    }
    /**
     * {@snippet :
     * #define EOPNOTSUPP 130
     * }
     */
    public static int EOPNOTSUPP() {
        return (int)130L;
    }
    /**
     * {@snippet :
     * #define EOTHER 131
     * }
     */
    public static int EOTHER() {
        return (int)131L;
    }
    /**
     * {@snippet :
     * #define EOVERFLOW 132
     * }
     */
    public static int EOVERFLOW() {
        return (int)132L;
    }
    /**
     * {@snippet :
     * #define EOWNERDEAD 133
     * }
     */
    public static int EOWNERDEAD() {
        return (int)133L;
    }
    /**
     * {@snippet :
     * #define EPROTO 134
     * }
     */
    public static int EPROTO() {
        return (int)134L;
    }
    /**
     * {@snippet :
     * #define EPROTONOSUPPORT 135
     * }
     */
    public static int EPROTONOSUPPORT() {
        return (int)135L;
    }
    /**
     * {@snippet :
     * #define EPROTOTYPE 136
     * }
     */
    public static int EPROTOTYPE() {
        return (int)136L;
    }
    /**
     * {@snippet :
     * #define ETIME 137
     * }
     */
    public static int ETIME() {
        return (int)137L;
    }
    /**
     * {@snippet :
     * #define ETIMEDOUT 138
     * }
     */
    public static int ETIMEDOUT() {
        return (int)138L;
    }
    /**
     * {@snippet :
     * #define ETXTBSY 139
     * }
     */
    public static int ETXTBSY() {
        return (int)139L;
    }
    /**
     * {@snippet :
     * #define EWOULDBLOCK 140
     * }
     */
    public static int EWOULDBLOCK() {
        return (int)140L;
    }
    /**
     * {@snippet :
     * #define CHAR_BIT 8
     * }
     */
    public static int CHAR_BIT() {
        return (int)8L;
    }
    /**
     * {@snippet :
     * #define SCHAR_MAX 127
     * }
     */
    public static int SCHAR_MAX() {
        return (int)127L;
    }
    /**
     * {@snippet :
     * #define UCHAR_MAX 255
     * }
     */
    public static int UCHAR_MAX() {
        return (int)255L;
    }
    /**
     * {@snippet :
     * #define MB_LEN_MAX 5
     * }
     */
    public static int MB_LEN_MAX() {
        return (int)5L;
    }
    /**
     * {@snippet :
     * #define SHRT_MAX 32767
     * }
     */
    public static int SHRT_MAX() {
        return (int)32767L;
    }
    /**
     * {@snippet :
     * #define USHRT_MAX 65535
     * }
     */
    public static int USHRT_MAX() {
        return (int)65535L;
    }
    /**
     * {@snippet :
     * #define INT_MAX 2147483647
     * }
     */
    public static int INT_MAX() {
        return (int)2147483647L;
    }
    /**
     * {@snippet :
     * #define _DOMAIN 1
     * }
     */
    public static int _DOMAIN() {
        return (int)1L;
    }
    /**
     * {@snippet :
     * #define _SING 2
     * }
     */
    public static int _SING() {
        return (int)2L;
    }
    /**
     * {@snippet :
     * #define _OVERFLOW 3
     * }
     */
    public static int _OVERFLOW() {
        return (int)3L;
    }
    /**
     * {@snippet :
     * #define _UNDERFLOW 4
     * }
     */
    public static int _UNDERFLOW() {
        return (int)4L;
    }
    /**
     * {@snippet :
     * #define _TLOSS 5
     * }
     */
    public static int _TLOSS() {
        return (int)5L;
    }
    /**
     * {@snippet :
     * #define _PLOSS 6
     * }
     */
    public static int _PLOSS() {
        return (int)6L;
    }
    /**
     * {@snippet :
     * #define _INFCODE 1
     * }
     */
    public static int _INFCODE() {
        return (int)1L;
    }
    /**
     * {@snippet :
     * #define _NANCODE 2
     * }
     */
    public static int _NANCODE() {
        return (int)2L;
    }
    /**
     * {@snippet :
     * #define FP_ZERO 0
     * }
     */
    public static int FP_ZERO() {
        return (int)0L;
    }
    /**
     * {@snippet :
     * #define _C2 1
     * }
     */
    public static int _C2() {
        return (int)1L;
    }
    /**
     * {@snippet :
     * #define FP_ILOGBNAN 2147483647
     * }
     */
    public static int FP_ILOGBNAN() {
        return (int)2147483647L;
    }
    /**
     * {@snippet :
     * #define MATH_ERRNO 1
     * }
     */
    public static int MATH_ERRNO() {
        return (int)1L;
    }
    /**
     * {@snippet :
     * #define MATH_ERREXCEPT 2
     * }
     */
    public static int MATH_ERREXCEPT() {
        return (int)2L;
    }
    /**
     * {@snippet :
     * #define _FE_DIVBYZERO 4
     * }
     */
    public static int _FE_DIVBYZERO() {
        return (int)4L;
    }
    /**
     * {@snippet :
     * #define _FE_INEXACT 32
     * }
     */
    public static int _FE_INEXACT() {
        return (int)32L;
    }
    /**
     * {@snippet :
     * #define _FE_INVALID 1
     * }
     */
    public static int _FE_INVALID() {
        return (int)1L;
    }
    /**
     * {@snippet :
     * #define _FE_OVERFLOW 8
     * }
     */
    public static int _FE_OVERFLOW() {
        return (int)8L;
    }
    /**
     * {@snippet :
     * #define _FE_UNDERFLOW 16
     * }
     */
    public static int _FE_UNDERFLOW() {
        return (int)16L;
    }
    /**
     * {@snippet :
     * #define _D0_C 3
     * }
     */
    public static int _D0_C() {
        return (int)3L;
    }
    /**
     * {@snippet :
     * #define _D1_C 2
     * }
     */
    public static int _D1_C() {
        return (int)2L;
    }
    /**
     * {@snippet :
     * #define _D2_C 1
     * }
     */
    public static int _D2_C() {
        return (int)1L;
    }
    /**
     * {@snippet :
     * #define _D3_C 0
     * }
     */
    public static int _D3_C() {
        return (int)0L;
    }
    /**
     * {@snippet :
     * #define _DBIAS 1022
     * }
     */
    public static int _DBIAS() {
        return (int)1022L;
    }
    /**
     * {@snippet :
     * #define _DOFF 4
     * }
     */
    public static int _DOFF() {
        return (int)4L;
    }
    /**
     * {@snippet :
     * #define _F0_C 1
     * }
     */
    public static int _F0_C() {
        return (int)1L;
    }
    /**
     * {@snippet :
     * #define _F1_C 0
     * }
     */
    public static int _F1_C() {
        return (int)0L;
    }
    /**
     * {@snippet :
     * #define _FBIAS 126
     * }
     */
    public static int _FBIAS() {
        return (int)126L;
    }
    /**
     * {@snippet :
     * #define _FOFF 7
     * }
     */
    public static int _FOFF() {
        return (int)7L;
    }
    /**
     * {@snippet :
     * #define _FRND 1
     * }
     */
    public static int _FRND() {
        return (int)1L;
    }
    /**
     * {@snippet :
     * #define _L0_C 3
     * }
     */
    public static int _L0_C() {
        return (int)3L;
    }
    /**
     * {@snippet :
     * #define _L1_C 2
     * }
     */
    public static int _L1_C() {
        return (int)2L;
    }
    /**
     * {@snippet :
     * #define _L2_C 1
     * }
     */
    public static int _L2_C() {
        return (int)1L;
    }
    /**
     * {@snippet :
     * #define _L3_C 0
     * }
     */
    public static int _L3_C() {
        return (int)0L;
    }
    /**
     * {@snippet :
     * #define _LBIAS 1022
     * }
     */
    public static int _LBIAS() {
        return (int)1022L;
    }
    /**
     * {@snippet :
     * #define _LOFF 4
     * }
     */
    public static int _LOFF() {
        return (int)4L;
    }
    /**
     * {@snippet :
     * #define _FP_LT 1
     * }
     */
    public static int _FP_LT() {
        return (int)1L;
    }
    /**
     * {@snippet :
     * #define _FP_EQ 2
     * }
     */
    public static int _FP_EQ() {
        return (int)2L;
    }
    /**
     * {@snippet :
     * #define _FP_GT 4
     * }
     */
    public static int _FP_GT() {
        return (int)4L;
    }
    /**
     * {@snippet :
     * #define BUFSIZ 512
     * }
     */
    public static int BUFSIZ() {
        return (int)512L;
    }
    /**
     * {@snippet :
     * #define _NSTREAM_ 512
     * }
     */
    public static int _NSTREAM_() {
        return (int)512L;
    }
    /**
     * {@snippet :
     * #define _IOB_ENTRIES 3
     * }
     */
    public static int _IOB_ENTRIES() {
        return (int)3L;
    }
    /**
     * {@snippet :
     * #define _IOFBF 0
     * }
     */
    public static int _IOFBF() {
        return (int)0L;
    }
    /**
     * {@snippet :
     * #define _IOLBF 64
     * }
     */
    public static int _IOLBF() {
        return (int)64L;
    }
    /**
     * {@snippet :
     * #define _IONBF 4
     * }
     */
    public static int _IONBF() {
        return (int)4L;
    }
    /**
     * {@snippet :
     * #define L_tmpnam 260
     * }
     */
    public static int L_tmpnam() {
        return (int)260L;
    }
    /**
     * {@snippet :
     * #define SEEK_CUR 1
     * }
     */
    public static int SEEK_CUR() {
        return (int)1L;
    }
    /**
     * {@snippet :
     * #define SEEK_END 2
     * }
     */
    public static int SEEK_END() {
        return (int)2L;
    }
    /**
     * {@snippet :
     * #define SEEK_SET 0
     * }
     */
    public static int SEEK_SET() {
        return (int)0L;
    }
    /**
     * {@snippet :
     * #define FILENAME_MAX 260
     * }
     */
    public static int FILENAME_MAX() {
        return (int)260L;
    }
    /**
     * {@snippet :
     * #define FOPEN_MAX 20
     * }
     */
    public static int FOPEN_MAX() {
        return (int)20L;
    }
    /**
     * {@snippet :
     * #define _SYS_OPEN 20
     * }
     */
    public static int _SYS_OPEN() {
        return (int)20L;
    }
    /**
     * {@snippet :
     * #define EXIT_SUCCESS 0
     * }
     */
    public static int EXIT_SUCCESS() {
        return (int)0L;
    }
    /**
     * {@snippet :
     * #define EXIT_FAILURE 1
     * }
     */
    public static int EXIT_FAILURE() {
        return (int)1L;
    }
    /**
     * {@snippet :
     * #define _WRITE_ABORT_MSG 1
     * }
     */
    public static int _WRITE_ABORT_MSG() {
        return (int)1L;
    }
    /**
     * {@snippet :
     * #define _CALL_REPORTFAULT 2
     * }
     */
    public static int _CALL_REPORTFAULT() {
        return (int)2L;
    }
    /**
     * {@snippet :
     * #define _OUT_TO_DEFAULT 0
     * }
     */
    public static int _OUT_TO_DEFAULT() {
        return (int)0L;
    }
    /**
     * {@snippet :
     * #define _OUT_TO_STDERR 1
     * }
     */
    public static int _OUT_TO_STDERR() {
        return (int)1L;
    }
    /**
     * {@snippet :
     * #define _OUT_TO_MSGBOX 2
     * }
     */
    public static int _OUT_TO_MSGBOX() {
        return (int)2L;
    }
    /**
     * {@snippet :
     * #define _REPORT_ERRMODE 3
     * }
     */
    public static int _REPORT_ERRMODE() {
        return (int)3L;
    }
    /**
     * {@snippet :
     * #define RAND_MAX 32767
     * }
     */
    public static int RAND_MAX() {
        return (int)32767L;
    }
    /**
     * {@snippet :
     * #define _MAX_PATH 260
     * }
     */
    public static int _MAX_PATH() {
        return (int)260L;
    }
    /**
     * {@snippet :
     * #define _MAX_DRIVE 3
     * }
     */
    public static int _MAX_DRIVE() {
        return (int)3L;
    }
    /**
     * {@snippet :
     * #define _MAX_DIR 256
     * }
     */
    public static int _MAX_DIR() {
        return (int)256L;
    }
    /**
     * {@snippet :
     * #define _MAX_FNAME 256
     * }
     */
    public static int _MAX_FNAME() {
        return (int)256L;
    }
    /**
     * {@snippet :
     * #define _MAX_EXT 256
     * }
     */
    public static int _MAX_EXT() {
        return (int)256L;
    }
    /**
     * {@snippet :
     * #define _MAX_ENV 32767
     * }
     */
    public static int _MAX_ENV() {
        return (int)32767L;
    }
    /**
     * {@snippet :
     * #define AV_HAVE_BIGENDIAN 0
     * }
     */
    public static int AV_HAVE_BIGENDIAN() {
        return (int)0L;
    }
    /**
     * {@snippet :
     * #define AV_HAVE_FAST_UNALIGNED 1
     * }
     */
    public static int AV_HAVE_FAST_UNALIGNED() {
        return (int)1L;
    }
    /**
     * {@snippet :
     * #define LIBAVUTIL_VERSION_MAJOR 58
     * }
     */
    public static int LIBAVUTIL_VERSION_MAJOR() {
        return (int)58L;
    }
    /**
     * {@snippet :
     * #define LIBAVUTIL_VERSION_MINOR 2
     * }
     */
    public static int LIBAVUTIL_VERSION_MINOR() {
        return (int)2L;
    }
    /**
     * {@snippet :
     * #define LIBAVUTIL_VERSION_MICRO 100
     * }
     */
    public static int LIBAVUTIL_VERSION_MICRO() {
        return (int)100L;
    }
    /**
     * {@snippet :
     * #define AV_ERROR_MAX_STRING_SIZE 64
     * }
     */
    public static int AV_ERROR_MAX_STRING_SIZE() {
        return (int)64L;
    }
    /**
     * {@snippet :
     * #define __GNUC_VA_LIST 1
     * }
     */
    public static int __GNUC_VA_LIST() {
        return (int)1L;
    }
    /**
     * {@snippet :
     * #define AV_LOG_PANIC 0
     * }
     */
    public static int AV_LOG_PANIC() {
        return (int)0L;
    }
    /**
     * {@snippet :
     * #define AV_LOG_FATAL 8
     * }
     */
    public static int AV_LOG_FATAL() {
        return (int)8L;
    }
    /**
     * {@snippet :
     * #define AV_LOG_ERROR 16
     * }
     */
    public static int AV_LOG_ERROR() {
        return (int)16L;
    }
    /**
     * {@snippet :
     * #define AV_LOG_WARNING 24
     * }
     */
    public static int AV_LOG_WARNING() {
        return (int)24L;
    }
    /**
     * {@snippet :
     * #define AV_LOG_INFO 32
     * }
     */
    public static int AV_LOG_INFO() {
        return (int)32L;
    }
    /**
     * {@snippet :
     * #define AV_LOG_VERBOSE 40
     * }
     */
    public static int AV_LOG_VERBOSE() {
        return (int)40L;
    }
    /**
     * {@snippet :
     * #define AV_LOG_DEBUG 48
     * }
     */
    public static int AV_LOG_DEBUG() {
        return (int)48L;
    }
    /**
     * {@snippet :
     * #define AV_LOG_TRACE 56
     * }
     */
    public static int AV_LOG_TRACE() {
        return (int)56L;
    }
    /**
     * {@snippet :
     * #define AV_LOG_SKIP_REPEATED 1
     * }
     */
    public static int AV_LOG_SKIP_REPEATED() {
        return (int)1L;
    }
    /**
     * {@snippet :
     * #define AV_LOG_PRINT_LEVEL 2
     * }
     */
    public static int AV_LOG_PRINT_LEVEL() {
        return (int)2L;
    }
    /**
     * {@snippet :
     * #define AVPALETTE_SIZE 1024
     * }
     */
    public static int AVPALETTE_SIZE() {
        return (int)1024L;
    }
    /**
     * {@snippet :
     * #define AVPALETTE_COUNT 256
     * }
     */
    public static int AVPALETTE_COUNT() {
        return (int)256L;
    }
    /**
     * {@snippet :
     * #define AV_FOURCC_MAX_STRING_SIZE 32
     * }
     */
    public static int AV_FOURCC_MAX_STRING_SIZE() {
        return (int)32L;
    }
    /**
     * {@snippet :
     * #define AV_DICT_MATCH_CASE 1
     * }
     */
    public static int AV_DICT_MATCH_CASE() {
        return (int)1L;
    }
    /**
     * {@snippet :
     * #define AV_DICT_IGNORE_SUFFIX 2
     * }
     */
    public static int AV_DICT_IGNORE_SUFFIX() {
        return (int)2L;
    }
    /**
     * {@snippet :
     * #define AV_DICT_DONT_STRDUP_KEY 4
     * }
     */
    public static int AV_DICT_DONT_STRDUP_KEY() {
        return (int)4L;
    }
    /**
     * {@snippet :
     * #define AV_DICT_DONT_STRDUP_VAL 8
     * }
     */
    public static int AV_DICT_DONT_STRDUP_VAL() {
        return (int)8L;
    }
    /**
     * {@snippet :
     * #define AV_DICT_DONT_OVERWRITE 16
     * }
     */
    public static int AV_DICT_DONT_OVERWRITE() {
        return (int)16L;
    }
    /**
     * {@snippet :
     * #define AV_DICT_APPEND 32
     * }
     */
    public static int AV_DICT_APPEND() {
        return (int)32L;
    }
    /**
     * {@snippet :
     * #define AV_DICT_MULTIKEY 64
     * }
     */
    public static int AV_DICT_MULTIKEY() {
        return (int)64L;
    }
    /**
     * {@snippet :
     * #define AV_NUM_DATA_POINTERS 8
     * }
     */
    public static int AV_NUM_DATA_POINTERS() {
        return (int)8L;
    }
    /**
     * {@snippet :
     * #define FF_DECODE_ERROR_INVALID_BITSTREAM 1
     * }
     */
    public static int FF_DECODE_ERROR_INVALID_BITSTREAM() {
        return (int)1L;
    }
    /**
     * {@snippet :
     * #define FF_DECODE_ERROR_MISSING_REFERENCE 2
     * }
     */
    public static int FF_DECODE_ERROR_MISSING_REFERENCE() {
        return (int)2L;
    }
    /**
     * {@snippet :
     * #define FF_DECODE_ERROR_CONCEALMENT_ACTIVE 4
     * }
     */
    public static int FF_DECODE_ERROR_CONCEALMENT_ACTIVE() {
        return (int)4L;
    }
    /**
     * {@snippet :
     * #define FF_DECODE_ERROR_DECODE_SLICES 8
     * }
     */
    public static int FF_DECODE_ERROR_DECODE_SLICES() {
        return (int)8L;
    }
    /**
     * {@snippet :
     * #define LIBAVCODEC_VERSION_MAJOR 60
     * }
     */
    public static int LIBAVCODEC_VERSION_MAJOR() {
        return (int)60L;
    }
    /**
     * {@snippet :
     * #define AV_INPUT_BUFFER_PADDING_SIZE 64
     * }
     */
    public static int AV_INPUT_BUFFER_PADDING_SIZE() {
        return (int)64L;
    }
    /**
     * {@snippet :
     * #define FF_COMPLIANCE_VERY_STRICT 2
     * }
     */
    public static int FF_COMPLIANCE_VERY_STRICT() {
        return (int)2L;
    }
    /**
     * {@snippet :
     * #define FF_COMPLIANCE_STRICT 1
     * }
     */
    public static int FF_COMPLIANCE_STRICT() {
        return (int)1L;
    }
    /**
     * {@snippet :
     * #define FF_COMPLIANCE_NORMAL 0
     * }
     */
    public static int FF_COMPLIANCE_NORMAL() {
        return (int)0L;
    }
    /**
     * {@snippet :
     * #define AV_PKT_FLAG_KEY 1
     * }
     */
    public static int AV_PKT_FLAG_KEY() {
        return (int)1L;
    }
    /**
     * {@snippet :
     * #define AV_PKT_FLAG_CORRUPT 2
     * }
     */
    public static int AV_PKT_FLAG_CORRUPT() {
        return (int)2L;
    }
    /**
     * {@snippet :
     * #define AV_PKT_FLAG_DISCARD 4
     * }
     */
    public static int AV_PKT_FLAG_DISCARD() {
        return (int)4L;
    }
    /**
     * {@snippet :
     * #define AV_PKT_FLAG_TRUSTED 8
     * }
     */
    public static int AV_PKT_FLAG_TRUSTED() {
        return (int)8L;
    }
    /**
     * {@snippet :
     * #define AV_PKT_FLAG_DISPOSABLE 16
     * }
     */
    public static int AV_PKT_FLAG_DISPOSABLE() {
        return (int)16L;
    }
    /**
     * {@snippet :
     * #define LIBAVCODEC_VERSION_MINOR 3
     * }
     */
    public static int LIBAVCODEC_VERSION_MINOR() {
        return (int)3L;
    }
    /**
     * {@snippet :
     * #define LIBAVCODEC_VERSION_MICRO 100
     * }
     */
    public static int LIBAVCODEC_VERSION_MICRO() {
        return (int)100L;
    }
    /**
     * {@snippet :
     * #define AV_INPUT_BUFFER_MIN_SIZE 16384
     * }
     */
    public static int AV_INPUT_BUFFER_MIN_SIZE() {
        return (int)16384L;
    }
    /**
     * {@snippet :
     * #define FF_CMP_SAD 0
     * }
     */
    public static int FF_CMP_SAD() {
        return (int)0L;
    }
    /**
     * {@snippet :
     * #define FF_CMP_SSE 1
     * }
     */
    public static int FF_CMP_SSE() {
        return (int)1L;
    }
    /**
     * {@snippet :
     * #define FF_CMP_SATD 2
     * }
     */
    public static int FF_CMP_SATD() {
        return (int)2L;
    }
    /**
     * {@snippet :
     * #define FF_CMP_DCT 3
     * }
     */
    public static int FF_CMP_DCT() {
        return (int)3L;
    }
    /**
     * {@snippet :
     * #define FF_CMP_PSNR 4
     * }
     */
    public static int FF_CMP_PSNR() {
        return (int)4L;
    }
    /**
     * {@snippet :
     * #define FF_CMP_BIT 5
     * }
     */
    public static int FF_CMP_BIT() {
        return (int)5L;
    }
    /**
     * {@snippet :
     * #define FF_CMP_RD 6
     * }
     */
    public static int FF_CMP_RD() {
        return (int)6L;
    }
    /**
     * {@snippet :
     * #define FF_CMP_ZERO 7
     * }
     */
    public static int FF_CMP_ZERO() {
        return (int)7L;
    }
    /**
     * {@snippet :
     * #define FF_CMP_VSAD 8
     * }
     */
    public static int FF_CMP_VSAD() {
        return (int)8L;
    }
    /**
     * {@snippet :
     * #define FF_CMP_VSSE 9
     * }
     */
    public static int FF_CMP_VSSE() {
        return (int)9L;
    }
    /**
     * {@snippet :
     * #define FF_CMP_NSSE 10
     * }
     */
    public static int FF_CMP_NSSE() {
        return (int)10L;
    }
    /**
     * {@snippet :
     * #define FF_CMP_W53 11
     * }
     */
    public static int FF_CMP_W53() {
        return (int)11L;
    }
    /**
     * {@snippet :
     * #define FF_CMP_W97 12
     * }
     */
    public static int FF_CMP_W97() {
        return (int)12L;
    }
    /**
     * {@snippet :
     * #define FF_CMP_DCTMAX 13
     * }
     */
    public static int FF_CMP_DCTMAX() {
        return (int)13L;
    }
    /**
     * {@snippet :
     * #define FF_CMP_DCT264 14
     * }
     */
    public static int FF_CMP_DCT264() {
        return (int)14L;
    }
    /**
     * {@snippet :
     * #define FF_CMP_MEDIAN_SAD 15
     * }
     */
    public static int FF_CMP_MEDIAN_SAD() {
        return (int)15L;
    }
    /**
     * {@snippet :
     * #define FF_CMP_CHROMA 256
     * }
     */
    public static int FF_CMP_CHROMA() {
        return (int)256L;
    }
    /**
     * {@snippet :
     * #define SLICE_FLAG_CODED_ORDER 1
     * }
     */
    public static int SLICE_FLAG_CODED_ORDER() {
        return (int)1L;
    }
    /**
     * {@snippet :
     * #define SLICE_FLAG_ALLOW_FIELD 2
     * }
     */
    public static int SLICE_FLAG_ALLOW_FIELD() {
        return (int)2L;
    }
    /**
     * {@snippet :
     * #define SLICE_FLAG_ALLOW_PLANE 4
     * }
     */
    public static int SLICE_FLAG_ALLOW_PLANE() {
        return (int)4L;
    }
    /**
     * {@snippet :
     * #define FF_MB_DECISION_SIMPLE 0
     * }
     */
    public static int FF_MB_DECISION_SIMPLE() {
        return (int)0L;
    }
    /**
     * {@snippet :
     * #define FF_MB_DECISION_BITS 1
     * }
     */
    public static int FF_MB_DECISION_BITS() {
        return (int)1L;
    }
    /**
     * {@snippet :
     * #define FF_MB_DECISION_RD 2
     * }
     */
    public static int FF_MB_DECISION_RD() {
        return (int)2L;
    }
    /**
     * {@snippet :
     * #define FF_BUG_AUTODETECT 1
     * }
     */
    public static int FF_BUG_AUTODETECT() {
        return (int)1L;
    }
    /**
     * {@snippet :
     * #define FF_BUG_XVID_ILACE 4
     * }
     */
    public static int FF_BUG_XVID_ILACE() {
        return (int)4L;
    }
    /**
     * {@snippet :
     * #define FF_BUG_UMP4 8
     * }
     */
    public static int FF_BUG_UMP4() {
        return (int)8L;
    }
    /**
     * {@snippet :
     * #define FF_BUG_NO_PADDING 16
     * }
     */
    public static int FF_BUG_NO_PADDING() {
        return (int)16L;
    }
    /**
     * {@snippet :
     * #define FF_BUG_AMV 32
     * }
     */
    public static int FF_BUG_AMV() {
        return (int)32L;
    }
    /**
     * {@snippet :
     * #define FF_BUG_QPEL_CHROMA 64
     * }
     */
    public static int FF_BUG_QPEL_CHROMA() {
        return (int)64L;
    }
    /**
     * {@snippet :
     * #define FF_BUG_STD_QPEL 128
     * }
     */
    public static int FF_BUG_STD_QPEL() {
        return (int)128L;
    }
    /**
     * {@snippet :
     * #define FF_BUG_QPEL_CHROMA2 256
     * }
     */
    public static int FF_BUG_QPEL_CHROMA2() {
        return (int)256L;
    }
    /**
     * {@snippet :
     * #define FF_BUG_DIRECT_BLOCKSIZE 512
     * }
     */
    public static int FF_BUG_DIRECT_BLOCKSIZE() {
        return (int)512L;
    }
    /**
     * {@snippet :
     * #define FF_BUG_EDGE 1024
     * }
     */
    public static int FF_BUG_EDGE() {
        return (int)1024L;
    }
    /**
     * {@snippet :
     * #define FF_BUG_HPEL_CHROMA 2048
     * }
     */
    public static int FF_BUG_HPEL_CHROMA() {
        return (int)2048L;
    }
    /**
     * {@snippet :
     * #define FF_BUG_DC_CLIP 4096
     * }
     */
    public static int FF_BUG_DC_CLIP() {
        return (int)4096L;
    }
    /**
     * {@snippet :
     * #define FF_BUG_MS 8192
     * }
     */
    public static int FF_BUG_MS() {
        return (int)8192L;
    }
    /**
     * {@snippet :
     * #define FF_BUG_TRUNCATED 16384
     * }
     */
    public static int FF_BUG_TRUNCATED() {
        return (int)16384L;
    }
    /**
     * {@snippet :
     * #define FF_BUG_IEDGE 32768
     * }
     */
    public static int FF_BUG_IEDGE() {
        return (int)32768L;
    }
    /**
     * {@snippet :
     * #define FF_EC_GUESS_MVS 1
     * }
     */
    public static int FF_EC_GUESS_MVS() {
        return (int)1L;
    }
    /**
     * {@snippet :
     * #define FF_EC_DEBLOCK 2
     * }
     */
    public static int FF_EC_DEBLOCK() {
        return (int)2L;
    }
    /**
     * {@snippet :
     * #define FF_EC_FAVOR_INTER 256
     * }
     */
    public static int FF_EC_FAVOR_INTER() {
        return (int)256L;
    }
    /**
     * {@snippet :
     * #define FF_DEBUG_PICT_INFO 1
     * }
     */
    public static int FF_DEBUG_PICT_INFO() {
        return (int)1L;
    }
    /**
     * {@snippet :
     * #define FF_DEBUG_RC 2
     * }
     */
    public static int FF_DEBUG_RC() {
        return (int)2L;
    }
    /**
     * {@snippet :
     * #define FF_DEBUG_BITSTREAM 4
     * }
     */
    public static int FF_DEBUG_BITSTREAM() {
        return (int)4L;
    }
    /**
     * {@snippet :
     * #define FF_DEBUG_MB_TYPE 8
     * }
     */
    public static int FF_DEBUG_MB_TYPE() {
        return (int)8L;
    }
    /**
     * {@snippet :
     * #define FF_DEBUG_QP 16
     * }
     */
    public static int FF_DEBUG_QP() {
        return (int)16L;
    }
    /**
     * {@snippet :
     * #define FF_DEBUG_DCT_COEFF 64
     * }
     */
    public static int FF_DEBUG_DCT_COEFF() {
        return (int)64L;
    }
    /**
     * {@snippet :
     * #define FF_DEBUG_SKIP 128
     * }
     */
    public static int FF_DEBUG_SKIP() {
        return (int)128L;
    }
    /**
     * {@snippet :
     * #define FF_DEBUG_STARTCODE 256
     * }
     */
    public static int FF_DEBUG_STARTCODE() {
        return (int)256L;
    }
    /**
     * {@snippet :
     * #define FF_DEBUG_ER 1024
     * }
     */
    public static int FF_DEBUG_ER() {
        return (int)1024L;
    }
    /**
     * {@snippet :
     * #define FF_DEBUG_MMCO 2048
     * }
     */
    public static int FF_DEBUG_MMCO() {
        return (int)2048L;
    }
    /**
     * {@snippet :
     * #define FF_DEBUG_BUGS 4096
     * }
     */
    public static int FF_DEBUG_BUGS() {
        return (int)4096L;
    }
    /**
     * {@snippet :
     * #define FF_DEBUG_BUFFERS 32768
     * }
     */
    public static int FF_DEBUG_BUFFERS() {
        return (int)32768L;
    }
    /**
     * {@snippet :
     * #define FF_DEBUG_THREADS 65536
     * }
     */
    public static int FF_DEBUG_THREADS() {
        return (int)65536L;
    }
    /**
     * {@snippet :
     * #define FF_DEBUG_GREEN_MD 8388608
     * }
     */
    public static int FF_DEBUG_GREEN_MD() {
        return (int)8388608L;
    }
    /**
     * {@snippet :
     * #define FF_DEBUG_NOMC 16777216
     * }
     */
    public static int FF_DEBUG_NOMC() {
        return (int)16777216L;
    }
    /**
     * {@snippet :
     * #define FF_DCT_AUTO 0
     * }
     */
    public static int FF_DCT_AUTO() {
        return (int)0L;
    }
    /**
     * {@snippet :
     * #define FF_DCT_FASTINT 1
     * }
     */
    public static int FF_DCT_FASTINT() {
        return (int)1L;
    }
    /**
     * {@snippet :
     * #define FF_DCT_INT 2
     * }
     */
    public static int FF_DCT_INT() {
        return (int)2L;
    }
    /**
     * {@snippet :
     * #define FF_DCT_MMX 3
     * }
     */
    public static int FF_DCT_MMX() {
        return (int)3L;
    }
    /**
     * {@snippet :
     * #define FF_DCT_ALTIVEC 5
     * }
     */
    public static int FF_DCT_ALTIVEC() {
        return (int)5L;
    }
    /**
     * {@snippet :
     * #define FF_DCT_FAAN 6
     * }
     */
    public static int FF_DCT_FAAN() {
        return (int)6L;
    }
    /**
     * {@snippet :
     * #define FF_IDCT_AUTO 0
     * }
     */
    public static int FF_IDCT_AUTO() {
        return (int)0L;
    }
    /**
     * {@snippet :
     * #define FF_IDCT_INT 1
     * }
     */
    public static int FF_IDCT_INT() {
        return (int)1L;
    }
    /**
     * {@snippet :
     * #define FF_IDCT_SIMPLE 2
     * }
     */
    public static int FF_IDCT_SIMPLE() {
        return (int)2L;
    }
    /**
     * {@snippet :
     * #define FF_IDCT_SIMPLEMMX 3
     * }
     */
    public static int FF_IDCT_SIMPLEMMX() {
        return (int)3L;
    }
    /**
     * {@snippet :
     * #define FF_IDCT_ARM 7
     * }
     */
    public static int FF_IDCT_ARM() {
        return (int)7L;
    }
    /**
     * {@snippet :
     * #define FF_IDCT_ALTIVEC 8
     * }
     */
    public static int FF_IDCT_ALTIVEC() {
        return (int)8L;
    }
    /**
     * {@snippet :
     * #define FF_IDCT_SIMPLEARM 10
     * }
     */
    public static int FF_IDCT_SIMPLEARM() {
        return (int)10L;
    }
    /**
     * {@snippet :
     * #define FF_IDCT_XVID 14
     * }
     */
    public static int FF_IDCT_XVID() {
        return (int)14L;
    }
    /**
     * {@snippet :
     * #define FF_IDCT_SIMPLEARMV5TE 16
     * }
     */
    public static int FF_IDCT_SIMPLEARMV5TE() {
        return (int)16L;
    }
    /**
     * {@snippet :
     * #define FF_IDCT_SIMPLEARMV6 17
     * }
     */
    public static int FF_IDCT_SIMPLEARMV6() {
        return (int)17L;
    }
    /**
     * {@snippet :
     * #define FF_IDCT_FAAN 20
     * }
     */
    public static int FF_IDCT_FAAN() {
        return (int)20L;
    }
    /**
     * {@snippet :
     * #define FF_IDCT_SIMPLENEON 22
     * }
     */
    public static int FF_IDCT_SIMPLENEON() {
        return (int)22L;
    }
    /**
     * {@snippet :
     * #define FF_IDCT_NONE 24
     * }
     */
    public static int FF_IDCT_NONE() {
        return (int)24L;
    }
    /**
     * {@snippet :
     * #define FF_IDCT_SIMPLEAUTO 128
     * }
     */
    public static int FF_IDCT_SIMPLEAUTO() {
        return (int)128L;
    }
    /**
     * {@snippet :
     * #define FF_THREAD_FRAME 1
     * }
     */
    public static int FF_THREAD_FRAME() {
        return (int)1L;
    }
    /**
     * {@snippet :
     * #define FF_THREAD_SLICE 2
     * }
     */
    public static int FF_THREAD_SLICE() {
        return (int)2L;
    }
    /**
     * {@snippet :
     * #define FF_PROFILE_AAC_MAIN 0
     * }
     */
    public static int FF_PROFILE_AAC_MAIN() {
        return (int)0L;
    }
    /**
     * {@snippet :
     * #define FF_PROFILE_AAC_LOW 1
     * }
     */
    public static int FF_PROFILE_AAC_LOW() {
        return (int)1L;
    }
    /**
     * {@snippet :
     * #define FF_PROFILE_AAC_SSR 2
     * }
     */
    public static int FF_PROFILE_AAC_SSR() {
        return (int)2L;
    }
    /**
     * {@snippet :
     * #define FF_PROFILE_AAC_LTP 3
     * }
     */
    public static int FF_PROFILE_AAC_LTP() {
        return (int)3L;
    }
    /**
     * {@snippet :
     * #define FF_PROFILE_AAC_HE 4
     * }
     */
    public static int FF_PROFILE_AAC_HE() {
        return (int)4L;
    }
    /**
     * {@snippet :
     * #define FF_PROFILE_AAC_HE_V2 28
     * }
     */
    public static int FF_PROFILE_AAC_HE_V2() {
        return (int)28L;
    }
    /**
     * {@snippet :
     * #define FF_PROFILE_AAC_LD 22
     * }
     */
    public static int FF_PROFILE_AAC_LD() {
        return (int)22L;
    }
    /**
     * {@snippet :
     * #define FF_PROFILE_AAC_ELD 38
     * }
     */
    public static int FF_PROFILE_AAC_ELD() {
        return (int)38L;
    }
    /**
     * {@snippet :
     * #define FF_PROFILE_MPEG2_AAC_LOW 128
     * }
     */
    public static int FF_PROFILE_MPEG2_AAC_LOW() {
        return (int)128L;
    }
    /**
     * {@snippet :
     * #define FF_PROFILE_MPEG2_AAC_HE 131
     * }
     */
    public static int FF_PROFILE_MPEG2_AAC_HE() {
        return (int)131L;
    }
    /**
     * {@snippet :
     * #define FF_PROFILE_DNXHD 0
     * }
     */
    public static int FF_PROFILE_DNXHD() {
        return (int)0L;
    }
    /**
     * {@snippet :
     * #define FF_PROFILE_DNXHR_LB 1
     * }
     */
    public static int FF_PROFILE_DNXHR_LB() {
        return (int)1L;
    }
    /**
     * {@snippet :
     * #define FF_PROFILE_DNXHR_SQ 2
     * }
     */
    public static int FF_PROFILE_DNXHR_SQ() {
        return (int)2L;
    }
    /**
     * {@snippet :
     * #define FF_PROFILE_DNXHR_HQ 3
     * }
     */
    public static int FF_PROFILE_DNXHR_HQ() {
        return (int)3L;
    }
    /**
     * {@snippet :
     * #define FF_PROFILE_DNXHR_HQX 4
     * }
     */
    public static int FF_PROFILE_DNXHR_HQX() {
        return (int)4L;
    }
    /**
     * {@snippet :
     * #define FF_PROFILE_DNXHR_444 5
     * }
     */
    public static int FF_PROFILE_DNXHR_444() {
        return (int)5L;
    }
    /**
     * {@snippet :
     * #define FF_PROFILE_DTS 20
     * }
     */
    public static int FF_PROFILE_DTS() {
        return (int)20L;
    }
    /**
     * {@snippet :
     * #define FF_PROFILE_DTS_ES 30
     * }
     */
    public static int FF_PROFILE_DTS_ES() {
        return (int)30L;
    }
    /**
     * {@snippet :
     * #define FF_PROFILE_DTS_96_24 40
     * }
     */
    public static int FF_PROFILE_DTS_96_24() {
        return (int)40L;
    }
    /**
     * {@snippet :
     * #define FF_PROFILE_DTS_HD_HRA 50
     * }
     */
    public static int FF_PROFILE_DTS_HD_HRA() {
        return (int)50L;
    }
    /**
     * {@snippet :
     * #define FF_PROFILE_DTS_HD_MA 60
     * }
     */
    public static int FF_PROFILE_DTS_HD_MA() {
        return (int)60L;
    }
    /**
     * {@snippet :
     * #define FF_PROFILE_DTS_EXPRESS 70
     * }
     */
    public static int FF_PROFILE_DTS_EXPRESS() {
        return (int)70L;
    }
    /**
     * {@snippet :
     * #define FF_PROFILE_MPEG2_422 0
     * }
     */
    public static int FF_PROFILE_MPEG2_422() {
        return (int)0L;
    }
    /**
     * {@snippet :
     * #define FF_PROFILE_MPEG2_HIGH 1
     * }
     */
    public static int FF_PROFILE_MPEG2_HIGH() {
        return (int)1L;
    }
    /**
     * {@snippet :
     * #define FF_PROFILE_MPEG2_SS 2
     * }
     */
    public static int FF_PROFILE_MPEG2_SS() {
        return (int)2L;
    }
    /**
     * {@snippet :
     * #define FF_PROFILE_MPEG2_SNR_SCALABLE 3
     * }
     */
    public static int FF_PROFILE_MPEG2_SNR_SCALABLE() {
        return (int)3L;
    }
    /**
     * {@snippet :
     * #define FF_PROFILE_MPEG2_MAIN 4
     * }
     */
    public static int FF_PROFILE_MPEG2_MAIN() {
        return (int)4L;
    }
    /**
     * {@snippet :
     * #define FF_PROFILE_MPEG2_SIMPLE 5
     * }
     */
    public static int FF_PROFILE_MPEG2_SIMPLE() {
        return (int)5L;
    }
    /**
     * {@snippet :
     * #define FF_PROFILE_H264_BASELINE 66
     * }
     */
    public static int FF_PROFILE_H264_BASELINE() {
        return (int)66L;
    }
    /**
     * {@snippet :
     * #define FF_PROFILE_H264_MAIN 77
     * }
     */
    public static int FF_PROFILE_H264_MAIN() {
        return (int)77L;
    }
    /**
     * {@snippet :
     * #define FF_PROFILE_H264_EXTENDED 88
     * }
     */
    public static int FF_PROFILE_H264_EXTENDED() {
        return (int)88L;
    }
    /**
     * {@snippet :
     * #define FF_PROFILE_H264_HIGH 100
     * }
     */
    public static int FF_PROFILE_H264_HIGH() {
        return (int)100L;
    }
    /**
     * {@snippet :
     * #define FF_PROFILE_H264_HIGH_10 110
     * }
     */
    public static int FF_PROFILE_H264_HIGH_10() {
        return (int)110L;
    }
    /**
     * {@snippet :
     * #define FF_PROFILE_H264_MULTIVIEW_HIGH 118
     * }
     */
    public static int FF_PROFILE_H264_MULTIVIEW_HIGH() {
        return (int)118L;
    }
    /**
     * {@snippet :
     * #define FF_PROFILE_H264_HIGH_422 122
     * }
     */
    public static int FF_PROFILE_H264_HIGH_422() {
        return (int)122L;
    }
    /**
     * {@snippet :
     * #define FF_PROFILE_H264_STEREO_HIGH 128
     * }
     */
    public static int FF_PROFILE_H264_STEREO_HIGH() {
        return (int)128L;
    }
    /**
     * {@snippet :
     * #define FF_PROFILE_H264_HIGH_444 144
     * }
     */
    public static int FF_PROFILE_H264_HIGH_444() {
        return (int)144L;
    }
    /**
     * {@snippet :
     * #define FF_PROFILE_H264_HIGH_444_PREDICTIVE 244
     * }
     */
    public static int FF_PROFILE_H264_HIGH_444_PREDICTIVE() {
        return (int)244L;
    }
    /**
     * {@snippet :
     * #define FF_PROFILE_H264_CAVLC_444 44
     * }
     */
    public static int FF_PROFILE_H264_CAVLC_444() {
        return (int)44L;
    }
    /**
     * {@snippet :
     * #define FF_PROFILE_VC1_SIMPLE 0
     * }
     */
    public static int FF_PROFILE_VC1_SIMPLE() {
        return (int)0L;
    }
    /**
     * {@snippet :
     * #define FF_PROFILE_VC1_MAIN 1
     * }
     */
    public static int FF_PROFILE_VC1_MAIN() {
        return (int)1L;
    }
    /**
     * {@snippet :
     * #define FF_PROFILE_VC1_COMPLEX 2
     * }
     */
    public static int FF_PROFILE_VC1_COMPLEX() {
        return (int)2L;
    }
    /**
     * {@snippet :
     * #define FF_PROFILE_VC1_ADVANCED 3
     * }
     */
    public static int FF_PROFILE_VC1_ADVANCED() {
        return (int)3L;
    }
    /**
     * {@snippet :
     * #define FF_PROFILE_MPEG4_SIMPLE 0
     * }
     */
    public static int FF_PROFILE_MPEG4_SIMPLE() {
        return (int)0L;
    }
    /**
     * {@snippet :
     * #define FF_PROFILE_MPEG4_SIMPLE_SCALABLE 1
     * }
     */
    public static int FF_PROFILE_MPEG4_SIMPLE_SCALABLE() {
        return (int)1L;
    }
    /**
     * {@snippet :
     * #define FF_PROFILE_MPEG4_CORE 2
     * }
     */
    public static int FF_PROFILE_MPEG4_CORE() {
        return (int)2L;
    }
    /**
     * {@snippet :
     * #define FF_PROFILE_MPEG4_MAIN 3
     * }
     */
    public static int FF_PROFILE_MPEG4_MAIN() {
        return (int)3L;
    }
    /**
     * {@snippet :
     * #define FF_PROFILE_MPEG4_N_BIT 4
     * }
     */
    public static int FF_PROFILE_MPEG4_N_BIT() {
        return (int)4L;
    }
    /**
     * {@snippet :
     * #define FF_PROFILE_MPEG4_SCALABLE_TEXTURE 5
     * }
     */
    public static int FF_PROFILE_MPEG4_SCALABLE_TEXTURE() {
        return (int)5L;
    }
    /**
     * {@snippet :
     * #define FF_PROFILE_MPEG4_SIMPLE_FACE_ANIMATION 6
     * }
     */
    public static int FF_PROFILE_MPEG4_SIMPLE_FACE_ANIMATION() {
        return (int)6L;
    }
    /**
     * {@snippet :
     * #define FF_PROFILE_MPEG4_BASIC_ANIMATED_TEXTURE 7
     * }
     */
    public static int FF_PROFILE_MPEG4_BASIC_ANIMATED_TEXTURE() {
        return (int)7L;
    }
    /**
     * {@snippet :
     * #define FF_PROFILE_MPEG4_HYBRID 8
     * }
     */
    public static int FF_PROFILE_MPEG4_HYBRID() {
        return (int)8L;
    }
    /**
     * {@snippet :
     * #define FF_PROFILE_MPEG4_ADVANCED_REAL_TIME 9
     * }
     */
    public static int FF_PROFILE_MPEG4_ADVANCED_REAL_TIME() {
        return (int)9L;
    }
    /**
     * {@snippet :
     * #define FF_PROFILE_MPEG4_CORE_SCALABLE 10
     * }
     */
    public static int FF_PROFILE_MPEG4_CORE_SCALABLE() {
        return (int)10L;
    }
    /**
     * {@snippet :
     * #define FF_PROFILE_MPEG4_ADVANCED_CODING 11
     * }
     */
    public static int FF_PROFILE_MPEG4_ADVANCED_CODING() {
        return (int)11L;
    }
    /**
     * {@snippet :
     * #define FF_PROFILE_MPEG4_ADVANCED_CORE 12
     * }
     */
    public static int FF_PROFILE_MPEG4_ADVANCED_CORE() {
        return (int)12L;
    }
    /**
     * {@snippet :
     * #define FF_PROFILE_MPEG4_ADVANCED_SCALABLE_TEXTURE 13
     * }
     */
    public static int FF_PROFILE_MPEG4_ADVANCED_SCALABLE_TEXTURE() {
        return (int)13L;
    }
    /**
     * {@snippet :
     * #define FF_PROFILE_MPEG4_SIMPLE_STUDIO 14
     * }
     */
    public static int FF_PROFILE_MPEG4_SIMPLE_STUDIO() {
        return (int)14L;
    }
    /**
     * {@snippet :
     * #define FF_PROFILE_MPEG4_ADVANCED_SIMPLE 15
     * }
     */
    public static int FF_PROFILE_MPEG4_ADVANCED_SIMPLE() {
        return (int)15L;
    }
    /**
     * {@snippet :
     * #define FF_PROFILE_JPEG2000_CSTREAM_RESTRICTION_0 1
     * }
     */
    public static int FF_PROFILE_JPEG2000_CSTREAM_RESTRICTION_0() {
        return (int)1L;
    }
    /**
     * {@snippet :
     * #define FF_PROFILE_JPEG2000_CSTREAM_RESTRICTION_1 2
     * }
     */
    public static int FF_PROFILE_JPEG2000_CSTREAM_RESTRICTION_1() {
        return (int)2L;
    }
    /**
     * {@snippet :
     * #define FF_PROFILE_JPEG2000_CSTREAM_NO_RESTRICTION 32768
     * }
     */
    public static int FF_PROFILE_JPEG2000_CSTREAM_NO_RESTRICTION() {
        return (int)32768L;
    }
    /**
     * {@snippet :
     * #define FF_PROFILE_JPEG2000_DCINEMA_2K 3
     * }
     */
    public static int FF_PROFILE_JPEG2000_DCINEMA_2K() {
        return (int)3L;
    }
    /**
     * {@snippet :
     * #define FF_PROFILE_JPEG2000_DCINEMA_4K 4
     * }
     */
    public static int FF_PROFILE_JPEG2000_DCINEMA_4K() {
        return (int)4L;
    }
    /**
     * {@snippet :
     * #define FF_PROFILE_VP9_0 0
     * }
     */
    public static int FF_PROFILE_VP9_0() {
        return (int)0L;
    }
    /**
     * {@snippet :
     * #define FF_PROFILE_VP9_1 1
     * }
     */
    public static int FF_PROFILE_VP9_1() {
        return (int)1L;
    }
    /**
     * {@snippet :
     * #define FF_PROFILE_VP9_2 2
     * }
     */
    public static int FF_PROFILE_VP9_2() {
        return (int)2L;
    }
    /**
     * {@snippet :
     * #define FF_PROFILE_VP9_3 3
     * }
     */
    public static int FF_PROFILE_VP9_3() {
        return (int)3L;
    }
    /**
     * {@snippet :
     * #define FF_PROFILE_HEVC_MAIN 1
     * }
     */
    public static int FF_PROFILE_HEVC_MAIN() {
        return (int)1L;
    }
    /**
     * {@snippet :
     * #define FF_PROFILE_HEVC_MAIN_10 2
     * }
     */
    public static int FF_PROFILE_HEVC_MAIN_10() {
        return (int)2L;
    }
    /**
     * {@snippet :
     * #define FF_PROFILE_HEVC_MAIN_STILL_PICTURE 3
     * }
     */
    public static int FF_PROFILE_HEVC_MAIN_STILL_PICTURE() {
        return (int)3L;
    }
    /**
     * {@snippet :
     * #define FF_PROFILE_HEVC_REXT 4
     * }
     */
    public static int FF_PROFILE_HEVC_REXT() {
        return (int)4L;
    }
    /**
     * {@snippet :
     * #define FF_PROFILE_VVC_MAIN_10 1
     * }
     */
    public static int FF_PROFILE_VVC_MAIN_10() {
        return (int)1L;
    }
    /**
     * {@snippet :
     * #define FF_PROFILE_VVC_MAIN_10_444 33
     * }
     */
    public static int FF_PROFILE_VVC_MAIN_10_444() {
        return (int)33L;
    }
    /**
     * {@snippet :
     * #define FF_PROFILE_AV1_MAIN 0
     * }
     */
    public static int FF_PROFILE_AV1_MAIN() {
        return (int)0L;
    }
    /**
     * {@snippet :
     * #define FF_PROFILE_AV1_HIGH 1
     * }
     */
    public static int FF_PROFILE_AV1_HIGH() {
        return (int)1L;
    }
    /**
     * {@snippet :
     * #define FF_PROFILE_AV1_PROFESSIONAL 2
     * }
     */
    public static int FF_PROFILE_AV1_PROFESSIONAL() {
        return (int)2L;
    }
    /**
     * {@snippet :
     * #define FF_PROFILE_MJPEG_HUFFMAN_BASELINE_DCT 192
     * }
     */
    public static int FF_PROFILE_MJPEG_HUFFMAN_BASELINE_DCT() {
        return (int)192L;
    }
    /**
     * {@snippet :
     * #define FF_PROFILE_MJPEG_HUFFMAN_EXTENDED_SEQUENTIAL_DCT 193
     * }
     */
    public static int FF_PROFILE_MJPEG_HUFFMAN_EXTENDED_SEQUENTIAL_DCT() {
        return (int)193L;
    }
    /**
     * {@snippet :
     * #define FF_PROFILE_MJPEG_HUFFMAN_PROGRESSIVE_DCT 194
     * }
     */
    public static int FF_PROFILE_MJPEG_HUFFMAN_PROGRESSIVE_DCT() {
        return (int)194L;
    }
    /**
     * {@snippet :
     * #define FF_PROFILE_MJPEG_HUFFMAN_LOSSLESS 195
     * }
     */
    public static int FF_PROFILE_MJPEG_HUFFMAN_LOSSLESS() {
        return (int)195L;
    }
    /**
     * {@snippet :
     * #define FF_PROFILE_MJPEG_JPEG_LS 247
     * }
     */
    public static int FF_PROFILE_MJPEG_JPEG_LS() {
        return (int)247L;
    }
    /**
     * {@snippet :
     * #define FF_PROFILE_SBC_MSBC 1
     * }
     */
    public static int FF_PROFILE_SBC_MSBC() {
        return (int)1L;
    }
    /**
     * {@snippet :
     * #define FF_PROFILE_PRORES_PROXY 0
     * }
     */
    public static int FF_PROFILE_PRORES_PROXY() {
        return (int)0L;
    }
    /**
     * {@snippet :
     * #define FF_PROFILE_PRORES_LT 1
     * }
     */
    public static int FF_PROFILE_PRORES_LT() {
        return (int)1L;
    }
    /**
     * {@snippet :
     * #define FF_PROFILE_PRORES_STANDARD 2
     * }
     */
    public static int FF_PROFILE_PRORES_STANDARD() {
        return (int)2L;
    }
    /**
     * {@snippet :
     * #define FF_PROFILE_PRORES_HQ 3
     * }
     */
    public static int FF_PROFILE_PRORES_HQ() {
        return (int)3L;
    }
    /**
     * {@snippet :
     * #define FF_PROFILE_PRORES_4444 4
     * }
     */
    public static int FF_PROFILE_PRORES_4444() {
        return (int)4L;
    }
    /**
     * {@snippet :
     * #define FF_PROFILE_PRORES_XQ 5
     * }
     */
    public static int FF_PROFILE_PRORES_XQ() {
        return (int)5L;
    }
    /**
     * {@snippet :
     * #define FF_PROFILE_ARIB_PROFILE_A 0
     * }
     */
    public static int FF_PROFILE_ARIB_PROFILE_A() {
        return (int)0L;
    }
    /**
     * {@snippet :
     * #define FF_PROFILE_ARIB_PROFILE_C 1
     * }
     */
    public static int FF_PROFILE_ARIB_PROFILE_C() {
        return (int)1L;
    }
    /**
     * {@snippet :
     * #define FF_PROFILE_KLVA_SYNC 0
     * }
     */
    public static int FF_PROFILE_KLVA_SYNC() {
        return (int)0L;
    }
    /**
     * {@snippet :
     * #define FF_PROFILE_KLVA_ASYNC 1
     * }
     */
    public static int FF_PROFILE_KLVA_ASYNC() {
        return (int)1L;
    }
    /**
     * {@snippet :
     * #define FF_SUB_CHARENC_MODE_AUTOMATIC 0
     * }
     */
    public static int FF_SUB_CHARENC_MODE_AUTOMATIC() {
        return (int)0L;
    }
    /**
     * {@snippet :
     * #define FF_SUB_CHARENC_MODE_PRE_DECODER 1
     * }
     */
    public static int FF_SUB_CHARENC_MODE_PRE_DECODER() {
        return (int)1L;
    }
    /**
     * {@snippet :
     * #define FF_SUB_CHARENC_MODE_IGNORE 2
     * }
     */
    public static int FF_SUB_CHARENC_MODE_IGNORE() {
        return (int)2L;
    }
    /**
     * {@snippet :
     * #define FF_CODEC_PROPERTY_LOSSLESS 1
     * }
     */
    public static int FF_CODEC_PROPERTY_LOSSLESS() {
        return (int)1L;
    }
    /**
     * {@snippet :
     * #define FF_CODEC_PROPERTY_CLOSED_CAPTIONS 2
     * }
     */
    public static int FF_CODEC_PROPERTY_CLOSED_CAPTIONS() {
        return (int)2L;
    }
    /**
     * {@snippet :
     * #define FF_CODEC_PROPERTY_FILM_GRAIN 4
     * }
     */
    public static int FF_CODEC_PROPERTY_FILM_GRAIN() {
        return (int)4L;
    }
    /**
     * {@snippet :
     * #define AV_HWACCEL_CODEC_CAP_EXPERIMENTAL 512
     * }
     */
    public static int AV_HWACCEL_CODEC_CAP_EXPERIMENTAL() {
        return (int)512L;
    }
    /**
     * {@snippet :
     * #define AV_SUBTITLE_FLAG_FORCED 1
     * }
     */
    public static int AV_SUBTITLE_FLAG_FORCED() {
        return (int)1L;
    }
    /**
     * {@snippet :
     * #define AV_PARSER_PTS_NB 4
     * }
     */
    public static int AV_PARSER_PTS_NB() {
        return (int)4L;
    }
    /**
     * {@snippet :
     * #define PARSER_FLAG_COMPLETE_FRAMES 1
     * }
     */
    public static int PARSER_FLAG_COMPLETE_FRAMES() {
        return (int)1L;
    }
    /**
     * {@snippet :
     * #define PARSER_FLAG_ONCE 2
     * }
     */
    public static int PARSER_FLAG_ONCE() {
        return (int)2L;
    }
    /**
     * {@snippet :
     * #define PARSER_FLAG_FETCHED_OFFSET 4
     * }
     */
    public static int PARSER_FLAG_FETCHED_OFFSET() {
        return (int)4L;
    }
    /**
     * {@snippet :
     * #define PARSER_FLAG_USE_CODEC_TS 4096
     * }
     */
    public static int PARSER_FLAG_USE_CODEC_TS() {
        return (int)4096L;
    }
    /**
     * {@snippet :
     * #define _CRT_USE_CONFORMING_ANNEX_K_TIME 0
     * }
     */
    public static int _CRT_USE_CONFORMING_ANNEX_K_TIME() {
        return (int)0L;
    }
    /**
     * {@snippet :
     * #define TIME_UTC 1
     * }
     */
    public static int TIME_UTC() {
        return (int)1L;
    }
    /**
     * {@snippet :
     * #define LIBAVFORMAT_VERSION_MAJOR 60
     * }
     */
    public static int LIBAVFORMAT_VERSION_MAJOR() {
        return (int)60L;
    }
    /**
     * {@snippet :
     * #define FF_API_R_FRAME_RATE 1
     * }
     */
    public static int FF_API_R_FRAME_RATE() {
        return (int)1L;
    }
    /**
     * {@snippet :
     * #define AVSEEK_SIZE 65536
     * }
     */
    public static int AVSEEK_SIZE() {
        return (int)65536L;
    }
    /**
     * {@snippet :
     * #define AVSEEK_FORCE 131072
     * }
     */
    public static int AVSEEK_FORCE() {
        return (int)131072L;
    }
    /**
     * {@snippet :
     * #define AVIO_FLAG_READ 1
     * }
     */
    public static int AVIO_FLAG_READ() {
        return (int)1L;
    }
    /**
     * {@snippet :
     * #define AVIO_FLAG_WRITE 2
     * }
     */
    public static int AVIO_FLAG_WRITE() {
        return (int)2L;
    }
    /**
     * {@snippet :
     * #define AVIO_FLAG_NONBLOCK 8
     * }
     */
    public static int AVIO_FLAG_NONBLOCK() {
        return (int)8L;
    }
    /**
     * {@snippet :
     * #define AVIO_FLAG_DIRECT 32768
     * }
     */
    public static int AVIO_FLAG_DIRECT() {
        return (int)32768L;
    }
    /**
     * {@snippet :
     * #define LIBAVFORMAT_VERSION_MINOR 3
     * }
     */
    public static int LIBAVFORMAT_VERSION_MINOR() {
        return (int)3L;
    }
    /**
     * {@snippet :
     * #define LIBAVFORMAT_VERSION_MICRO 100
     * }
     */
    public static int LIBAVFORMAT_VERSION_MICRO() {
        return (int)100L;
    }
    /**
     * {@snippet :
     * #define AVPROBE_SCORE_EXTENSION 50
     * }
     */
    public static int AVPROBE_SCORE_EXTENSION() {
        return (int)50L;
    }
    /**
     * {@snippet :
     * #define AVPROBE_SCORE_MIME 75
     * }
     */
    public static int AVPROBE_SCORE_MIME() {
        return (int)75L;
    }
    /**
     * {@snippet :
     * #define AVPROBE_SCORE_MAX 100
     * }
     */
    public static int AVPROBE_SCORE_MAX() {
        return (int)100L;
    }
    /**
     * {@snippet :
     * #define AVPROBE_PADDING_SIZE 32
     * }
     */
    public static int AVPROBE_PADDING_SIZE() {
        return (int)32L;
    }
    /**
     * {@snippet :
     * #define AVFMT_NOFILE 1
     * }
     */
    public static int AVFMT_NOFILE() {
        return (int)1L;
    }
    /**
     * {@snippet :
     * #define AVFMT_NEEDNUMBER 2
     * }
     */
    public static int AVFMT_NEEDNUMBER() {
        return (int)2L;
    }
    /**
     * {@snippet :
     * #define AVFMT_EXPERIMENTAL 4
     * }
     */
    public static int AVFMT_EXPERIMENTAL() {
        return (int)4L;
    }
    /**
     * {@snippet :
     * #define AVFMT_SHOW_IDS 8
     * }
     */
    public static int AVFMT_SHOW_IDS() {
        return (int)8L;
    }
    /**
     * {@snippet :
     * #define AVFMT_GLOBALHEADER 64
     * }
     */
    public static int AVFMT_GLOBALHEADER() {
        return (int)64L;
    }
    /**
     * {@snippet :
     * #define AVFMT_NOTIMESTAMPS 128
     * }
     */
    public static int AVFMT_NOTIMESTAMPS() {
        return (int)128L;
    }
    /**
     * {@snippet :
     * #define AVFMT_GENERIC_INDEX 256
     * }
     */
    public static int AVFMT_GENERIC_INDEX() {
        return (int)256L;
    }
    /**
     * {@snippet :
     * #define AVFMT_TS_DISCONT 512
     * }
     */
    public static int AVFMT_TS_DISCONT() {
        return (int)512L;
    }
    /**
     * {@snippet :
     * #define AVFMT_VARIABLE_FPS 1024
     * }
     */
    public static int AVFMT_VARIABLE_FPS() {
        return (int)1024L;
    }
    /**
     * {@snippet :
     * #define AVFMT_NODIMENSIONS 2048
     * }
     */
    public static int AVFMT_NODIMENSIONS() {
        return (int)2048L;
    }
    /**
     * {@snippet :
     * #define AVFMT_NOSTREAMS 4096
     * }
     */
    public static int AVFMT_NOSTREAMS() {
        return (int)4096L;
    }
    /**
     * {@snippet :
     * #define AVFMT_NOBINSEARCH 8192
     * }
     */
    public static int AVFMT_NOBINSEARCH() {
        return (int)8192L;
    }
    /**
     * {@snippet :
     * #define AVFMT_NOGENSEARCH 16384
     * }
     */
    public static int AVFMT_NOGENSEARCH() {
        return (int)16384L;
    }
    /**
     * {@snippet :
     * #define AVFMT_NO_BYTE_SEEK 32768
     * }
     */
    public static int AVFMT_NO_BYTE_SEEK() {
        return (int)32768L;
    }
    /**
     * {@snippet :
     * #define AVFMT_ALLOW_FLUSH 65536
     * }
     */
    public static int AVFMT_ALLOW_FLUSH() {
        return (int)65536L;
    }
    /**
     * {@snippet :
     * #define AVFMT_TS_NONSTRICT 131072
     * }
     */
    public static int AVFMT_TS_NONSTRICT() {
        return (int)131072L;
    }
    /**
     * {@snippet :
     * #define AVFMT_TS_NEGATIVE 262144
     * }
     */
    public static int AVFMT_TS_NEGATIVE() {
        return (int)262144L;
    }
    /**
     * {@snippet :
     * #define AVFMT_SEEK_TO_PTS 67108864
     * }
     */
    public static int AVFMT_SEEK_TO_PTS() {
        return (int)67108864L;
    }
    /**
     * {@snippet :
     * #define AVINDEX_KEYFRAME 1
     * }
     */
    public static int AVINDEX_KEYFRAME() {
        return (int)1L;
    }
    /**
     * {@snippet :
     * #define AVINDEX_DISCARD_FRAME 2
     * }
     */
    public static int AVINDEX_DISCARD_FRAME() {
        return (int)2L;
    }
    /**
     * {@snippet :
     * #define AV_PTS_WRAP_IGNORE 0
     * }
     */
    public static int AV_PTS_WRAP_IGNORE() {
        return (int)0L;
    }
    /**
     * {@snippet :
     * #define AV_PTS_WRAP_ADD_OFFSET 1
     * }
     */
    public static int AV_PTS_WRAP_ADD_OFFSET() {
        return (int)1L;
    }
    /**
     * {@snippet :
     * #define AVSTREAM_EVENT_FLAG_METADATA_UPDATED 1
     * }
     */
    public static int AVSTREAM_EVENT_FLAG_METADATA_UPDATED() {
        return (int)1L;
    }
    /**
     * {@snippet :
     * #define AV_PROGRAM_RUNNING 1
     * }
     */
    public static int AV_PROGRAM_RUNNING() {
        return (int)1L;
    }
    /**
     * {@snippet :
     * #define AVFMTCTX_NOHEADER 1
     * }
     */
    public static int AVFMTCTX_NOHEADER() {
        return (int)1L;
    }
    /**
     * {@snippet :
     * #define AVFMTCTX_UNSEEKABLE 2
     * }
     */
    public static int AVFMTCTX_UNSEEKABLE() {
        return (int)2L;
    }
    /**
     * {@snippet :
     * #define AVFMT_FLAG_GENPTS 1
     * }
     */
    public static int AVFMT_FLAG_GENPTS() {
        return (int)1L;
    }
    /**
     * {@snippet :
     * #define AVFMT_FLAG_IGNIDX 2
     * }
     */
    public static int AVFMT_FLAG_IGNIDX() {
        return (int)2L;
    }
    /**
     * {@snippet :
     * #define AVFMT_FLAG_NONBLOCK 4
     * }
     */
    public static int AVFMT_FLAG_NONBLOCK() {
        return (int)4L;
    }
    /**
     * {@snippet :
     * #define AVFMT_FLAG_IGNDTS 8
     * }
     */
    public static int AVFMT_FLAG_IGNDTS() {
        return (int)8L;
    }
    /**
     * {@snippet :
     * #define AVFMT_FLAG_NOFILLIN 16
     * }
     */
    public static int AVFMT_FLAG_NOFILLIN() {
        return (int)16L;
    }
    /**
     * {@snippet :
     * #define AVFMT_FLAG_NOPARSE 32
     * }
     */
    public static int AVFMT_FLAG_NOPARSE() {
        return (int)32L;
    }
    /**
     * {@snippet :
     * #define AVFMT_FLAG_NOBUFFER 64
     * }
     */
    public static int AVFMT_FLAG_NOBUFFER() {
        return (int)64L;
    }
    /**
     * {@snippet :
     * #define AVFMT_FLAG_CUSTOM_IO 128
     * }
     */
    public static int AVFMT_FLAG_CUSTOM_IO() {
        return (int)128L;
    }
    /**
     * {@snippet :
     * #define AVFMT_FLAG_DISCARD_CORRUPT 256
     * }
     */
    public static int AVFMT_FLAG_DISCARD_CORRUPT() {
        return (int)256L;
    }
    /**
     * {@snippet :
     * #define AVFMT_FLAG_FLUSH_PACKETS 512
     * }
     */
    public static int AVFMT_FLAG_FLUSH_PACKETS() {
        return (int)512L;
    }
    /**
     * {@snippet :
     * #define AVFMT_FLAG_BITEXACT 1024
     * }
     */
    public static int AVFMT_FLAG_BITEXACT() {
        return (int)1024L;
    }
    /**
     * {@snippet :
     * #define AVFMT_FLAG_SORT_DTS 65536
     * }
     */
    public static int AVFMT_FLAG_SORT_DTS() {
        return (int)65536L;
    }
    /**
     * {@snippet :
     * #define AVFMT_FLAG_FAST_SEEK 524288
     * }
     */
    public static int AVFMT_FLAG_FAST_SEEK() {
        return (int)524288L;
    }
    /**
     * {@snippet :
     * #define AVFMT_FLAG_SHORTEST 1048576
     * }
     */
    public static int AVFMT_FLAG_SHORTEST() {
        return (int)1048576L;
    }
    /**
     * {@snippet :
     * #define AVFMT_FLAG_AUTO_BSF 2097152
     * }
     */
    public static int AVFMT_FLAG_AUTO_BSF() {
        return (int)2097152L;
    }
    /**
     * {@snippet :
     * #define FF_FDEBUG_TS 1
     * }
     */
    public static int FF_FDEBUG_TS() {
        return (int)1L;
    }
    /**
     * {@snippet :
     * #define AVFMT_EVENT_FLAG_METADATA_UPDATED 1
     * }
     */
    public static int AVFMT_EVENT_FLAG_METADATA_UPDATED() {
        return (int)1L;
    }
    /**
     * {@snippet :
     * #define AVFMT_AVOID_NEG_TS_DISABLED 0
     * }
     */
    public static int AVFMT_AVOID_NEG_TS_DISABLED() {
        return (int)0L;
    }
    /**
     * {@snippet :
     * #define AVFMT_AVOID_NEG_TS_MAKE_NON_NEGATIVE 1
     * }
     */
    public static int AVFMT_AVOID_NEG_TS_MAKE_NON_NEGATIVE() {
        return (int)1L;
    }
    /**
     * {@snippet :
     * #define AVFMT_AVOID_NEG_TS_MAKE_ZERO 2
     * }
     */
    public static int AVFMT_AVOID_NEG_TS_MAKE_ZERO() {
        return (int)2L;
    }
    /**
     * {@snippet :
     * #define AVSEEK_FLAG_BACKWARD 1
     * }
     */
    public static int AVSEEK_FLAG_BACKWARD() {
        return (int)1L;
    }
    /**
     * {@snippet :
     * #define AVSEEK_FLAG_BYTE 2
     * }
     */
    public static int AVSEEK_FLAG_BYTE() {
        return (int)2L;
    }
    /**
     * {@snippet :
     * #define AVSEEK_FLAG_ANY 4
     * }
     */
    public static int AVSEEK_FLAG_ANY() {
        return (int)4L;
    }
    /**
     * {@snippet :
     * #define AVSEEK_FLAG_FRAME 8
     * }
     */
    public static int AVSEEK_FLAG_FRAME() {
        return (int)8L;
    }
    /**
     * {@snippet :
     * #define AVSTREAM_INIT_IN_WRITE_HEADER 0
     * }
     */
    public static int AVSTREAM_INIT_IN_WRITE_HEADER() {
        return (int)0L;
    }
    /**
     * {@snippet :
     * #define AVSTREAM_INIT_IN_INIT_OUTPUT 1
     * }
     */
    public static int AVSTREAM_INIT_IN_INIT_OUTPUT() {
        return (int)1L;
    }
    /**
     * {@snippet :
     * #define AV_FRAME_FILENAME_FLAGS_MULTIPLE 1
     * }
     */
    public static int AV_FRAME_FILENAME_FLAGS_MULTIPLE() {
        return (int)1L;
    }
    /**
     * {@snippet :
     * #define LIBSWSCALE_VERSION_MAJOR 7
     * }
     */
    public static int LIBSWSCALE_VERSION_MAJOR() {
        return (int)7L;
    }
    /**
     * {@snippet :
     * #define LIBSWSCALE_VERSION_MINOR 1
     * }
     */
    public static int LIBSWSCALE_VERSION_MINOR() {
        return (int)1L;
    }
    /**
     * {@snippet :
     * #define LIBSWSCALE_VERSION_MICRO 100
     * }
     */
    public static int LIBSWSCALE_VERSION_MICRO() {
        return (int)100L;
    }
    /**
     * {@snippet :
     * #define SWS_FAST_BILINEAR 1
     * }
     */
    public static int SWS_FAST_BILINEAR() {
        return (int)1L;
    }
    /**
     * {@snippet :
     * #define SWS_BILINEAR 2
     * }
     */
    public static int SWS_BILINEAR() {
        return (int)2L;
    }
    /**
     * {@snippet :
     * #define SWS_BICUBIC 4
     * }
     */
    public static int SWS_BICUBIC() {
        return (int)4L;
    }
    /**
     * {@snippet :
     * #define SWS_X 8
     * }
     */
    public static int SWS_X() {
        return (int)8L;
    }
    /**
     * {@snippet :
     * #define SWS_POINT 16
     * }
     */
    public static int SWS_POINT() {
        return (int)16L;
    }
    /**
     * {@snippet :
     * #define SWS_AREA 32
     * }
     */
    public static int SWS_AREA() {
        return (int)32L;
    }
    /**
     * {@snippet :
     * #define SWS_BICUBLIN 64
     * }
     */
    public static int SWS_BICUBLIN() {
        return (int)64L;
    }
    /**
     * {@snippet :
     * #define SWS_GAUSS 128
     * }
     */
    public static int SWS_GAUSS() {
        return (int)128L;
    }
    /**
     * {@snippet :
     * #define SWS_SINC 256
     * }
     */
    public static int SWS_SINC() {
        return (int)256L;
    }
    /**
     * {@snippet :
     * #define SWS_LANCZOS 512
     * }
     */
    public static int SWS_LANCZOS() {
        return (int)512L;
    }
    /**
     * {@snippet :
     * #define SWS_SPLINE 1024
     * }
     */
    public static int SWS_SPLINE() {
        return (int)1024L;
    }
    /**
     * {@snippet :
     * #define SWS_SRC_V_CHR_DROP_MASK 196608
     * }
     */
    public static int SWS_SRC_V_CHR_DROP_MASK() {
        return (int)196608L;
    }
    /**
     * {@snippet :
     * #define SWS_SRC_V_CHR_DROP_SHIFT 16
     * }
     */
    public static int SWS_SRC_V_CHR_DROP_SHIFT() {
        return (int)16L;
    }
    /**
     * {@snippet :
     * #define SWS_PARAM_DEFAULT 123456
     * }
     */
    public static int SWS_PARAM_DEFAULT() {
        return (int)123456L;
    }
    /**
     * {@snippet :
     * #define SWS_PRINT_INFO 4096
     * }
     */
    public static int SWS_PRINT_INFO() {
        return (int)4096L;
    }
    /**
     * {@snippet :
     * #define SWS_FULL_CHR_H_INT 8192
     * }
     */
    public static int SWS_FULL_CHR_H_INT() {
        return (int)8192L;
    }
    /**
     * {@snippet :
     * #define SWS_FULL_CHR_H_INP 16384
     * }
     */
    public static int SWS_FULL_CHR_H_INP() {
        return (int)16384L;
    }
    /**
     * {@snippet :
     * #define SWS_DIRECT_BGR 32768
     * }
     */
    public static int SWS_DIRECT_BGR() {
        return (int)32768L;
    }
    /**
     * {@snippet :
     * #define SWS_ACCURATE_RND 262144
     * }
     */
    public static int SWS_ACCURATE_RND() {
        return (int)262144L;
    }
    /**
     * {@snippet :
     * #define SWS_BITEXACT 524288
     * }
     */
    public static int SWS_BITEXACT() {
        return (int)524288L;
    }
    /**
     * {@snippet :
     * #define SWS_ERROR_DIFFUSION 8388608
     * }
     */
    public static int SWS_ERROR_DIFFUSION() {
        return (int)8388608L;
    }
    /**
     * {@snippet :
     * #define SWS_CS_ITU709 1
     * }
     */
    public static int SWS_CS_ITU709() {
        return (int)1L;
    }
    /**
     * {@snippet :
     * #define SWS_CS_FCC 4
     * }
     */
    public static int SWS_CS_FCC() {
        return (int)4L;
    }
    /**
     * {@snippet :
     * #define SWS_CS_ITU601 5
     * }
     */
    public static int SWS_CS_ITU601() {
        return (int)5L;
    }
    /**
     * {@snippet :
     * #define SWS_CS_ITU624 5
     * }
     */
    public static int SWS_CS_ITU624() {
        return (int)5L;
    }
    /**
     * {@snippet :
     * #define SWS_CS_SMPTE170M 5
     * }
     */
    public static int SWS_CS_SMPTE170M() {
        return (int)5L;
    }
    /**
     * {@snippet :
     * #define SWS_CS_SMPTE240M 7
     * }
     */
    public static int SWS_CS_SMPTE240M() {
        return (int)7L;
    }
    /**
     * {@snippet :
     * #define SWS_CS_DEFAULT 5
     * }
     */
    public static int SWS_CS_DEFAULT() {
        return (int)5L;
    }
    /**
     * {@snippet :
     * #define SWS_CS_BT2020 9
     * }
     */
    public static int SWS_CS_BT2020() {
        return (int)9L;
    }
    /**
     * {@snippet :
     * #define FF_LOSS_RESOLUTION 1
     * }
     */
    public static int FF_LOSS_RESOLUTION() {
        return (int)1L;
    }
    /**
     * {@snippet :
     * #define FF_LOSS_DEPTH 2
     * }
     */
    public static int FF_LOSS_DEPTH() {
        return (int)2L;
    }
    /**
     * {@snippet :
     * #define FF_LOSS_COLORSPACE 4
     * }
     */
    public static int FF_LOSS_COLORSPACE() {
        return (int)4L;
    }
    /**
     * {@snippet :
     * #define FF_LOSS_ALPHA 8
     * }
     */
    public static int FF_LOSS_ALPHA() {
        return (int)8L;
    }
    /**
     * {@snippet :
     * #define FF_LOSS_COLORQUANT 16
     * }
     */
    public static int FF_LOSS_COLORQUANT() {
        return (int)16L;
    }
    /**
     * {@snippet :
     * #define FF_LOSS_CHROMA 32
     * }
     */
    public static int FF_LOSS_CHROMA() {
        return (int)32L;
    }
    /**
     * {@snippet :
     * #define FF_LOSS_EXCESS_RESOLUTION 64
     * }
     */
    public static int FF_LOSS_EXCESS_RESOLUTION() {
        return (int)64L;
    }
    /**
     * {@snippet :
     * #define FF_LOSS_EXCESS_DEPTH 128
     * }
     */
    public static int FF_LOSS_EXCESS_DEPTH() {
        return (int)128L;
    }
    /**
     * {@snippet :
     * typedef unsigned long long uintptr_t;
     * }
     */
    public static final OfLong uintptr_t = Constants$root.C_LONG_LONG$LAYOUT;
    /**
     * {@snippet :
     * typedef char* va_list;
     * }
     */
    public static final OfAddress va_list = Constants$root.C_POINTER$LAYOUT;
    public static MethodHandle __va_start$MH() {
        return RuntimeHelper.requireNonNull(constants$0.__va_start$MH,"__va_start");
    }
    /**
     * {@snippet :
     * void __va_start(va_list*,...);
     * }
     */
    public static void __va_start(MemorySegment x0, Object... x1) {
        var mh$ = __va_start$MH();
        try {
            mh$.invokeExact(x0, x1);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    /**
     * {@snippet :
     * typedef unsigned long long size_t;
     * }
     */
    public static final OfLong size_t = Constants$root.C_LONG_LONG$LAYOUT;
    /**
     * {@snippet :
     * typedef long long ptrdiff_t;
     * }
     */
    public static final OfLong ptrdiff_t = Constants$root.C_LONG_LONG$LAYOUT;
    /**
     * {@snippet :
     * typedef long long intptr_t;
     * }
     */
    public static final OfLong intptr_t = Constants$root.C_LONG_LONG$LAYOUT;
    /**
     * {@snippet :
     * typedef unsigned short wchar_t;
     * }
     */
    public static final OfShort wchar_t = Constants$root.C_SHORT$LAYOUT;
    public static MethodHandle __security_init_cookie$MH() {
        return RuntimeHelper.requireNonNull(constants$0.__security_init_cookie$MH,"__security_init_cookie");
    }
    /**
     * {@snippet :
     * void __security_init_cookie();
     * }
     */
    public static void __security_init_cookie() {
        var mh$ = __security_init_cookie$MH();
        try {
            mh$.invokeExact();
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle __security_check_cookie$MH() {
        return RuntimeHelper.requireNonNull(constants$0.__security_check_cookie$MH,"__security_check_cookie");
    }
    /**
     * {@snippet :
     * void __security_check_cookie(uintptr_t _StackCookie);
     * }
     */
    public static void __security_check_cookie(long _StackCookie) {
        var mh$ = __security_check_cookie$MH();
        try {
            mh$.invokeExact(_StackCookie);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle __report_gsfailure$MH() {
        return RuntimeHelper.requireNonNull(constants$0.__report_gsfailure$MH,"__report_gsfailure");
    }
    /**
     * {@snippet :
     * void __report_gsfailure(uintptr_t _StackCookie);
     * }
     */
    public static void __report_gsfailure(long _StackCookie) {
        var mh$ = __report_gsfailure$MH();
        try {
            mh$.invokeExact(_StackCookie);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MemoryLayout __security_cookie$LAYOUT() {
        return constants$0.__security_cookie$LAYOUT;
    }
    public static VarHandle __security_cookie$VH() {
        return constants$0.__security_cookie$VH;
    }
    public static MemorySegment __security_cookie$SEGMENT() {
        return RuntimeHelper.requireNonNull(constants$0.__security_cookie$SEGMENT,"__security_cookie");
    }
    /**
     * Getter for variable:
     * {@snippet :
     * uintptr_t __security_cookie;
     * }
     */
    public static long __security_cookie$get() {
        return (long) constants$0.__security_cookie$VH.get(RuntimeHelper.requireNonNull(constants$0.__security_cookie$SEGMENT, "__security_cookie"));
    }
    /**
     * Setter for variable:
     * {@snippet :
     * uintptr_t __security_cookie;
     * }
     */
    public static void __security_cookie$set(long x) {
        constants$0.__security_cookie$VH.set(RuntimeHelper.requireNonNull(constants$0.__security_cookie$SEGMENT, "__security_cookie"), x);
    }
    /**
     * {@snippet :
     * typedef signed char int8_t;
     * }
     */
    public static final OfByte int8_t = Constants$root.C_CHAR$LAYOUT;
    /**
     * {@snippet :
     * typedef short int16_t;
     * }
     */
    public static final OfShort int16_t = Constants$root.C_SHORT$LAYOUT;
    /**
     * {@snippet :
     * typedef int int32_t;
     * }
     */
    public static final OfInt int32_t = Constants$root.C_LONG$LAYOUT;
    /**
     * {@snippet :
     * typedef long long int64_t;
     * }
     */
    public static final OfLong int64_t = Constants$root.C_LONG_LONG$LAYOUT;
    /**
     * {@snippet :
     * typedef unsigned char uint8_t;
     * }
     */
    public static final OfByte uint8_t = Constants$root.C_CHAR$LAYOUT;
    /**
     * {@snippet :
     * typedef unsigned short uint16_t;
     * }
     */
    public static final OfShort uint16_t = Constants$root.C_SHORT$LAYOUT;
    /**
     * {@snippet :
     * typedef unsigned int uint32_t;
     * }
     */
    public static final OfInt uint32_t = Constants$root.C_LONG$LAYOUT;
    /**
     * {@snippet :
     * typedef unsigned long long uint64_t;
     * }
     */
    public static final OfLong uint64_t = Constants$root.C_LONG_LONG$LAYOUT;
    /**
     * {@snippet :
     * typedef signed char int_least8_t;
     * }
     */
    public static final OfByte int_least8_t = Constants$root.C_CHAR$LAYOUT;
    /**
     * {@snippet :
     * typedef short int_least16_t;
     * }
     */
    public static final OfShort int_least16_t = Constants$root.C_SHORT$LAYOUT;
    /**
     * {@snippet :
     * typedef int int_least32_t;
     * }
     */
    public static final OfInt int_least32_t = Constants$root.C_LONG$LAYOUT;
    /**
     * {@snippet :
     * typedef long long int_least64_t;
     * }
     */
    public static final OfLong int_least64_t = Constants$root.C_LONG_LONG$LAYOUT;
    /**
     * {@snippet :
     * typedef unsigned char uint_least8_t;
     * }
     */
    public static final OfByte uint_least8_t = Constants$root.C_CHAR$LAYOUT;
    /**
     * {@snippet :
     * typedef unsigned short uint_least16_t;
     * }
     */
    public static final OfShort uint_least16_t = Constants$root.C_SHORT$LAYOUT;
    /**
     * {@snippet :
     * typedef unsigned int uint_least32_t;
     * }
     */
    public static final OfInt uint_least32_t = Constants$root.C_LONG$LAYOUT;
    /**
     * {@snippet :
     * typedef unsigned long long uint_least64_t;
     * }
     */
    public static final OfLong uint_least64_t = Constants$root.C_LONG_LONG$LAYOUT;
    /**
     * {@snippet :
     * typedef signed char int_fast8_t;
     * }
     */
    public static final OfByte int_fast8_t = Constants$root.C_CHAR$LAYOUT;
    /**
     * {@snippet :
     * typedef int int_fast16_t;
     * }
     */
    public static final OfInt int_fast16_t = Constants$root.C_LONG$LAYOUT;
    /**
     * {@snippet :
     * typedef int int_fast32_t;
     * }
     */
    public static final OfInt int_fast32_t = Constants$root.C_LONG$LAYOUT;
    /**
     * {@snippet :
     * typedef long long int_fast64_t;
     * }
     */
    public static final OfLong int_fast64_t = Constants$root.C_LONG_LONG$LAYOUT;
    /**
     * {@snippet :
     * typedef unsigned char uint_fast8_t;
     * }
     */
    public static final OfByte uint_fast8_t = Constants$root.C_CHAR$LAYOUT;
    /**
     * {@snippet :
     * typedef unsigned int uint_fast16_t;
     * }
     */
    public static final OfInt uint_fast16_t = Constants$root.C_LONG$LAYOUT;
    /**
     * {@snippet :
     * typedef unsigned int uint_fast32_t;
     * }
     */
    public static final OfInt uint_fast32_t = Constants$root.C_LONG$LAYOUT;
    /**
     * {@snippet :
     * typedef unsigned long long uint_fast64_t;
     * }
     */
    public static final OfLong uint_fast64_t = Constants$root.C_LONG_LONG$LAYOUT;
    /**
     * {@snippet :
     * typedef long long intmax_t;
     * }
     */
    public static final OfLong intmax_t = Constants$root.C_LONG_LONG$LAYOUT;
    /**
     * {@snippet :
     * typedef unsigned long long uintmax_t;
     * }
     */
    public static final OfLong uintmax_t = Constants$root.C_LONG_LONG$LAYOUT;
    /**
     * {@snippet :
     * enum AVSampleFormat.AV_SAMPLE_FMT_NONE = -1;
     * }
     */
    public static int AV_SAMPLE_FMT_NONE() {
        return (int)-1L;
    }
    /**
     * {@snippet :
     * enum AVSampleFormat.AV_SAMPLE_FMT_U8 = 0;
     * }
     */
    public static int AV_SAMPLE_FMT_U8() {
        return (int)0L;
    }
    /**
     * {@snippet :
     * enum AVSampleFormat.AV_SAMPLE_FMT_S16 = 1;
     * }
     */
    public static int AV_SAMPLE_FMT_S16() {
        return (int)1L;
    }
    /**
     * {@snippet :
     * enum AVSampleFormat.AV_SAMPLE_FMT_S32 = 2;
     * }
     */
    public static int AV_SAMPLE_FMT_S32() {
        return (int)2L;
    }
    /**
     * {@snippet :
     * enum AVSampleFormat.AV_SAMPLE_FMT_FLT = 3;
     * }
     */
    public static int AV_SAMPLE_FMT_FLT() {
        return (int)3L;
    }
    /**
     * {@snippet :
     * enum AVSampleFormat.AV_SAMPLE_FMT_DBL = 4;
     * }
     */
    public static int AV_SAMPLE_FMT_DBL() {
        return (int)4L;
    }
    /**
     * {@snippet :
     * enum AVSampleFormat.AV_SAMPLE_FMT_U8P = 5;
     * }
     */
    public static int AV_SAMPLE_FMT_U8P() {
        return (int)5L;
    }
    /**
     * {@snippet :
     * enum AVSampleFormat.AV_SAMPLE_FMT_S16P = 6;
     * }
     */
    public static int AV_SAMPLE_FMT_S16P() {
        return (int)6L;
    }
    /**
     * {@snippet :
     * enum AVSampleFormat.AV_SAMPLE_FMT_S32P = 7;
     * }
     */
    public static int AV_SAMPLE_FMT_S32P() {
        return (int)7L;
    }
    /**
     * {@snippet :
     * enum AVSampleFormat.AV_SAMPLE_FMT_FLTP = 8;
     * }
     */
    public static int AV_SAMPLE_FMT_FLTP() {
        return (int)8L;
    }
    /**
     * {@snippet :
     * enum AVSampleFormat.AV_SAMPLE_FMT_DBLP = 9;
     * }
     */
    public static int AV_SAMPLE_FMT_DBLP() {
        return (int)9L;
    }
    /**
     * {@snippet :
     * enum AVSampleFormat.AV_SAMPLE_FMT_S64 = 10;
     * }
     */
    public static int AV_SAMPLE_FMT_S64() {
        return (int)10L;
    }
    /**
     * {@snippet :
     * enum AVSampleFormat.AV_SAMPLE_FMT_S64P = 11;
     * }
     */
    public static int AV_SAMPLE_FMT_S64P() {
        return (int)11L;
    }
    /**
     * {@snippet :
     * enum AVSampleFormat.AV_SAMPLE_FMT_NB = 12;
     * }
     */
    public static int AV_SAMPLE_FMT_NB() {
        return (int)12L;
    }
    public static MethodHandle av_get_sample_fmt_name$MH() {
        return RuntimeHelper.requireNonNull(constants$0.av_get_sample_fmt_name$MH,"av_get_sample_fmt_name");
    }
    /**
     * {@snippet :
     * char* av_get_sample_fmt_name(enum AVSampleFormat sample_fmt);
     * }
     */
    public static MemorySegment av_get_sample_fmt_name(int sample_fmt) {
        var mh$ = av_get_sample_fmt_name$MH();
        try {
            return (java.lang.foreign.MemorySegment)mh$.invokeExact(sample_fmt);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle av_get_sample_fmt$MH() {
        return RuntimeHelper.requireNonNull(constants$1.av_get_sample_fmt$MH,"av_get_sample_fmt");
    }
    /**
     * {@snippet :
     * enum AVSampleFormat av_get_sample_fmt(char* name);
     * }
     */
    public static int av_get_sample_fmt(MemorySegment name) {
        var mh$ = av_get_sample_fmt$MH();
        try {
            return (int)mh$.invokeExact(name);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle av_get_alt_sample_fmt$MH() {
        return RuntimeHelper.requireNonNull(constants$1.av_get_alt_sample_fmt$MH,"av_get_alt_sample_fmt");
    }
    /**
     * {@snippet :
     * enum AVSampleFormat av_get_alt_sample_fmt(enum AVSampleFormat sample_fmt, int planar);
     * }
     */
    public static int av_get_alt_sample_fmt(int sample_fmt, int planar) {
        var mh$ = av_get_alt_sample_fmt$MH();
        try {
            return (int)mh$.invokeExact(sample_fmt, planar);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle av_get_packed_sample_fmt$MH() {
        return RuntimeHelper.requireNonNull(constants$1.av_get_packed_sample_fmt$MH,"av_get_packed_sample_fmt");
    }
    /**
     * {@snippet :
     * enum AVSampleFormat av_get_packed_sample_fmt(enum AVSampleFormat sample_fmt);
     * }
     */
    public static int av_get_packed_sample_fmt(int sample_fmt) {
        var mh$ = av_get_packed_sample_fmt$MH();
        try {
            return (int)mh$.invokeExact(sample_fmt);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle av_get_planar_sample_fmt$MH() {
        return RuntimeHelper.requireNonNull(constants$1.av_get_planar_sample_fmt$MH,"av_get_planar_sample_fmt");
    }
    /**
     * {@snippet :
     * enum AVSampleFormat av_get_planar_sample_fmt(enum AVSampleFormat sample_fmt);
     * }
     */
    public static int av_get_planar_sample_fmt(int sample_fmt) {
        var mh$ = av_get_planar_sample_fmt$MH();
        try {
            return (int)mh$.invokeExact(sample_fmt);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle av_get_sample_fmt_string$MH() {
        return RuntimeHelper.requireNonNull(constants$1.av_get_sample_fmt_string$MH,"av_get_sample_fmt_string");
    }
    /**
     * {@snippet :
     * char* av_get_sample_fmt_string(char* buf, int buf_size, enum AVSampleFormat sample_fmt);
     * }
     */
    public static MemorySegment av_get_sample_fmt_string(MemorySegment buf, int buf_size, int sample_fmt) {
        var mh$ = av_get_sample_fmt_string$MH();
        try {
            return (java.lang.foreign.MemorySegment)mh$.invokeExact(buf, buf_size, sample_fmt);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle av_get_bytes_per_sample$MH() {
        return RuntimeHelper.requireNonNull(constants$1.av_get_bytes_per_sample$MH,"av_get_bytes_per_sample");
    }
    /**
     * {@snippet :
     * int av_get_bytes_per_sample(enum AVSampleFormat sample_fmt);
     * }
     */
    public static int av_get_bytes_per_sample(int sample_fmt) {
        var mh$ = av_get_bytes_per_sample$MH();
        try {
            return (int)mh$.invokeExact(sample_fmt);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle av_sample_fmt_is_planar$MH() {
        return RuntimeHelper.requireNonNull(constants$2.av_sample_fmt_is_planar$MH,"av_sample_fmt_is_planar");
    }
    /**
     * {@snippet :
     * int av_sample_fmt_is_planar(enum AVSampleFormat sample_fmt);
     * }
     */
    public static int av_sample_fmt_is_planar(int sample_fmt) {
        var mh$ = av_sample_fmt_is_planar$MH();
        try {
            return (int)mh$.invokeExact(sample_fmt);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle av_samples_get_buffer_size$MH() {
        return RuntimeHelper.requireNonNull(constants$2.av_samples_get_buffer_size$MH,"av_samples_get_buffer_size");
    }
    /**
     * {@snippet :
     * int av_samples_get_buffer_size(int* linesize, int nb_channels, int nb_samples, enum AVSampleFormat sample_fmt, int align);
     * }
     */
    public static int av_samples_get_buffer_size(MemorySegment linesize, int nb_channels, int nb_samples, int sample_fmt, int align) {
        var mh$ = av_samples_get_buffer_size$MH();
        try {
            return (int)mh$.invokeExact(linesize, nb_channels, nb_samples, sample_fmt, align);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle av_samples_fill_arrays$MH() {
        return RuntimeHelper.requireNonNull(constants$2.av_samples_fill_arrays$MH,"av_samples_fill_arrays");
    }
    /**
     * {@snippet :
     * int av_samples_fill_arrays(uint8_t** audio_data, int* linesize, const uint8_t* buf, int nb_channels, int nb_samples, enum AVSampleFormat sample_fmt, int align);
     * }
     */
    public static int av_samples_fill_arrays(MemorySegment audio_data, MemorySegment linesize, MemorySegment buf, int nb_channels, int nb_samples, int sample_fmt, int align) {
        var mh$ = av_samples_fill_arrays$MH();
        try {
            return (int)mh$.invokeExact(audio_data, linesize, buf, nb_channels, nb_samples, sample_fmt, align);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle av_samples_alloc$MH() {
        return RuntimeHelper.requireNonNull(constants$2.av_samples_alloc$MH,"av_samples_alloc");
    }
    /**
     * {@snippet :
     * int av_samples_alloc(uint8_t** audio_data, int* linesize, int nb_channels, int nb_samples, enum AVSampleFormat sample_fmt, int align);
     * }
     */
    public static int av_samples_alloc(MemorySegment audio_data, MemorySegment linesize, int nb_channels, int nb_samples, int sample_fmt, int align) {
        var mh$ = av_samples_alloc$MH();
        try {
            return (int)mh$.invokeExact(audio_data, linesize, nb_channels, nb_samples, sample_fmt, align);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle av_samples_alloc_array_and_samples$MH() {
        return RuntimeHelper.requireNonNull(constants$2.av_samples_alloc_array_and_samples$MH,"av_samples_alloc_array_and_samples");
    }
    /**
     * {@snippet :
     * int av_samples_alloc_array_and_samples(uint8_t*** audio_data, int* linesize, int nb_channels, int nb_samples, enum AVSampleFormat sample_fmt, int align);
     * }
     */
    public static int av_samples_alloc_array_and_samples(MemorySegment audio_data, MemorySegment linesize, int nb_channels, int nb_samples, int sample_fmt, int align) {
        var mh$ = av_samples_alloc_array_and_samples$MH();
        try {
            return (int)mh$.invokeExact(audio_data, linesize, nb_channels, nb_samples, sample_fmt, align);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle av_samples_copy$MH() {
        return RuntimeHelper.requireNonNull(constants$2.av_samples_copy$MH,"av_samples_copy");
    }
    /**
     * {@snippet :
     * int av_samples_copy(uint8_t** dst, uint8_t** src, int dst_offset, int src_offset, int nb_samples, int nb_channels, enum AVSampleFormat sample_fmt);
     * }
     */
    public static int av_samples_copy(MemorySegment dst, MemorySegment src, int dst_offset, int src_offset, int nb_samples, int nb_channels, int sample_fmt) {
        var mh$ = av_samples_copy$MH();
        try {
            return (int)mh$.invokeExact(dst, src, dst_offset, src_offset, nb_samples, nb_channels, sample_fmt);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle av_samples_set_silence$MH() {
        return RuntimeHelper.requireNonNull(constants$3.av_samples_set_silence$MH,"av_samples_set_silence");
    }
    /**
     * {@snippet :
     * int av_samples_set_silence(uint8_t** audio_data, int offset, int nb_samples, int nb_channels, enum AVSampleFormat sample_fmt);
     * }
     */
    public static int av_samples_set_silence(MemorySegment audio_data, int offset, int nb_samples, int nb_channels, int sample_fmt) {
        var mh$ = av_samples_set_silence$MH();
        try {
            return (int)mh$.invokeExact(audio_data, offset, nb_samples, nb_channels, sample_fmt);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle avutil_version$MH() {
        return RuntimeHelper.requireNonNull(constants$3.avutil_version$MH,"avutil_version");
    }
    /**
     * {@snippet :
     * unsigned int avutil_version();
     * }
     */
    public static int avutil_version() {
        var mh$ = avutil_version$MH();
        try {
            return (int)mh$.invokeExact();
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle av_version_info$MH() {
        return RuntimeHelper.requireNonNull(constants$3.av_version_info$MH,"av_version_info");
    }
    /**
     * {@snippet :
     * char* av_version_info();
     * }
     */
    public static MemorySegment av_version_info() {
        var mh$ = av_version_info$MH();
        try {
            return (java.lang.foreign.MemorySegment)mh$.invokeExact();
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle avutil_configuration$MH() {
        return RuntimeHelper.requireNonNull(constants$3.avutil_configuration$MH,"avutil_configuration");
    }
    /**
     * {@snippet :
     * char* avutil_configuration();
     * }
     */
    public static MemorySegment avutil_configuration() {
        var mh$ = avutil_configuration$MH();
        try {
            return (java.lang.foreign.MemorySegment)mh$.invokeExact();
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle avutil_license$MH() {
        return RuntimeHelper.requireNonNull(constants$3.avutil_license$MH,"avutil_license");
    }
    /**
     * {@snippet :
     * char* avutil_license();
     * }
     */
    public static MemorySegment avutil_license() {
        var mh$ = avutil_license$MH();
        try {
            return (java.lang.foreign.MemorySegment)mh$.invokeExact();
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    /**
     * {@snippet :
     * enum AVMediaType.AVMEDIA_TYPE_UNKNOWN = -1;
     * }
     */
    public static int AVMEDIA_TYPE_UNKNOWN() {
        return (int)-1L;
    }
    /**
     * {@snippet :
     * enum AVMediaType.AVMEDIA_TYPE_VIDEO = 0;
     * }
     */
    public static int AVMEDIA_TYPE_VIDEO() {
        return (int)0L;
    }
    /**
     * {@snippet :
     * enum AVMediaType.AVMEDIA_TYPE_AUDIO = 1;
     * }
     */
    public static int AVMEDIA_TYPE_AUDIO() {
        return (int)1L;
    }
    /**
     * {@snippet :
     * enum AVMediaType.AVMEDIA_TYPE_DATA = 2;
     * }
     */
    public static int AVMEDIA_TYPE_DATA() {
        return (int)2L;
    }
    /**
     * {@snippet :
     * enum AVMediaType.AVMEDIA_TYPE_SUBTITLE = 3;
     * }
     */
    public static int AVMEDIA_TYPE_SUBTITLE() {
        return (int)3L;
    }
    /**
     * {@snippet :
     * enum AVMediaType.AVMEDIA_TYPE_ATTACHMENT = 4;
     * }
     */
    public static int AVMEDIA_TYPE_ATTACHMENT() {
        return (int)4L;
    }
    /**
     * {@snippet :
     * enum AVMediaType.AVMEDIA_TYPE_NB = 5;
     * }
     */
    public static int AVMEDIA_TYPE_NB() {
        return (int)5L;
    }
    public static MethodHandle av_get_media_type_string$MH() {
        return RuntimeHelper.requireNonNull(constants$3.av_get_media_type_string$MH,"av_get_media_type_string");
    }
    /**
     * {@snippet :
     * char* av_get_media_type_string(enum AVMediaType media_type);
     * }
     */
    public static MemorySegment av_get_media_type_string(int media_type) {
        var mh$ = av_get_media_type_string$MH();
        try {
            return (java.lang.foreign.MemorySegment)mh$.invokeExact(media_type);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    /**
     * {@snippet :
     * enum AVPictureType.AV_PICTURE_TYPE_NONE = 0;
     * }
     */
    public static int AV_PICTURE_TYPE_NONE() {
        return (int)0L;
    }
    /**
     * {@snippet :
     * enum AVPictureType.AV_PICTURE_TYPE_I = 1;
     * }
     */
    public static int AV_PICTURE_TYPE_I() {
        return (int)1L;
    }
    /**
     * {@snippet :
     * enum AVPictureType.AV_PICTURE_TYPE_P = 2;
     * }
     */
    public static int AV_PICTURE_TYPE_P() {
        return (int)2L;
    }
    /**
     * {@snippet :
     * enum AVPictureType.AV_PICTURE_TYPE_B = 3;
     * }
     */
    public static int AV_PICTURE_TYPE_B() {
        return (int)3L;
    }
    /**
     * {@snippet :
     * enum AVPictureType.AV_PICTURE_TYPE_S = 4;
     * }
     */
    public static int AV_PICTURE_TYPE_S() {
        return (int)4L;
    }
    /**
     * {@snippet :
     * enum AVPictureType.AV_PICTURE_TYPE_SI = 5;
     * }
     */
    public static int AV_PICTURE_TYPE_SI() {
        return (int)5L;
    }
    /**
     * {@snippet :
     * enum AVPictureType.AV_PICTURE_TYPE_SP = 6;
     * }
     */
    public static int AV_PICTURE_TYPE_SP() {
        return (int)6L;
    }
    /**
     * {@snippet :
     * enum AVPictureType.AV_PICTURE_TYPE_BI = 7;
     * }
     */
    public static int AV_PICTURE_TYPE_BI() {
        return (int)7L;
    }
    public static MethodHandle av_get_picture_type_char$MH() {
        return RuntimeHelper.requireNonNull(constants$4.av_get_picture_type_char$MH,"av_get_picture_type_char");
    }
    /**
     * {@snippet :
     * char av_get_picture_type_char(enum AVPictureType pict_type);
     * }
     */
    public static byte av_get_picture_type_char(int pict_type) {
        var mh$ = av_get_picture_type_char$MH();
        try {
            return (byte)mh$.invokeExact(pict_type);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle _invalid_parameter_noinfo$MH() {
        return RuntimeHelper.requireNonNull(constants$4._invalid_parameter_noinfo$MH,"_invalid_parameter_noinfo");
    }
    /**
     * {@snippet :
     * void _invalid_parameter_noinfo();
     * }
     */
    public static void _invalid_parameter_noinfo() {
        var mh$ = _invalid_parameter_noinfo$MH();
        try {
            mh$.invokeExact();
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle _invalid_parameter_noinfo_noreturn$MH() {
        return RuntimeHelper.requireNonNull(constants$4._invalid_parameter_noinfo_noreturn$MH,"_invalid_parameter_noinfo_noreturn");
    }
    /**
     * {@snippet :
     * void _invalid_parameter_noinfo_noreturn();
     * }
     */
    public static void _invalid_parameter_noinfo_noreturn() {
        var mh$ = _invalid_parameter_noinfo_noreturn$MH();
        try {
            mh$.invokeExact();
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle _invoke_watson$MH() {
        return RuntimeHelper.requireNonNull(constants$4._invoke_watson$MH,"_invoke_watson");
    }
    /**
     * {@snippet :
     * void _invoke_watson(const wchar_t* _Expression, const wchar_t* _FunctionName, const wchar_t* _FileName, unsigned int _LineNo, uintptr_t _Reserved);
     * }
     */
    public static void _invoke_watson(MemorySegment _Expression, MemorySegment _FunctionName, MemorySegment _FileName, int _LineNo, long _Reserved) {
        var mh$ = _invoke_watson$MH();
        try {
            mh$.invokeExact(_Expression, _FunctionName, _FileName, _LineNo, _Reserved);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    /**
     * {@snippet :
     * typedef int errno_t;
     * }
     */
    public static final OfInt errno_t = Constants$root.C_LONG$LAYOUT;
    /**
     * {@snippet :
     * typedef unsigned short wint_t;
     * }
     */
    public static final OfShort wint_t = Constants$root.C_SHORT$LAYOUT;
    /**
     * {@snippet :
     * typedef unsigned short wctype_t;
     * }
     */
    public static final OfShort wctype_t = Constants$root.C_SHORT$LAYOUT;
    /**
     * {@snippet :
     * typedef long __time32_t;
     * }
     */
    public static final OfInt __time32_t = Constants$root.C_LONG$LAYOUT;
    /**
     * {@snippet :
     * typedef long long __time64_t;
     * }
     */
    public static final OfLong __time64_t = Constants$root.C_LONG_LONG$LAYOUT;
    /**
     * {@snippet :
     * typedef struct __crt_locale_pointers* _locale_t;
     * }
     */
    public static final OfAddress _locale_t = Constants$root.C_POINTER$LAYOUT;
    /**
     * {@snippet :
     * typedef long long time_t;
     * }
     */
    public static final OfLong time_t = Constants$root.C_LONG_LONG$LAYOUT;
    /**
     * {@snippet :
     * typedef unsigned long long rsize_t;
     * }
     */
    public static final OfLong rsize_t = Constants$root.C_LONG_LONG$LAYOUT;
    public static MethodHandle _errno$MH() {
        return RuntimeHelper.requireNonNull(constants$4._errno$MH,"_errno");
    }
    /**
     * {@snippet :
     * int* _errno();
     * }
     */
    public static MemorySegment _errno() {
        var mh$ = _errno$MH();
        try {
            return (java.lang.foreign.MemorySegment)mh$.invokeExact();
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle _set_errno$MH() {
        return RuntimeHelper.requireNonNull(constants$4._set_errno$MH,"_set_errno");
    }
    /**
     * {@snippet :
     * errno_t _set_errno(int _Value);
     * }
     */
    public static int _set_errno(int _Value) {
        var mh$ = _set_errno$MH();
        try {
            return (int)mh$.invokeExact(_Value);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle _get_errno$MH() {
        return RuntimeHelper.requireNonNull(constants$5._get_errno$MH,"_get_errno");
    }
    /**
     * {@snippet :
     * errno_t _get_errno(int* _Value);
     * }
     */
    public static int _get_errno(MemorySegment _Value) {
        var mh$ = _get_errno$MH();
        try {
            return (int)mh$.invokeExact(_Value);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle __doserrno$MH() {
        return RuntimeHelper.requireNonNull(constants$5.__doserrno$MH,"__doserrno");
    }
    /**
     * {@snippet :
     * unsigned long* __doserrno();
     * }
     */
    public static MemorySegment __doserrno() {
        var mh$ = __doserrno$MH();
        try {
            return (java.lang.foreign.MemorySegment)mh$.invokeExact();
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle _set_doserrno$MH() {
        return RuntimeHelper.requireNonNull(constants$5._set_doserrno$MH,"_set_doserrno");
    }
    /**
     * {@snippet :
     * errno_t _set_doserrno(unsigned long _Value);
     * }
     */
    public static int _set_doserrno(int _Value) {
        var mh$ = _set_doserrno$MH();
        try {
            return (int)mh$.invokeExact(_Value);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle _get_doserrno$MH() {
        return RuntimeHelper.requireNonNull(constants$5._get_doserrno$MH,"_get_doserrno");
    }
    /**
     * {@snippet :
     * errno_t _get_doserrno(unsigned long* _Value);
     * }
     */
    public static int _get_doserrno(MemorySegment _Value) {
        var mh$ = _get_doserrno$MH();
        try {
            return (int)mh$.invokeExact(_Value);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle imaxabs$MH() {
        return RuntimeHelper.requireNonNull(constants$5.imaxabs$MH,"imaxabs");
    }
    /**
     * {@snippet :
     * intmax_t imaxabs(intmax_t _Number);
     * }
     */
    public static long imaxabs(long _Number) {
        var mh$ = imaxabs$MH();
        try {
            return (long)mh$.invokeExact(_Number);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle imaxdiv$MH() {
        return RuntimeHelper.requireNonNull(constants$5.imaxdiv$MH,"imaxdiv");
    }
    /**
     * {@snippet :
     * imaxdiv_t imaxdiv(intmax_t _Numerator, intmax_t _Denominator);
     * }
     */
    public static MemorySegment imaxdiv(SegmentAllocator allocator, long _Numerator, long _Denominator) {
        var mh$ = imaxdiv$MH();
        try {
            return (java.lang.foreign.MemorySegment)mh$.invokeExact(allocator, _Numerator, _Denominator);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle strtoimax$MH() {
        return RuntimeHelper.requireNonNull(constants$6.strtoimax$MH,"strtoimax");
    }
    /**
     * {@snippet :
     * intmax_t strtoimax(char* _String, char** _EndPtr, int _Radix);
     * }
     */
    public static long strtoimax(MemorySegment _String, MemorySegment _EndPtr, int _Radix) {
        var mh$ = strtoimax$MH();
        try {
            return (long)mh$.invokeExact(_String, _EndPtr, _Radix);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle _strtoimax_l$MH() {
        return RuntimeHelper.requireNonNull(constants$6._strtoimax_l$MH,"_strtoimax_l");
    }
    /**
     * {@snippet :
     * intmax_t _strtoimax_l(char* _String, char** _EndPtr, int _Radix, _locale_t _Locale);
     * }
     */
    public static long _strtoimax_l(MemorySegment _String, MemorySegment _EndPtr, int _Radix, MemorySegment _Locale) {
        var mh$ = _strtoimax_l$MH();
        try {
            return (long)mh$.invokeExact(_String, _EndPtr, _Radix, _Locale);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle strtoumax$MH() {
        return RuntimeHelper.requireNonNull(constants$6.strtoumax$MH,"strtoumax");
    }
    /**
     * {@snippet :
     * uintmax_t strtoumax(char* _String, char** _EndPtr, int _Radix);
     * }
     */
    public static long strtoumax(MemorySegment _String, MemorySegment _EndPtr, int _Radix) {
        var mh$ = strtoumax$MH();
        try {
            return (long)mh$.invokeExact(_String, _EndPtr, _Radix);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle _strtoumax_l$MH() {
        return RuntimeHelper.requireNonNull(constants$6._strtoumax_l$MH,"_strtoumax_l");
    }
    /**
     * {@snippet :
     * uintmax_t _strtoumax_l(char* _String, char** _EndPtr, int _Radix, _locale_t _Locale);
     * }
     */
    public static long _strtoumax_l(MemorySegment _String, MemorySegment _EndPtr, int _Radix, MemorySegment _Locale) {
        var mh$ = _strtoumax_l$MH();
        try {
            return (long)mh$.invokeExact(_String, _EndPtr, _Radix, _Locale);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle wcstoimax$MH() {
        return RuntimeHelper.requireNonNull(constants$6.wcstoimax$MH,"wcstoimax");
    }
    /**
     * {@snippet :
     * intmax_t wcstoimax(const wchar_t* _String, wchar_t** _EndPtr, int _Radix);
     * }
     */
    public static long wcstoimax(MemorySegment _String, MemorySegment _EndPtr, int _Radix) {
        var mh$ = wcstoimax$MH();
        try {
            return (long)mh$.invokeExact(_String, _EndPtr, _Radix);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle _wcstoimax_l$MH() {
        return RuntimeHelper.requireNonNull(constants$6._wcstoimax_l$MH,"_wcstoimax_l");
    }
    /**
     * {@snippet :
     * intmax_t _wcstoimax_l(const wchar_t* _String, wchar_t** _EndPtr, int _Radix, _locale_t _Locale);
     * }
     */
    public static long _wcstoimax_l(MemorySegment _String, MemorySegment _EndPtr, int _Radix, MemorySegment _Locale) {
        var mh$ = _wcstoimax_l$MH();
        try {
            return (long)mh$.invokeExact(_String, _EndPtr, _Radix, _Locale);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle wcstoumax$MH() {
        return RuntimeHelper.requireNonNull(constants$7.wcstoumax$MH,"wcstoumax");
    }
    /**
     * {@snippet :
     * uintmax_t wcstoumax(const wchar_t* _String, wchar_t** _EndPtr, int _Radix);
     * }
     */
    public static long wcstoumax(MemorySegment _String, MemorySegment _EndPtr, int _Radix) {
        var mh$ = wcstoumax$MH();
        try {
            return (long)mh$.invokeExact(_String, _EndPtr, _Radix);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle _wcstoumax_l$MH() {
        return RuntimeHelper.requireNonNull(constants$7._wcstoumax_l$MH,"_wcstoumax_l");
    }
    /**
     * {@snippet :
     * uintmax_t _wcstoumax_l(const wchar_t* _String, wchar_t** _EndPtr, int _Radix, _locale_t _Locale);
     * }
     */
    public static long _wcstoumax_l(MemorySegment _String, MemorySegment _EndPtr, int _Radix, MemorySegment _Locale) {
        var mh$ = _wcstoumax_l$MH();
        try {
            return (long)mh$.invokeExact(_String, _EndPtr, _Radix, _Locale);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    /**
     * {@snippet :
     * typedef float float_t;
     * }
     */
    public static final OfFloat float_t = Constants$root.C_FLOAT$LAYOUT;
    /**
     * {@snippet :
     * typedef double double_t;
     * }
     */
    public static final OfDouble double_t = Constants$root.C_DOUBLE$LAYOUT;
    public static MemoryLayout _HUGE$LAYOUT() {
        return constants$7._HUGE$LAYOUT;
    }
    public static VarHandle _HUGE$VH() {
        return constants$7._HUGE$VH;
    }
    public static MemorySegment _HUGE$SEGMENT() {
        return RuntimeHelper.requireNonNull(constants$7._HUGE$SEGMENT,"_HUGE");
    }
    /**
     * Getter for variable:
     * {@snippet :
     * double _HUGE;
     * }
     */
    public static double _HUGE$get() {
        return (double) constants$7._HUGE$VH.get(RuntimeHelper.requireNonNull(constants$7._HUGE$SEGMENT, "_HUGE"));
    }
    /**
     * Setter for variable:
     * {@snippet :
     * double _HUGE;
     * }
     */
    public static void _HUGE$set(double x) {
        constants$7._HUGE$VH.set(RuntimeHelper.requireNonNull(constants$7._HUGE$SEGMENT, "_HUGE"), x);
    }
    public static MethodHandle _fperrraise$MH() {
        return RuntimeHelper.requireNonNull(constants$7._fperrraise$MH,"_fperrraise");
    }
    /**
     * {@snippet :
     * void _fperrraise(int _Except);
     * }
     */
    public static void _fperrraise(int _Except) {
        var mh$ = _fperrraise$MH();
        try {
            mh$.invokeExact(_Except);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle _dclass$MH() {
        return RuntimeHelper.requireNonNull(constants$7._dclass$MH,"_dclass");
    }
    /**
     * {@snippet :
     * short _dclass(double _X);
     * }
     */
    public static short _dclass(double _X) {
        var mh$ = _dclass$MH();
        try {
            return (short)mh$.invokeExact(_X);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle _fdclass$MH() {
        return RuntimeHelper.requireNonNull(constants$7._fdclass$MH,"_fdclass");
    }
    /**
     * {@snippet :
     * short _fdclass(float _X);
     * }
     */
    public static short _fdclass(float _X) {
        var mh$ = _fdclass$MH();
        try {
            return (short)mh$.invokeExact(_X);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle _dsign$MH() {
        return RuntimeHelper.requireNonNull(constants$8._dsign$MH,"_dsign");
    }
    /**
     * {@snippet :
     * int _dsign(double _X);
     * }
     */
    public static int _dsign(double _X) {
        var mh$ = _dsign$MH();
        try {
            return (int)mh$.invokeExact(_X);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle _fdsign$MH() {
        return RuntimeHelper.requireNonNull(constants$8._fdsign$MH,"_fdsign");
    }
    /**
     * {@snippet :
     * int _fdsign(float _X);
     * }
     */
    public static int _fdsign(float _X) {
        var mh$ = _fdsign$MH();
        try {
            return (int)mh$.invokeExact(_X);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle _dpcomp$MH() {
        return RuntimeHelper.requireNonNull(constants$8._dpcomp$MH,"_dpcomp");
    }
    /**
     * {@snippet :
     * int _dpcomp(double _X, double _Y);
     * }
     */
    public static int _dpcomp(double _X, double _Y) {
        var mh$ = _dpcomp$MH();
        try {
            return (int)mh$.invokeExact(_X, _Y);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle _fdpcomp$MH() {
        return RuntimeHelper.requireNonNull(constants$8._fdpcomp$MH,"_fdpcomp");
    }
    /**
     * {@snippet :
     * int _fdpcomp(float _X, float _Y);
     * }
     */
    public static int _fdpcomp(float _X, float _Y) {
        var mh$ = _fdpcomp$MH();
        try {
            return (int)mh$.invokeExact(_X, _Y);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle _dtest$MH() {
        return RuntimeHelper.requireNonNull(constants$8._dtest$MH,"_dtest");
    }
    /**
     * {@snippet :
     * short _dtest(double* _Px);
     * }
     */
    public static short _dtest(MemorySegment _Px) {
        var mh$ = _dtest$MH();
        try {
            return (short)mh$.invokeExact(_Px);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle _ldtest$MH() {
        return RuntimeHelper.requireNonNull(constants$8._ldtest$MH,"_ldtest");
    }
    /**
     * {@snippet :
     * short _ldtest(long double* _Px);
     * }
     */
    public static short _ldtest(MemorySegment _Px) {
        var mh$ = _ldtest$MH();
        try {
            return (short)mh$.invokeExact(_Px);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle _fdtest$MH() {
        return RuntimeHelper.requireNonNull(constants$9._fdtest$MH,"_fdtest");
    }
    /**
     * {@snippet :
     * short _fdtest(float* _Px);
     * }
     */
    public static short _fdtest(MemorySegment _Px) {
        var mh$ = _fdtest$MH();
        try {
            return (short)mh$.invokeExact(_Px);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle _d_int$MH() {
        return RuntimeHelper.requireNonNull(constants$9._d_int$MH,"_d_int");
    }
    /**
     * {@snippet :
     * short _d_int(double* _Px, short _Xexp);
     * }
     */
    public static short _d_int(MemorySegment _Px, short _Xexp) {
        var mh$ = _d_int$MH();
        try {
            return (short)mh$.invokeExact(_Px, _Xexp);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle _ld_int$MH() {
        return RuntimeHelper.requireNonNull(constants$9._ld_int$MH,"_ld_int");
    }
    /**
     * {@snippet :
     * short _ld_int(long double* _Px, short _Xexp);
     * }
     */
    public static short _ld_int(MemorySegment _Px, short _Xexp) {
        var mh$ = _ld_int$MH();
        try {
            return (short)mh$.invokeExact(_Px, _Xexp);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle _fd_int$MH() {
        return RuntimeHelper.requireNonNull(constants$9._fd_int$MH,"_fd_int");
    }
    /**
     * {@snippet :
     * short _fd_int(float* _Px, short _Xexp);
     * }
     */
    public static short _fd_int(MemorySegment _Px, short _Xexp) {
        var mh$ = _fd_int$MH();
        try {
            return (short)mh$.invokeExact(_Px, _Xexp);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle _dscale$MH() {
        return RuntimeHelper.requireNonNull(constants$9._dscale$MH,"_dscale");
    }
    /**
     * {@snippet :
     * short _dscale(double* _Px, long _Lexp);
     * }
     */
    public static short _dscale(MemorySegment _Px, int _Lexp) {
        var mh$ = _dscale$MH();
        try {
            return (short)mh$.invokeExact(_Px, _Lexp);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle _ldscale$MH() {
        return RuntimeHelper.requireNonNull(constants$9._ldscale$MH,"_ldscale");
    }
    /**
     * {@snippet :
     * short _ldscale(long double* _Px, long _Lexp);
     * }
     */
    public static short _ldscale(MemorySegment _Px, int _Lexp) {
        var mh$ = _ldscale$MH();
        try {
            return (short)mh$.invokeExact(_Px, _Lexp);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle _fdscale$MH() {
        return RuntimeHelper.requireNonNull(constants$10._fdscale$MH,"_fdscale");
    }
    /**
     * {@snippet :
     * short _fdscale(float* _Px, long _Lexp);
     * }
     */
    public static short _fdscale(MemorySegment _Px, int _Lexp) {
        var mh$ = _fdscale$MH();
        try {
            return (short)mh$.invokeExact(_Px, _Lexp);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle _dunscale$MH() {
        return RuntimeHelper.requireNonNull(constants$10._dunscale$MH,"_dunscale");
    }
    /**
     * {@snippet :
     * short _dunscale(short* _Pex, double* _Px);
     * }
     */
    public static short _dunscale(MemorySegment _Pex, MemorySegment _Px) {
        var mh$ = _dunscale$MH();
        try {
            return (short)mh$.invokeExact(_Pex, _Px);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle _ldunscale$MH() {
        return RuntimeHelper.requireNonNull(constants$10._ldunscale$MH,"_ldunscale");
    }
    /**
     * {@snippet :
     * short _ldunscale(short* _Pex, long double* _Px);
     * }
     */
    public static short _ldunscale(MemorySegment _Pex, MemorySegment _Px) {
        var mh$ = _ldunscale$MH();
        try {
            return (short)mh$.invokeExact(_Pex, _Px);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle _fdunscale$MH() {
        return RuntimeHelper.requireNonNull(constants$10._fdunscale$MH,"_fdunscale");
    }
    /**
     * {@snippet :
     * short _fdunscale(short* _Pex, float* _Px);
     * }
     */
    public static short _fdunscale(MemorySegment _Pex, MemorySegment _Px) {
        var mh$ = _fdunscale$MH();
        try {
            return (short)mh$.invokeExact(_Pex, _Px);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle _dexp$MH() {
        return RuntimeHelper.requireNonNull(constants$10._dexp$MH,"_dexp");
    }
    /**
     * {@snippet :
     * short _dexp(double* _Px, double _Y, long _Eoff);
     * }
     */
    public static short _dexp(MemorySegment _Px, double _Y, int _Eoff) {
        var mh$ = _dexp$MH();
        try {
            return (short)mh$.invokeExact(_Px, _Y, _Eoff);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle _fdexp$MH() {
        return RuntimeHelper.requireNonNull(constants$10._fdexp$MH,"_fdexp");
    }
    /**
     * {@snippet :
     * short _fdexp(float* _Px, float _Y, long _Eoff);
     * }
     */
    public static short _fdexp(MemorySegment _Px, float _Y, int _Eoff) {
        var mh$ = _fdexp$MH();
        try {
            return (short)mh$.invokeExact(_Px, _Y, _Eoff);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle _dnorm$MH() {
        return RuntimeHelper.requireNonNull(constants$11._dnorm$MH,"_dnorm");
    }
    /**
     * {@snippet :
     * short _dnorm(unsigned short* _Ps);
     * }
     */
    public static short _dnorm(MemorySegment _Ps) {
        var mh$ = _dnorm$MH();
        try {
            return (short)mh$.invokeExact(_Ps);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle _fdnorm$MH() {
        return RuntimeHelper.requireNonNull(constants$11._fdnorm$MH,"_fdnorm");
    }
    /**
     * {@snippet :
     * short _fdnorm(unsigned short* _Ps);
     * }
     */
    public static short _fdnorm(MemorySegment _Ps) {
        var mh$ = _fdnorm$MH();
        try {
            return (short)mh$.invokeExact(_Ps);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle _dpoly$MH() {
        return RuntimeHelper.requireNonNull(constants$11._dpoly$MH,"_dpoly");
    }
    /**
     * {@snippet :
     * double _dpoly(double _X, double* _Tab, int _N);
     * }
     */
    public static double _dpoly(double _X, MemorySegment _Tab, int _N) {
        var mh$ = _dpoly$MH();
        try {
            return (double)mh$.invokeExact(_X, _Tab, _N);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle _fdpoly$MH() {
        return RuntimeHelper.requireNonNull(constants$11._fdpoly$MH,"_fdpoly");
    }
    /**
     * {@snippet :
     * float _fdpoly(float _X, float* _Tab, int _N);
     * }
     */
    public static float _fdpoly(float _X, MemorySegment _Tab, int _N) {
        var mh$ = _fdpoly$MH();
        try {
            return (float)mh$.invokeExact(_X, _Tab, _N);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle _dlog$MH() {
        return RuntimeHelper.requireNonNull(constants$11._dlog$MH,"_dlog");
    }
    /**
     * {@snippet :
     * double _dlog(double _X, int _Baseflag);
     * }
     */
    public static double _dlog(double _X, int _Baseflag) {
        var mh$ = _dlog$MH();
        try {
            return (double)mh$.invokeExact(_X, _Baseflag);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle _fdlog$MH() {
        return RuntimeHelper.requireNonNull(constants$11._fdlog$MH,"_fdlog");
    }
    /**
     * {@snippet :
     * float _fdlog(float _X, int _Baseflag);
     * }
     */
    public static float _fdlog(float _X, int _Baseflag) {
        var mh$ = _fdlog$MH();
        try {
            return (float)mh$.invokeExact(_X, _Baseflag);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle _dsin$MH() {
        return RuntimeHelper.requireNonNull(constants$12._dsin$MH,"_dsin");
    }
    /**
     * {@snippet :
     * double _dsin(double _X, unsigned int _Qoff);
     * }
     */
    public static double _dsin(double _X, int _Qoff) {
        var mh$ = _dsin$MH();
        try {
            return (double)mh$.invokeExact(_X, _Qoff);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle _fdsin$MH() {
        return RuntimeHelper.requireNonNull(constants$12._fdsin$MH,"_fdsin");
    }
    /**
     * {@snippet :
     * float _fdsin(float _X, unsigned int _Qoff);
     * }
     */
    public static float _fdsin(float _X, int _Qoff) {
        var mh$ = _fdsin$MH();
        try {
            return (float)mh$.invokeExact(_X, _Qoff);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MemoryLayout _Zero_C$LAYOUT() {
        return constants$12._Zero_C$LAYOUT;
    }
    public static VarHandle _Zero_C$VH() {
        return constants$12._Zero_C$VH;
    }
    public static MemorySegment _Zero_C$SEGMENT() {
        return RuntimeHelper.requireNonNull(constants$12._Zero_C$SEGMENT,"_Zero_C");
    }
    /**
     * Getter for variable:
     * {@snippet :
     * double _Zero_C;
     * }
     */
    public static double _Zero_C$get() {
        return (double) constants$12._Zero_C$VH.get(RuntimeHelper.requireNonNull(constants$12._Zero_C$SEGMENT, "_Zero_C"));
    }
    /**
     * Setter for variable:
     * {@snippet :
     * double _Zero_C;
     * }
     */
    public static void _Zero_C$set(double x) {
        constants$12._Zero_C$VH.set(RuntimeHelper.requireNonNull(constants$12._Zero_C$SEGMENT, "_Zero_C"), x);
    }
    public static MemoryLayout _Xbig_C$LAYOUT() {
        return constants$12._Xbig_C$LAYOUT;
    }
    public static VarHandle _Xbig_C$VH() {
        return constants$12._Xbig_C$VH;
    }
    public static MemorySegment _Xbig_C$SEGMENT() {
        return RuntimeHelper.requireNonNull(constants$12._Xbig_C$SEGMENT,"_Xbig_C");
    }
    /**
     * Getter for variable:
     * {@snippet :
     * double _Xbig_C;
     * }
     */
    public static double _Xbig_C$get() {
        return (double) constants$12._Xbig_C$VH.get(RuntimeHelper.requireNonNull(constants$12._Xbig_C$SEGMENT, "_Xbig_C"));
    }
    /**
     * Setter for variable:
     * {@snippet :
     * double _Xbig_C;
     * }
     */
    public static void _Xbig_C$set(double x) {
        constants$12._Xbig_C$VH.set(RuntimeHelper.requireNonNull(constants$12._Xbig_C$SEGMENT, "_Xbig_C"), x);
    }
    public static MemoryLayout _FZero_C$LAYOUT() {
        return constants$12._FZero_C$LAYOUT;
    }
    public static VarHandle _FZero_C$VH() {
        return constants$12._FZero_C$VH;
    }
    public static MemorySegment _FZero_C$SEGMENT() {
        return RuntimeHelper.requireNonNull(constants$12._FZero_C$SEGMENT,"_FZero_C");
    }
    /**
     * Getter for variable:
     * {@snippet :
     * float _FZero_C;
     * }
     */
    public static float _FZero_C$get() {
        return (float) constants$12._FZero_C$VH.get(RuntimeHelper.requireNonNull(constants$12._FZero_C$SEGMENT, "_FZero_C"));
    }
    /**
     * Setter for variable:
     * {@snippet :
     * float _FZero_C;
     * }
     */
    public static void _FZero_C$set(float x) {
        constants$12._FZero_C$VH.set(RuntimeHelper.requireNonNull(constants$12._FZero_C$SEGMENT, "_FZero_C"), x);
    }
    public static MemoryLayout _FXbig_C$LAYOUT() {
        return constants$12._FXbig_C$LAYOUT;
    }
    public static VarHandle _FXbig_C$VH() {
        return constants$12._FXbig_C$VH;
    }
    public static MemorySegment _FXbig_C$SEGMENT() {
        return RuntimeHelper.requireNonNull(constants$12._FXbig_C$SEGMENT,"_FXbig_C");
    }
    /**
     * Getter for variable:
     * {@snippet :
     * float _FXbig_C;
     * }
     */
    public static float _FXbig_C$get() {
        return (float) constants$12._FXbig_C$VH.get(RuntimeHelper.requireNonNull(constants$12._FXbig_C$SEGMENT, "_FXbig_C"));
    }
    /**
     * Setter for variable:
     * {@snippet :
     * float _FXbig_C;
     * }
     */
    public static void _FXbig_C$set(float x) {
        constants$12._FXbig_C$VH.set(RuntimeHelper.requireNonNull(constants$12._FXbig_C$SEGMENT, "_FXbig_C"), x);
    }
    public static MethodHandle abs$MH() {
        return RuntimeHelper.requireNonNull(constants$13.abs$MH,"abs");
    }
    /**
     * {@snippet :
     * int abs(int _X);
     * }
     */
    public static int abs(int _X) {
        var mh$ = abs$MH();
        try {
            return (int)mh$.invokeExact(_X);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle labs$MH() {
        return RuntimeHelper.requireNonNull(constants$13.labs$MH,"labs");
    }
    /**
     * {@snippet :
     * long labs(long _X);
     * }
     */
    public static int labs(int _X) {
        var mh$ = labs$MH();
        try {
            return (int)mh$.invokeExact(_X);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle llabs$MH() {
        return RuntimeHelper.requireNonNull(constants$13.llabs$MH,"llabs");
    }
    /**
     * {@snippet :
     * long long llabs(long long _X);
     * }
     */
    public static long llabs(long _X) {
        var mh$ = llabs$MH();
        try {
            return (long)mh$.invokeExact(_X);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle acos$MH() {
        return RuntimeHelper.requireNonNull(constants$13.acos$MH,"acos");
    }
    /**
     * {@snippet :
     * double acos(double _X);
     * }
     */
    public static double acos(double _X) {
        var mh$ = acos$MH();
        try {
            return (double)mh$.invokeExact(_X);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle asin$MH() {
        return RuntimeHelper.requireNonNull(constants$13.asin$MH,"asin");
    }
    /**
     * {@snippet :
     * double asin(double _X);
     * }
     */
    public static double asin(double _X) {
        var mh$ = asin$MH();
        try {
            return (double)mh$.invokeExact(_X);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle atan$MH() {
        return RuntimeHelper.requireNonNull(constants$13.atan$MH,"atan");
    }
    /**
     * {@snippet :
     * double atan(double _X);
     * }
     */
    public static double atan(double _X) {
        var mh$ = atan$MH();
        try {
            return (double)mh$.invokeExact(_X);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle atan2$MH() {
        return RuntimeHelper.requireNonNull(constants$14.atan2$MH,"atan2");
    }
    /**
     * {@snippet :
     * double atan2(double _Y, double _X);
     * }
     */
    public static double atan2(double _Y, double _X) {
        var mh$ = atan2$MH();
        try {
            return (double)mh$.invokeExact(_Y, _X);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle cos$MH() {
        return RuntimeHelper.requireNonNull(constants$14.cos$MH,"cos");
    }
    /**
     * {@snippet :
     * double cos(double _X);
     * }
     */
    public static double cos(double _X) {
        var mh$ = cos$MH();
        try {
            return (double)mh$.invokeExact(_X);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle cosh$MH() {
        return RuntimeHelper.requireNonNull(constants$14.cosh$MH,"cosh");
    }
    /**
     * {@snippet :
     * double cosh(double _X);
     * }
     */
    public static double cosh(double _X) {
        var mh$ = cosh$MH();
        try {
            return (double)mh$.invokeExact(_X);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle exp$MH() {
        return RuntimeHelper.requireNonNull(constants$14.exp$MH,"exp");
    }
    /**
     * {@snippet :
     * double exp(double _X);
     * }
     */
    public static double exp(double _X) {
        var mh$ = exp$MH();
        try {
            return (double)mh$.invokeExact(_X);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle fabs$MH() {
        return RuntimeHelper.requireNonNull(constants$14.fabs$MH,"fabs");
    }
    /**
     * {@snippet :
     * double fabs(double _X);
     * }
     */
    public static double fabs(double _X) {
        var mh$ = fabs$MH();
        try {
            return (double)mh$.invokeExact(_X);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle fmod$MH() {
        return RuntimeHelper.requireNonNull(constants$14.fmod$MH,"fmod");
    }
    /**
     * {@snippet :
     * double fmod(double _X, double _Y);
     * }
     */
    public static double fmod(double _X, double _Y) {
        var mh$ = fmod$MH();
        try {
            return (double)mh$.invokeExact(_X, _Y);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle log$MH() {
        return RuntimeHelper.requireNonNull(constants$15.log$MH,"log");
    }
    /**
     * {@snippet :
     * double log(double _X);
     * }
     */
    public static double log(double _X) {
        var mh$ = log$MH();
        try {
            return (double)mh$.invokeExact(_X);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle log10$MH() {
        return RuntimeHelper.requireNonNull(constants$15.log10$MH,"log10");
    }
    /**
     * {@snippet :
     * double log10(double _X);
     * }
     */
    public static double log10(double _X) {
        var mh$ = log10$MH();
        try {
            return (double)mh$.invokeExact(_X);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle pow$MH() {
        return RuntimeHelper.requireNonNull(constants$15.pow$MH,"pow");
    }
    /**
     * {@snippet :
     * double pow(double _X, double _Y);
     * }
     */
    public static double pow(double _X, double _Y) {
        var mh$ = pow$MH();
        try {
            return (double)mh$.invokeExact(_X, _Y);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle sin$MH() {
        return RuntimeHelper.requireNonNull(constants$15.sin$MH,"sin");
    }
    /**
     * {@snippet :
     * double sin(double _X);
     * }
     */
    public static double sin(double _X) {
        var mh$ = sin$MH();
        try {
            return (double)mh$.invokeExact(_X);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle sinh$MH() {
        return RuntimeHelper.requireNonNull(constants$15.sinh$MH,"sinh");
    }
    /**
     * {@snippet :
     * double sinh(double _X);
     * }
     */
    public static double sinh(double _X) {
        var mh$ = sinh$MH();
        try {
            return (double)mh$.invokeExact(_X);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle sqrt$MH() {
        return RuntimeHelper.requireNonNull(constants$15.sqrt$MH,"sqrt");
    }
    /**
     * {@snippet :
     * double sqrt(double _X);
     * }
     */
    public static double sqrt(double _X) {
        var mh$ = sqrt$MH();
        try {
            return (double)mh$.invokeExact(_X);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle tan$MH() {
        return RuntimeHelper.requireNonNull(constants$16.tan$MH,"tan");
    }
    /**
     * {@snippet :
     * double tan(double _X);
     * }
     */
    public static double tan(double _X) {
        var mh$ = tan$MH();
        try {
            return (double)mh$.invokeExact(_X);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle tanh$MH() {
        return RuntimeHelper.requireNonNull(constants$16.tanh$MH,"tanh");
    }
    /**
     * {@snippet :
     * double tanh(double _X);
     * }
     */
    public static double tanh(double _X) {
        var mh$ = tanh$MH();
        try {
            return (double)mh$.invokeExact(_X);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle acosh$MH() {
        return RuntimeHelper.requireNonNull(constants$16.acosh$MH,"acosh");
    }
    /**
     * {@snippet :
     * double acosh(double _X);
     * }
     */
    public static double acosh(double _X) {
        var mh$ = acosh$MH();
        try {
            return (double)mh$.invokeExact(_X);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle asinh$MH() {
        return RuntimeHelper.requireNonNull(constants$16.asinh$MH,"asinh");
    }
    /**
     * {@snippet :
     * double asinh(double _X);
     * }
     */
    public static double asinh(double _X) {
        var mh$ = asinh$MH();
        try {
            return (double)mh$.invokeExact(_X);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle atanh$MH() {
        return RuntimeHelper.requireNonNull(constants$16.atanh$MH,"atanh");
    }
    /**
     * {@snippet :
     * double atanh(double _X);
     * }
     */
    public static double atanh(double _X) {
        var mh$ = atanh$MH();
        try {
            return (double)mh$.invokeExact(_X);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle atof$MH() {
        return RuntimeHelper.requireNonNull(constants$16.atof$MH,"atof");
    }
    /**
     * {@snippet :
     * double atof(char* _String);
     * }
     */
    public static double atof(MemorySegment _String) {
        var mh$ = atof$MH();
        try {
            return (double)mh$.invokeExact(_String);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle _atof_l$MH() {
        return RuntimeHelper.requireNonNull(constants$17._atof_l$MH,"_atof_l");
    }
    /**
     * {@snippet :
     * double _atof_l(char* _String, _locale_t _Locale);
     * }
     */
    public static double _atof_l(MemorySegment _String, MemorySegment _Locale) {
        var mh$ = _atof_l$MH();
        try {
            return (double)mh$.invokeExact(_String, _Locale);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle _cabs$MH() {
        return RuntimeHelper.requireNonNull(constants$17._cabs$MH,"_cabs");
    }
    /**
     * {@snippet :
     * double _cabs(struct _complex _Complex_value);
     * }
     */
    public static double _cabs(MemorySegment _Complex_value) {
        var mh$ = _cabs$MH();
        try {
            return (double)mh$.invokeExact(_Complex_value);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle cbrt$MH() {
        return RuntimeHelper.requireNonNull(constants$17.cbrt$MH,"cbrt");
    }
    /**
     * {@snippet :
     * double cbrt(double _X);
     * }
     */
    public static double cbrt(double _X) {
        var mh$ = cbrt$MH();
        try {
            return (double)mh$.invokeExact(_X);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle ceil$MH() {
        return RuntimeHelper.requireNonNull(constants$17.ceil$MH,"ceil");
    }
    /**
     * {@snippet :
     * double ceil(double _X);
     * }
     */
    public static double ceil(double _X) {
        var mh$ = ceil$MH();
        try {
            return (double)mh$.invokeExact(_X);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle _chgsign$MH() {
        return RuntimeHelper.requireNonNull(constants$17._chgsign$MH,"_chgsign");
    }
    /**
     * {@snippet :
     * double _chgsign(double _X);
     * }
     */
    public static double _chgsign(double _X) {
        var mh$ = _chgsign$MH();
        try {
            return (double)mh$.invokeExact(_X);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle copysign$MH() {
        return RuntimeHelper.requireNonNull(constants$17.copysign$MH,"copysign");
    }
    /**
     * {@snippet :
     * double copysign(double _Number, double _Sign);
     * }
     */
    public static double copysign(double _Number, double _Sign) {
        var mh$ = copysign$MH();
        try {
            return (double)mh$.invokeExact(_Number, _Sign);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle _copysign$MH() {
        return RuntimeHelper.requireNonNull(constants$18._copysign$MH,"_copysign");
    }
    /**
     * {@snippet :
     * double _copysign(double _Number, double _Sign);
     * }
     */
    public static double _copysign(double _Number, double _Sign) {
        var mh$ = _copysign$MH();
        try {
            return (double)mh$.invokeExact(_Number, _Sign);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle erf$MH() {
        return RuntimeHelper.requireNonNull(constants$18.erf$MH,"erf");
    }
    /**
     * {@snippet :
     * double erf(double _X);
     * }
     */
    public static double erf(double _X) {
        var mh$ = erf$MH();
        try {
            return (double)mh$.invokeExact(_X);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle erfc$MH() {
        return RuntimeHelper.requireNonNull(constants$18.erfc$MH,"erfc");
    }
    /**
     * {@snippet :
     * double erfc(double _X);
     * }
     */
    public static double erfc(double _X) {
        var mh$ = erfc$MH();
        try {
            return (double)mh$.invokeExact(_X);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle exp2$MH() {
        return RuntimeHelper.requireNonNull(constants$18.exp2$MH,"exp2");
    }
    /**
     * {@snippet :
     * double exp2(double _X);
     * }
     */
    public static double exp2(double _X) {
        var mh$ = exp2$MH();
        try {
            return (double)mh$.invokeExact(_X);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle expm1$MH() {
        return RuntimeHelper.requireNonNull(constants$18.expm1$MH,"expm1");
    }
    /**
     * {@snippet :
     * double expm1(double _X);
     * }
     */
    public static double expm1(double _X) {
        var mh$ = expm1$MH();
        try {
            return (double)mh$.invokeExact(_X);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle fdim$MH() {
        return RuntimeHelper.requireNonNull(constants$18.fdim$MH,"fdim");
    }
    /**
     * {@snippet :
     * double fdim(double _X, double _Y);
     * }
     */
    public static double fdim(double _X, double _Y) {
        var mh$ = fdim$MH();
        try {
            return (double)mh$.invokeExact(_X, _Y);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle floor$MH() {
        return RuntimeHelper.requireNonNull(constants$19.floor$MH,"floor");
    }
    /**
     * {@snippet :
     * double floor(double _X);
     * }
     */
    public static double floor(double _X) {
        var mh$ = floor$MH();
        try {
            return (double)mh$.invokeExact(_X);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle fma$MH() {
        return RuntimeHelper.requireNonNull(constants$19.fma$MH,"fma");
    }
    /**
     * {@snippet :
     * double fma(double _X, double _Y, double _Z);
     * }
     */
    public static double fma(double _X, double _Y, double _Z) {
        var mh$ = fma$MH();
        try {
            return (double)mh$.invokeExact(_X, _Y, _Z);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle fmax$MH() {
        return RuntimeHelper.requireNonNull(constants$19.fmax$MH,"fmax");
    }
    /**
     * {@snippet :
     * double fmax(double _X, double _Y);
     * }
     */
    public static double fmax(double _X, double _Y) {
        var mh$ = fmax$MH();
        try {
            return (double)mh$.invokeExact(_X, _Y);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle fmin$MH() {
        return RuntimeHelper.requireNonNull(constants$19.fmin$MH,"fmin");
    }
    /**
     * {@snippet :
     * double fmin(double _X, double _Y);
     * }
     */
    public static double fmin(double _X, double _Y) {
        var mh$ = fmin$MH();
        try {
            return (double)mh$.invokeExact(_X, _Y);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle frexp$MH() {
        return RuntimeHelper.requireNonNull(constants$19.frexp$MH,"frexp");
    }
    /**
     * {@snippet :
     * double frexp(double _X, int* _Y);
     * }
     */
    public static double frexp(double _X, MemorySegment _Y) {
        var mh$ = frexp$MH();
        try {
            return (double)mh$.invokeExact(_X, _Y);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle hypot$MH() {
        return RuntimeHelper.requireNonNull(constants$19.hypot$MH,"hypot");
    }
    /**
     * {@snippet :
     * double hypot(double _X, double _Y);
     * }
     */
    public static double hypot(double _X, double _Y) {
        var mh$ = hypot$MH();
        try {
            return (double)mh$.invokeExact(_X, _Y);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle _hypot$MH() {
        return RuntimeHelper.requireNonNull(constants$20._hypot$MH,"_hypot");
    }
    /**
     * {@snippet :
     * double _hypot(double _X, double _Y);
     * }
     */
    public static double _hypot(double _X, double _Y) {
        var mh$ = _hypot$MH();
        try {
            return (double)mh$.invokeExact(_X, _Y);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle ilogb$MH() {
        return RuntimeHelper.requireNonNull(constants$20.ilogb$MH,"ilogb");
    }
    /**
     * {@snippet :
     * int ilogb(double _X);
     * }
     */
    public static int ilogb(double _X) {
        var mh$ = ilogb$MH();
        try {
            return (int)mh$.invokeExact(_X);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle ldexp$MH() {
        return RuntimeHelper.requireNonNull(constants$20.ldexp$MH,"ldexp");
    }
    /**
     * {@snippet :
     * double ldexp(double _X, int _Y);
     * }
     */
    public static double ldexp(double _X, int _Y) {
        var mh$ = ldexp$MH();
        try {
            return (double)mh$.invokeExact(_X, _Y);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle lgamma$MH() {
        return RuntimeHelper.requireNonNull(constants$20.lgamma$MH,"lgamma");
    }
    /**
     * {@snippet :
     * double lgamma(double _X);
     * }
     */
    public static double lgamma(double _X) {
        var mh$ = lgamma$MH();
        try {
            return (double)mh$.invokeExact(_X);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle llrint$MH() {
        return RuntimeHelper.requireNonNull(constants$20.llrint$MH,"llrint");
    }
    /**
     * {@snippet :
     * long long llrint(double _X);
     * }
     */
    public static long llrint(double _X) {
        var mh$ = llrint$MH();
        try {
            return (long)mh$.invokeExact(_X);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle llround$MH() {
        return RuntimeHelper.requireNonNull(constants$20.llround$MH,"llround");
    }
    /**
     * {@snippet :
     * long long llround(double _X);
     * }
     */
    public static long llround(double _X) {
        var mh$ = llround$MH();
        try {
            return (long)mh$.invokeExact(_X);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle log1p$MH() {
        return RuntimeHelper.requireNonNull(constants$21.log1p$MH,"log1p");
    }
    /**
     * {@snippet :
     * double log1p(double _X);
     * }
     */
    public static double log1p(double _X) {
        var mh$ = log1p$MH();
        try {
            return (double)mh$.invokeExact(_X);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle log2$MH() {
        return RuntimeHelper.requireNonNull(constants$21.log2$MH,"log2");
    }
    /**
     * {@snippet :
     * double log2(double _X);
     * }
     */
    public static double log2(double _X) {
        var mh$ = log2$MH();
        try {
            return (double)mh$.invokeExact(_X);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle logb$MH() {
        return RuntimeHelper.requireNonNull(constants$21.logb$MH,"logb");
    }
    /**
     * {@snippet :
     * double logb(double _X);
     * }
     */
    public static double logb(double _X) {
        var mh$ = logb$MH();
        try {
            return (double)mh$.invokeExact(_X);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle lrint$MH() {
        return RuntimeHelper.requireNonNull(constants$21.lrint$MH,"lrint");
    }
    /**
     * {@snippet :
     * long lrint(double _X);
     * }
     */
    public static int lrint(double _X) {
        var mh$ = lrint$MH();
        try {
            return (int)mh$.invokeExact(_X);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle lround$MH() {
        return RuntimeHelper.requireNonNull(constants$21.lround$MH,"lround");
    }
    /**
     * {@snippet :
     * long lround(double _X);
     * }
     */
    public static int lround(double _X) {
        var mh$ = lround$MH();
        try {
            return (int)mh$.invokeExact(_X);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle _matherr$MH() {
        return RuntimeHelper.requireNonNull(constants$21._matherr$MH,"_matherr");
    }
    /**
     * {@snippet :
     * int _matherr(struct _exception* _Except);
     * }
     */
    public static int _matherr(MemorySegment _Except) {
        var mh$ = _matherr$MH();
        try {
            return (int)mh$.invokeExact(_Except);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle modf$MH() {
        return RuntimeHelper.requireNonNull(constants$22.modf$MH,"modf");
    }
    /**
     * {@snippet :
     * double modf(double _X, double* _Y);
     * }
     */
    public static double modf(double _X, MemorySegment _Y) {
        var mh$ = modf$MH();
        try {
            return (double)mh$.invokeExact(_X, _Y);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle nan$MH() {
        return RuntimeHelper.requireNonNull(constants$22.nan$MH,"nan");
    }
    /**
     * {@snippet :
     * double nan(char* _X);
     * }
     */
    public static double nan(MemorySegment _X) {
        var mh$ = nan$MH();
        try {
            return (double)mh$.invokeExact(_X);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle nearbyint$MH() {
        return RuntimeHelper.requireNonNull(constants$22.nearbyint$MH,"nearbyint");
    }
    /**
     * {@snippet :
     * double nearbyint(double _X);
     * }
     */
    public static double nearbyint(double _X) {
        var mh$ = nearbyint$MH();
        try {
            return (double)mh$.invokeExact(_X);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle nextafter$MH() {
        return RuntimeHelper.requireNonNull(constants$22.nextafter$MH,"nextafter");
    }
    /**
     * {@snippet :
     * double nextafter(double _X, double _Y);
     * }
     */
    public static double nextafter(double _X, double _Y) {
        var mh$ = nextafter$MH();
        try {
            return (double)mh$.invokeExact(_X, _Y);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle remainder$MH() {
        return RuntimeHelper.requireNonNull(constants$22.remainder$MH,"remainder");
    }
    /**
     * {@snippet :
     * double remainder(double _X, double _Y);
     * }
     */
    public static double remainder(double _X, double _Y) {
        var mh$ = remainder$MH();
        try {
            return (double)mh$.invokeExact(_X, _Y);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle remquo$MH() {
        return RuntimeHelper.requireNonNull(constants$22.remquo$MH,"remquo");
    }
    /**
     * {@snippet :
     * double remquo(double _X, double _Y, int* _Z);
     * }
     */
    public static double remquo(double _X, double _Y, MemorySegment _Z) {
        var mh$ = remquo$MH();
        try {
            return (double)mh$.invokeExact(_X, _Y, _Z);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle rint$MH() {
        return RuntimeHelper.requireNonNull(constants$23.rint$MH,"rint");
    }
    /**
     * {@snippet :
     * double rint(double _X);
     * }
     */
    public static double rint(double _X) {
        var mh$ = rint$MH();
        try {
            return (double)mh$.invokeExact(_X);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle round$MH() {
        return RuntimeHelper.requireNonNull(constants$23.round$MH,"round");
    }
    /**
     * {@snippet :
     * double round(double _X);
     * }
     */
    public static double round(double _X) {
        var mh$ = round$MH();
        try {
            return (double)mh$.invokeExact(_X);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle scalbln$MH() {
        return RuntimeHelper.requireNonNull(constants$23.scalbln$MH,"scalbln");
    }
    /**
     * {@snippet :
     * double scalbln(double _X, long _Y);
     * }
     */
    public static double scalbln(double _X, int _Y) {
        var mh$ = scalbln$MH();
        try {
            return (double)mh$.invokeExact(_X, _Y);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle scalbn$MH() {
        return RuntimeHelper.requireNonNull(constants$23.scalbn$MH,"scalbn");
    }
    /**
     * {@snippet :
     * double scalbn(double _X, int _Y);
     * }
     */
    public static double scalbn(double _X, int _Y) {
        var mh$ = scalbn$MH();
        try {
            return (double)mh$.invokeExact(_X, _Y);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle tgamma$MH() {
        return RuntimeHelper.requireNonNull(constants$23.tgamma$MH,"tgamma");
    }
    /**
     * {@snippet :
     * double tgamma(double _X);
     * }
     */
    public static double tgamma(double _X) {
        var mh$ = tgamma$MH();
        try {
            return (double)mh$.invokeExact(_X);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle trunc$MH() {
        return RuntimeHelper.requireNonNull(constants$23.trunc$MH,"trunc");
    }
    /**
     * {@snippet :
     * double trunc(double _X);
     * }
     */
    public static double trunc(double _X) {
        var mh$ = trunc$MH();
        try {
            return (double)mh$.invokeExact(_X);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle _j0$MH() {
        return RuntimeHelper.requireNonNull(constants$24._j0$MH,"_j0");
    }
    /**
     * {@snippet :
     * double _j0(double _X);
     * }
     */
    public static double _j0(double _X) {
        var mh$ = _j0$MH();
        try {
            return (double)mh$.invokeExact(_X);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle _j1$MH() {
        return RuntimeHelper.requireNonNull(constants$24._j1$MH,"_j1");
    }
    /**
     * {@snippet :
     * double _j1(double _X);
     * }
     */
    public static double _j1(double _X) {
        var mh$ = _j1$MH();
        try {
            return (double)mh$.invokeExact(_X);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle _jn$MH() {
        return RuntimeHelper.requireNonNull(constants$24._jn$MH,"_jn");
    }
    /**
     * {@snippet :
     * double _jn(int _X, double _Y);
     * }
     */
    public static double _jn(int _X, double _Y) {
        var mh$ = _jn$MH();
        try {
            return (double)mh$.invokeExact(_X, _Y);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle _y0$MH() {
        return RuntimeHelper.requireNonNull(constants$24._y0$MH,"_y0");
    }
    /**
     * {@snippet :
     * double _y0(double _X);
     * }
     */
    public static double _y0(double _X) {
        var mh$ = _y0$MH();
        try {
            return (double)mh$.invokeExact(_X);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle _y1$MH() {
        return RuntimeHelper.requireNonNull(constants$24._y1$MH,"_y1");
    }
    /**
     * {@snippet :
     * double _y1(double _X);
     * }
     */
    public static double _y1(double _X) {
        var mh$ = _y1$MH();
        try {
            return (double)mh$.invokeExact(_X);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle _yn$MH() {
        return RuntimeHelper.requireNonNull(constants$24._yn$MH,"_yn");
    }
    /**
     * {@snippet :
     * double _yn(int _X, double _Y);
     * }
     */
    public static double _yn(int _X, double _Y) {
        var mh$ = _yn$MH();
        try {
            return (double)mh$.invokeExact(_X, _Y);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle acoshf$MH() {
        return RuntimeHelper.requireNonNull(constants$25.acoshf$MH,"acoshf");
    }
    /**
     * {@snippet :
     * float acoshf(float _X);
     * }
     */
    public static float acoshf(float _X) {
        var mh$ = acoshf$MH();
        try {
            return (float)mh$.invokeExact(_X);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle asinhf$MH() {
        return RuntimeHelper.requireNonNull(constants$25.asinhf$MH,"asinhf");
    }
    /**
     * {@snippet :
     * float asinhf(float _X);
     * }
     */
    public static float asinhf(float _X) {
        var mh$ = asinhf$MH();
        try {
            return (float)mh$.invokeExact(_X);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle atanhf$MH() {
        return RuntimeHelper.requireNonNull(constants$25.atanhf$MH,"atanhf");
    }
    /**
     * {@snippet :
     * float atanhf(float _X);
     * }
     */
    public static float atanhf(float _X) {
        var mh$ = atanhf$MH();
        try {
            return (float)mh$.invokeExact(_X);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle cbrtf$MH() {
        return RuntimeHelper.requireNonNull(constants$25.cbrtf$MH,"cbrtf");
    }
    /**
     * {@snippet :
     * float cbrtf(float _X);
     * }
     */
    public static float cbrtf(float _X) {
        var mh$ = cbrtf$MH();
        try {
            return (float)mh$.invokeExact(_X);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle _chgsignf$MH() {
        return RuntimeHelper.requireNonNull(constants$25._chgsignf$MH,"_chgsignf");
    }
    /**
     * {@snippet :
     * float _chgsignf(float _X);
     * }
     */
    public static float _chgsignf(float _X) {
        var mh$ = _chgsignf$MH();
        try {
            return (float)mh$.invokeExact(_X);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle copysignf$MH() {
        return RuntimeHelper.requireNonNull(constants$25.copysignf$MH,"copysignf");
    }
    /**
     * {@snippet :
     * float copysignf(float _Number, float _Sign);
     * }
     */
    public static float copysignf(float _Number, float _Sign) {
        var mh$ = copysignf$MH();
        try {
            return (float)mh$.invokeExact(_Number, _Sign);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle _copysignf$MH() {
        return RuntimeHelper.requireNonNull(constants$26._copysignf$MH,"_copysignf");
    }
    /**
     * {@snippet :
     * float _copysignf(float _Number, float _Sign);
     * }
     */
    public static float _copysignf(float _Number, float _Sign) {
        var mh$ = _copysignf$MH();
        try {
            return (float)mh$.invokeExact(_Number, _Sign);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle erff$MH() {
        return RuntimeHelper.requireNonNull(constants$26.erff$MH,"erff");
    }
    /**
     * {@snippet :
     * float erff(float _X);
     * }
     */
    public static float erff(float _X) {
        var mh$ = erff$MH();
        try {
            return (float)mh$.invokeExact(_X);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle erfcf$MH() {
        return RuntimeHelper.requireNonNull(constants$26.erfcf$MH,"erfcf");
    }
    /**
     * {@snippet :
     * float erfcf(float _X);
     * }
     */
    public static float erfcf(float _X) {
        var mh$ = erfcf$MH();
        try {
            return (float)mh$.invokeExact(_X);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle expm1f$MH() {
        return RuntimeHelper.requireNonNull(constants$26.expm1f$MH,"expm1f");
    }
    /**
     * {@snippet :
     * float expm1f(float _X);
     * }
     */
    public static float expm1f(float _X) {
        var mh$ = expm1f$MH();
        try {
            return (float)mh$.invokeExact(_X);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle exp2f$MH() {
        return RuntimeHelper.requireNonNull(constants$26.exp2f$MH,"exp2f");
    }
    /**
     * {@snippet :
     * float exp2f(float _X);
     * }
     */
    public static float exp2f(float _X) {
        var mh$ = exp2f$MH();
        try {
            return (float)mh$.invokeExact(_X);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle fdimf$MH() {
        return RuntimeHelper.requireNonNull(constants$26.fdimf$MH,"fdimf");
    }
    /**
     * {@snippet :
     * float fdimf(float _X, float _Y);
     * }
     */
    public static float fdimf(float _X, float _Y) {
        var mh$ = fdimf$MH();
        try {
            return (float)mh$.invokeExact(_X, _Y);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle fmaf$MH() {
        return RuntimeHelper.requireNonNull(constants$27.fmaf$MH,"fmaf");
    }
    /**
     * {@snippet :
     * float fmaf(float _X, float _Y, float _Z);
     * }
     */
    public static float fmaf(float _X, float _Y, float _Z) {
        var mh$ = fmaf$MH();
        try {
            return (float)mh$.invokeExact(_X, _Y, _Z);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle fmaxf$MH() {
        return RuntimeHelper.requireNonNull(constants$27.fmaxf$MH,"fmaxf");
    }
    /**
     * {@snippet :
     * float fmaxf(float _X, float _Y);
     * }
     */
    public static float fmaxf(float _X, float _Y) {
        var mh$ = fmaxf$MH();
        try {
            return (float)mh$.invokeExact(_X, _Y);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle fminf$MH() {
        return RuntimeHelper.requireNonNull(constants$27.fminf$MH,"fminf");
    }
    /**
     * {@snippet :
     * float fminf(float _X, float _Y);
     * }
     */
    public static float fminf(float _X, float _Y) {
        var mh$ = fminf$MH();
        try {
            return (float)mh$.invokeExact(_X, _Y);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle _hypotf$MH() {
        return RuntimeHelper.requireNonNull(constants$27._hypotf$MH,"_hypotf");
    }
    /**
     * {@snippet :
     * float _hypotf(float _X, float _Y);
     * }
     */
    public static float _hypotf(float _X, float _Y) {
        var mh$ = _hypotf$MH();
        try {
            return (float)mh$.invokeExact(_X, _Y);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle ilogbf$MH() {
        return RuntimeHelper.requireNonNull(constants$27.ilogbf$MH,"ilogbf");
    }
    /**
     * {@snippet :
     * int ilogbf(float _X);
     * }
     */
    public static int ilogbf(float _X) {
        var mh$ = ilogbf$MH();
        try {
            return (int)mh$.invokeExact(_X);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle lgammaf$MH() {
        return RuntimeHelper.requireNonNull(constants$27.lgammaf$MH,"lgammaf");
    }
    /**
     * {@snippet :
     * float lgammaf(float _X);
     * }
     */
    public static float lgammaf(float _X) {
        var mh$ = lgammaf$MH();
        try {
            return (float)mh$.invokeExact(_X);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle llrintf$MH() {
        return RuntimeHelper.requireNonNull(constants$28.llrintf$MH,"llrintf");
    }
    /**
     * {@snippet :
     * long long llrintf(float _X);
     * }
     */
    public static long llrintf(float _X) {
        var mh$ = llrintf$MH();
        try {
            return (long)mh$.invokeExact(_X);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle llroundf$MH() {
        return RuntimeHelper.requireNonNull(constants$28.llroundf$MH,"llroundf");
    }
    /**
     * {@snippet :
     * long long llroundf(float _X);
     * }
     */
    public static long llroundf(float _X) {
        var mh$ = llroundf$MH();
        try {
            return (long)mh$.invokeExact(_X);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle log1pf$MH() {
        return RuntimeHelper.requireNonNull(constants$28.log1pf$MH,"log1pf");
    }
    /**
     * {@snippet :
     * float log1pf(float _X);
     * }
     */
    public static float log1pf(float _X) {
        var mh$ = log1pf$MH();
        try {
            return (float)mh$.invokeExact(_X);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle log2f$MH() {
        return RuntimeHelper.requireNonNull(constants$28.log2f$MH,"log2f");
    }
    /**
     * {@snippet :
     * float log2f(float _X);
     * }
     */
    public static float log2f(float _X) {
        var mh$ = log2f$MH();
        try {
            return (float)mh$.invokeExact(_X);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle logbf$MH() {
        return RuntimeHelper.requireNonNull(constants$28.logbf$MH,"logbf");
    }
    /**
     * {@snippet :
     * float logbf(float _X);
     * }
     */
    public static float logbf(float _X) {
        var mh$ = logbf$MH();
        try {
            return (float)mh$.invokeExact(_X);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle lrintf$MH() {
        return RuntimeHelper.requireNonNull(constants$28.lrintf$MH,"lrintf");
    }
    /**
     * {@snippet :
     * long lrintf(float _X);
     * }
     */
    public static int lrintf(float _X) {
        var mh$ = lrintf$MH();
        try {
            return (int)mh$.invokeExact(_X);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle lroundf$MH() {
        return RuntimeHelper.requireNonNull(constants$29.lroundf$MH,"lroundf");
    }
    /**
     * {@snippet :
     * long lroundf(float _X);
     * }
     */
    public static int lroundf(float _X) {
        var mh$ = lroundf$MH();
        try {
            return (int)mh$.invokeExact(_X);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle nanf$MH() {
        return RuntimeHelper.requireNonNull(constants$29.nanf$MH,"nanf");
    }
    /**
     * {@snippet :
     * float nanf(char* _X);
     * }
     */
    public static float nanf(MemorySegment _X) {
        var mh$ = nanf$MH();
        try {
            return (float)mh$.invokeExact(_X);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle nearbyintf$MH() {
        return RuntimeHelper.requireNonNull(constants$29.nearbyintf$MH,"nearbyintf");
    }
    /**
     * {@snippet :
     * float nearbyintf(float _X);
     * }
     */
    public static float nearbyintf(float _X) {
        var mh$ = nearbyintf$MH();
        try {
            return (float)mh$.invokeExact(_X);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle nextafterf$MH() {
        return RuntimeHelper.requireNonNull(constants$29.nextafterf$MH,"nextafterf");
    }
    /**
     * {@snippet :
     * float nextafterf(float _X, float _Y);
     * }
     */
    public static float nextafterf(float _X, float _Y) {
        var mh$ = nextafterf$MH();
        try {
            return (float)mh$.invokeExact(_X, _Y);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle remainderf$MH() {
        return RuntimeHelper.requireNonNull(constants$29.remainderf$MH,"remainderf");
    }
    /**
     * {@snippet :
     * float remainderf(float _X, float _Y);
     * }
     */
    public static float remainderf(float _X, float _Y) {
        var mh$ = remainderf$MH();
        try {
            return (float)mh$.invokeExact(_X, _Y);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle remquof$MH() {
        return RuntimeHelper.requireNonNull(constants$29.remquof$MH,"remquof");
    }
    /**
     * {@snippet :
     * float remquof(float _X, float _Y, int* _Z);
     * }
     */
    public static float remquof(float _X, float _Y, MemorySegment _Z) {
        var mh$ = remquof$MH();
        try {
            return (float)mh$.invokeExact(_X, _Y, _Z);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle rintf$MH() {
        return RuntimeHelper.requireNonNull(constants$30.rintf$MH,"rintf");
    }
    /**
     * {@snippet :
     * float rintf(float _X);
     * }
     */
    public static float rintf(float _X) {
        var mh$ = rintf$MH();
        try {
            return (float)mh$.invokeExact(_X);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle roundf$MH() {
        return RuntimeHelper.requireNonNull(constants$30.roundf$MH,"roundf");
    }
    /**
     * {@snippet :
     * float roundf(float _X);
     * }
     */
    public static float roundf(float _X) {
        var mh$ = roundf$MH();
        try {
            return (float)mh$.invokeExact(_X);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle scalblnf$MH() {
        return RuntimeHelper.requireNonNull(constants$30.scalblnf$MH,"scalblnf");
    }
    /**
     * {@snippet :
     * float scalblnf(float _X, long _Y);
     * }
     */
    public static float scalblnf(float _X, int _Y) {
        var mh$ = scalblnf$MH();
        try {
            return (float)mh$.invokeExact(_X, _Y);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle scalbnf$MH() {
        return RuntimeHelper.requireNonNull(constants$30.scalbnf$MH,"scalbnf");
    }
    /**
     * {@snippet :
     * float scalbnf(float _X, int _Y);
     * }
     */
    public static float scalbnf(float _X, int _Y) {
        var mh$ = scalbnf$MH();
        try {
            return (float)mh$.invokeExact(_X, _Y);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle tgammaf$MH() {
        return RuntimeHelper.requireNonNull(constants$30.tgammaf$MH,"tgammaf");
    }
    /**
     * {@snippet :
     * float tgammaf(float _X);
     * }
     */
    public static float tgammaf(float _X) {
        var mh$ = tgammaf$MH();
        try {
            return (float)mh$.invokeExact(_X);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle truncf$MH() {
        return RuntimeHelper.requireNonNull(constants$30.truncf$MH,"truncf");
    }
    /**
     * {@snippet :
     * float truncf(float _X);
     * }
     */
    public static float truncf(float _X) {
        var mh$ = truncf$MH();
        try {
            return (float)mh$.invokeExact(_X);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle _logbf$MH() {
        return RuntimeHelper.requireNonNull(constants$31._logbf$MH,"_logbf");
    }
    /**
     * {@snippet :
     * float _logbf(float _X);
     * }
     */
    public static float _logbf(float _X) {
        var mh$ = _logbf$MH();
        try {
            return (float)mh$.invokeExact(_X);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle _nextafterf$MH() {
        return RuntimeHelper.requireNonNull(constants$31._nextafterf$MH,"_nextafterf");
    }
    /**
     * {@snippet :
     * float _nextafterf(float _X, float _Y);
     * }
     */
    public static float _nextafterf(float _X, float _Y) {
        var mh$ = _nextafterf$MH();
        try {
            return (float)mh$.invokeExact(_X, _Y);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle _finitef$MH() {
        return RuntimeHelper.requireNonNull(constants$31._finitef$MH,"_finitef");
    }
    /**
     * {@snippet :
     * int _finitef(float _X);
     * }
     */
    public static int _finitef(float _X) {
        var mh$ = _finitef$MH();
        try {
            return (int)mh$.invokeExact(_X);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle _isnanf$MH() {
        return RuntimeHelper.requireNonNull(constants$31._isnanf$MH,"_isnanf");
    }
    /**
     * {@snippet :
     * int _isnanf(float _X);
     * }
     */
    public static int _isnanf(float _X) {
        var mh$ = _isnanf$MH();
        try {
            return (int)mh$.invokeExact(_X);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle _fpclassf$MH() {
        return RuntimeHelper.requireNonNull(constants$31._fpclassf$MH,"_fpclassf");
    }
    /**
     * {@snippet :
     * int _fpclassf(float _X);
     * }
     */
    public static int _fpclassf(float _X) {
        var mh$ = _fpclassf$MH();
        try {
            return (int)mh$.invokeExact(_X);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle _set_FMA3_enable$MH() {
        return RuntimeHelper.requireNonNull(constants$31._set_FMA3_enable$MH,"_set_FMA3_enable");
    }
    /**
     * {@snippet :
     * int _set_FMA3_enable(int _Flag);
     * }
     */
    public static int _set_FMA3_enable(int _Flag) {
        var mh$ = _set_FMA3_enable$MH();
        try {
            return (int)mh$.invokeExact(_Flag);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle _get_FMA3_enable$MH() {
        return RuntimeHelper.requireNonNull(constants$32._get_FMA3_enable$MH,"_get_FMA3_enable");
    }
    /**
     * {@snippet :
     * int _get_FMA3_enable();
     * }
     */
    public static int _get_FMA3_enable() {
        var mh$ = _get_FMA3_enable$MH();
        try {
            return (int)mh$.invokeExact();
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle acosf$MH() {
        return RuntimeHelper.requireNonNull(constants$32.acosf$MH,"acosf");
    }
    /**
     * {@snippet :
     * float acosf(float _X);
     * }
     */
    public static float acosf(float _X) {
        var mh$ = acosf$MH();
        try {
            return (float)mh$.invokeExact(_X);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle asinf$MH() {
        return RuntimeHelper.requireNonNull(constants$32.asinf$MH,"asinf");
    }
    /**
     * {@snippet :
     * float asinf(float _X);
     * }
     */
    public static float asinf(float _X) {
        var mh$ = asinf$MH();
        try {
            return (float)mh$.invokeExact(_X);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle atan2f$MH() {
        return RuntimeHelper.requireNonNull(constants$32.atan2f$MH,"atan2f");
    }
    /**
     * {@snippet :
     * float atan2f(float _Y, float _X);
     * }
     */
    public static float atan2f(float _Y, float _X) {
        var mh$ = atan2f$MH();
        try {
            return (float)mh$.invokeExact(_Y, _X);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle atanf$MH() {
        return RuntimeHelper.requireNonNull(constants$32.atanf$MH,"atanf");
    }
    /**
     * {@snippet :
     * float atanf(float _X);
     * }
     */
    public static float atanf(float _X) {
        var mh$ = atanf$MH();
        try {
            return (float)mh$.invokeExact(_X);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle ceilf$MH() {
        return RuntimeHelper.requireNonNull(constants$32.ceilf$MH,"ceilf");
    }
    /**
     * {@snippet :
     * float ceilf(float _X);
     * }
     */
    public static float ceilf(float _X) {
        var mh$ = ceilf$MH();
        try {
            return (float)mh$.invokeExact(_X);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle cosf$MH() {
        return RuntimeHelper.requireNonNull(constants$33.cosf$MH,"cosf");
    }
    /**
     * {@snippet :
     * float cosf(float _X);
     * }
     */
    public static float cosf(float _X) {
        var mh$ = cosf$MH();
        try {
            return (float)mh$.invokeExact(_X);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle coshf$MH() {
        return RuntimeHelper.requireNonNull(constants$33.coshf$MH,"coshf");
    }
    /**
     * {@snippet :
     * float coshf(float _X);
     * }
     */
    public static float coshf(float _X) {
        var mh$ = coshf$MH();
        try {
            return (float)mh$.invokeExact(_X);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle expf$MH() {
        return RuntimeHelper.requireNonNull(constants$33.expf$MH,"expf");
    }
    /**
     * {@snippet :
     * float expf(float _X);
     * }
     */
    public static float expf(float _X) {
        var mh$ = expf$MH();
        try {
            return (float)mh$.invokeExact(_X);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle floorf$MH() {
        return RuntimeHelper.requireNonNull(constants$33.floorf$MH,"floorf");
    }
    /**
     * {@snippet :
     * float floorf(float _X);
     * }
     */
    public static float floorf(float _X) {
        var mh$ = floorf$MH();
        try {
            return (float)mh$.invokeExact(_X);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle fmodf$MH() {
        return RuntimeHelper.requireNonNull(constants$33.fmodf$MH,"fmodf");
    }
    /**
     * {@snippet :
     * float fmodf(float _X, float _Y);
     * }
     */
    public static float fmodf(float _X, float _Y) {
        var mh$ = fmodf$MH();
        try {
            return (float)mh$.invokeExact(_X, _Y);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle log10f$MH() {
        return RuntimeHelper.requireNonNull(constants$33.log10f$MH,"log10f");
    }
    /**
     * {@snippet :
     * float log10f(float _X);
     * }
     */
    public static float log10f(float _X) {
        var mh$ = log10f$MH();
        try {
            return (float)mh$.invokeExact(_X);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle logf$MH() {
        return RuntimeHelper.requireNonNull(constants$34.logf$MH,"logf");
    }
    /**
     * {@snippet :
     * float logf(float _X);
     * }
     */
    public static float logf(float _X) {
        var mh$ = logf$MH();
        try {
            return (float)mh$.invokeExact(_X);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle modff$MH() {
        return RuntimeHelper.requireNonNull(constants$34.modff$MH,"modff");
    }
    /**
     * {@snippet :
     * float modff(float _X, float* _Y);
     * }
     */
    public static float modff(float _X, MemorySegment _Y) {
        var mh$ = modff$MH();
        try {
            return (float)mh$.invokeExact(_X, _Y);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle powf$MH() {
        return RuntimeHelper.requireNonNull(constants$34.powf$MH,"powf");
    }
    /**
     * {@snippet :
     * float powf(float _X, float _Y);
     * }
     */
    public static float powf(float _X, float _Y) {
        var mh$ = powf$MH();
        try {
            return (float)mh$.invokeExact(_X, _Y);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle sinf$MH() {
        return RuntimeHelper.requireNonNull(constants$34.sinf$MH,"sinf");
    }
    /**
     * {@snippet :
     * float sinf(float _X);
     * }
     */
    public static float sinf(float _X) {
        var mh$ = sinf$MH();
        try {
            return (float)mh$.invokeExact(_X);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle sinhf$MH() {
        return RuntimeHelper.requireNonNull(constants$34.sinhf$MH,"sinhf");
    }
    /**
     * {@snippet :
     * float sinhf(float _X);
     * }
     */
    public static float sinhf(float _X) {
        var mh$ = sinhf$MH();
        try {
            return (float)mh$.invokeExact(_X);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle sqrtf$MH() {
        return RuntimeHelper.requireNonNull(constants$34.sqrtf$MH,"sqrtf");
    }
    /**
     * {@snippet :
     * float sqrtf(float _X);
     * }
     */
    public static float sqrtf(float _X) {
        var mh$ = sqrtf$MH();
        try {
            return (float)mh$.invokeExact(_X);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle tanf$MH() {
        return RuntimeHelper.requireNonNull(constants$35.tanf$MH,"tanf");
    }
    /**
     * {@snippet :
     * float tanf(float _X);
     * }
     */
    public static float tanf(float _X) {
        var mh$ = tanf$MH();
        try {
            return (float)mh$.invokeExact(_X);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle tanhf$MH() {
        return RuntimeHelper.requireNonNull(constants$35.tanhf$MH,"tanhf");
    }
    /**
     * {@snippet :
     * float tanhf(float _X);
     * }
     */
    public static float tanhf(float _X) {
        var mh$ = tanhf$MH();
        try {
            return (float)mh$.invokeExact(_X);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MemoryLayout HUGE$LAYOUT() {
        return constants$35.HUGE$LAYOUT;
    }
    public static VarHandle HUGE$VH() {
        return constants$35.HUGE$VH;
    }
    public static MemorySegment HUGE$SEGMENT() {
        return RuntimeHelper.requireNonNull(constants$35.HUGE$SEGMENT,"HUGE");
    }
    /**
     * Getter for variable:
     * {@snippet :
     * double HUGE;
     * }
     */
    public static double HUGE$get() {
        return (double) constants$35.HUGE$VH.get(RuntimeHelper.requireNonNull(constants$35.HUGE$SEGMENT, "HUGE"));
    }
    /**
     * Setter for variable:
     * {@snippet :
     * double HUGE;
     * }
     */
    public static void HUGE$set(double x) {
        constants$35.HUGE$VH.set(RuntimeHelper.requireNonNull(constants$35.HUGE$SEGMENT, "HUGE"), x);
    }
    public static MethodHandle j0$MH() {
        return RuntimeHelper.requireNonNull(constants$35.j0$MH,"j0");
    }
    /**
     * {@snippet :
     * double j0(double _X);
     * }
     */
    public static double j0(double _X) {
        var mh$ = j0$MH();
        try {
            return (double)mh$.invokeExact(_X);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle j1$MH() {
        return RuntimeHelper.requireNonNull(constants$35.j1$MH,"j1");
    }
    /**
     * {@snippet :
     * double j1(double _X);
     * }
     */
    public static double j1(double _X) {
        var mh$ = j1$MH();
        try {
            return (double)mh$.invokeExact(_X);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle jn$MH() {
        return RuntimeHelper.requireNonNull(constants$35.jn$MH,"jn");
    }
    /**
     * {@snippet :
     * double jn(int _X, double _Y);
     * }
     */
    public static double jn(int _X, double _Y) {
        var mh$ = jn$MH();
        try {
            return (double)mh$.invokeExact(_X, _Y);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle y0$MH() {
        return RuntimeHelper.requireNonNull(constants$36.y0$MH,"y0");
    }
    /**
     * {@snippet :
     * double y0(double _X);
     * }
     */
    public static double y0(double _X) {
        var mh$ = y0$MH();
        try {
            return (double)mh$.invokeExact(_X);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle y1$MH() {
        return RuntimeHelper.requireNonNull(constants$36.y1$MH,"y1");
    }
    /**
     * {@snippet :
     * double y1(double _X);
     * }
     */
    public static double y1(double _X) {
        var mh$ = y1$MH();
        try {
            return (double)mh$.invokeExact(_X);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle yn$MH() {
        return RuntimeHelper.requireNonNull(constants$36.yn$MH,"yn");
    }
    /**
     * {@snippet :
     * double yn(int _X, double _Y);
     * }
     */
    public static double yn(int _X, double _Y) {
        var mh$ = yn$MH();
        try {
            return (double)mh$.invokeExact(_X, _Y);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle __acrt_iob_func$MH() {
        return RuntimeHelper.requireNonNull(constants$36.__acrt_iob_func$MH,"__acrt_iob_func");
    }
    /**
     * {@snippet :
     * FILE* __acrt_iob_func(unsigned int _Ix);
     * }
     */
    public static MemorySegment __acrt_iob_func(int _Ix) {
        var mh$ = __acrt_iob_func$MH();
        try {
            return (java.lang.foreign.MemorySegment)mh$.invokeExact(_Ix);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle fgetwc$MH() {
        return RuntimeHelper.requireNonNull(constants$36.fgetwc$MH,"fgetwc");
    }
    /**
     * {@snippet :
     * wint_t fgetwc(FILE* _Stream);
     * }
     */
    public static short fgetwc(MemorySegment _Stream) {
        var mh$ = fgetwc$MH();
        try {
            return (short)mh$.invokeExact(_Stream);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle _fgetwchar$MH() {
        return RuntimeHelper.requireNonNull(constants$36._fgetwchar$MH,"_fgetwchar");
    }
    /**
     * {@snippet :
     * wint_t _fgetwchar();
     * }
     */
    public static short _fgetwchar() {
        var mh$ = _fgetwchar$MH();
        try {
            return (short)mh$.invokeExact();
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle fputwc$MH() {
        return RuntimeHelper.requireNonNull(constants$37.fputwc$MH,"fputwc");
    }
    /**
     * {@snippet :
     * wint_t fputwc(wchar_t _Character, FILE* _Stream);
     * }
     */
    public static short fputwc(short _Character, MemorySegment _Stream) {
        var mh$ = fputwc$MH();
        try {
            return (short)mh$.invokeExact(_Character, _Stream);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle _fputwchar$MH() {
        return RuntimeHelper.requireNonNull(constants$37._fputwchar$MH,"_fputwchar");
    }
    /**
     * {@snippet :
     * wint_t _fputwchar(wchar_t _Character);
     * }
     */
    public static short _fputwchar(short _Character) {
        var mh$ = _fputwchar$MH();
        try {
            return (short)mh$.invokeExact(_Character);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle getwc$MH() {
        return RuntimeHelper.requireNonNull(constants$37.getwc$MH,"getwc");
    }
    /**
     * {@snippet :
     * wint_t getwc(FILE* _Stream);
     * }
     */
    public static short getwc(MemorySegment _Stream) {
        var mh$ = getwc$MH();
        try {
            return (short)mh$.invokeExact(_Stream);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle getwchar$MH() {
        return RuntimeHelper.requireNonNull(constants$37.getwchar$MH,"getwchar");
    }
    /**
     * {@snippet :
     * wint_t getwchar();
     * }
     */
    public static short getwchar() {
        var mh$ = getwchar$MH();
        try {
            return (short)mh$.invokeExact();
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle fgetws$MH() {
        return RuntimeHelper.requireNonNull(constants$37.fgetws$MH,"fgetws");
    }
    /**
     * {@snippet :
     * wchar_t* fgetws(wchar_t* _Buffer, int _BufferCount, FILE* _Stream);
     * }
     */
    public static MemorySegment fgetws(MemorySegment _Buffer, int _BufferCount, MemorySegment _Stream) {
        var mh$ = fgetws$MH();
        try {
            return (java.lang.foreign.MemorySegment)mh$.invokeExact(_Buffer, _BufferCount, _Stream);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle fputws$MH() {
        return RuntimeHelper.requireNonNull(constants$37.fputws$MH,"fputws");
    }
    /**
     * {@snippet :
     * int fputws(const wchar_t* _Buffer, FILE* _Stream);
     * }
     */
    public static int fputws(MemorySegment _Buffer, MemorySegment _Stream) {
        var mh$ = fputws$MH();
        try {
            return (int)mh$.invokeExact(_Buffer, _Stream);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle _getws_s$MH() {
        return RuntimeHelper.requireNonNull(constants$38._getws_s$MH,"_getws_s");
    }
    /**
     * {@snippet :
     * wchar_t* _getws_s(wchar_t* _Buffer, size_t _BufferCount);
     * }
     */
    public static MemorySegment _getws_s(MemorySegment _Buffer, long _BufferCount) {
        var mh$ = _getws_s$MH();
        try {
            return (java.lang.foreign.MemorySegment)mh$.invokeExact(_Buffer, _BufferCount);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle putwc$MH() {
        return RuntimeHelper.requireNonNull(constants$38.putwc$MH,"putwc");
    }
    /**
     * {@snippet :
     * wint_t putwc(wchar_t _Character, FILE* _Stream);
     * }
     */
    public static short putwc(short _Character, MemorySegment _Stream) {
        var mh$ = putwc$MH();
        try {
            return (short)mh$.invokeExact(_Character, _Stream);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle putwchar$MH() {
        return RuntimeHelper.requireNonNull(constants$38.putwchar$MH,"putwchar");
    }
    /**
     * {@snippet :
     * wint_t putwchar(wchar_t _Character);
     * }
     */
    public static short putwchar(short _Character) {
        var mh$ = putwchar$MH();
        try {
            return (short)mh$.invokeExact(_Character);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle _putws$MH() {
        return RuntimeHelper.requireNonNull(constants$38._putws$MH,"_putws");
    }
    /**
     * {@snippet :
     * int _putws(const wchar_t* _Buffer);
     * }
     */
    public static int _putws(MemorySegment _Buffer) {
        var mh$ = _putws$MH();
        try {
            return (int)mh$.invokeExact(_Buffer);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle ungetwc$MH() {
        return RuntimeHelper.requireNonNull(constants$38.ungetwc$MH,"ungetwc");
    }
    /**
     * {@snippet :
     * wint_t ungetwc(wint_t _Character, FILE* _Stream);
     * }
     */
    public static short ungetwc(short _Character, MemorySegment _Stream) {
        var mh$ = ungetwc$MH();
        try {
            return (short)mh$.invokeExact(_Character, _Stream);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle _wfdopen$MH() {
        return RuntimeHelper.requireNonNull(constants$38._wfdopen$MH,"_wfdopen");
    }
    /**
     * {@snippet :
     * FILE* _wfdopen(int _FileHandle, const wchar_t* _Mode);
     * }
     */
    public static MemorySegment _wfdopen(int _FileHandle, MemorySegment _Mode) {
        var mh$ = _wfdopen$MH();
        try {
            return (java.lang.foreign.MemorySegment)mh$.invokeExact(_FileHandle, _Mode);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle _wfopen$MH() {
        return RuntimeHelper.requireNonNull(constants$39._wfopen$MH,"_wfopen");
    }
    /**
     * {@snippet :
     * FILE* _wfopen(const wchar_t* _FileName, const wchar_t* _Mode);
     * }
     */
    public static MemorySegment _wfopen(MemorySegment _FileName, MemorySegment _Mode) {
        var mh$ = _wfopen$MH();
        try {
            return (java.lang.foreign.MemorySegment)mh$.invokeExact(_FileName, _Mode);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle _wfopen_s$MH() {
        return RuntimeHelper.requireNonNull(constants$39._wfopen_s$MH,"_wfopen_s");
    }
    /**
     * {@snippet :
     * errno_t _wfopen_s(FILE** _Stream, const wchar_t* _FileName, const wchar_t* _Mode);
     * }
     */
    public static int _wfopen_s(MemorySegment _Stream, MemorySegment _FileName, MemorySegment _Mode) {
        var mh$ = _wfopen_s$MH();
        try {
            return (int)mh$.invokeExact(_Stream, _FileName, _Mode);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle _wfreopen$MH() {
        return RuntimeHelper.requireNonNull(constants$39._wfreopen$MH,"_wfreopen");
    }
    /**
     * {@snippet :
     * FILE* _wfreopen(const wchar_t* _FileName, const wchar_t* _Mode, FILE* _OldStream);
     * }
     */
    public static MemorySegment _wfreopen(MemorySegment _FileName, MemorySegment _Mode, MemorySegment _OldStream) {
        var mh$ = _wfreopen$MH();
        try {
            return (java.lang.foreign.MemorySegment)mh$.invokeExact(_FileName, _Mode, _OldStream);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle _wfreopen_s$MH() {
        return RuntimeHelper.requireNonNull(constants$39._wfreopen_s$MH,"_wfreopen_s");
    }
    /**
     * {@snippet :
     * errno_t _wfreopen_s(FILE** _Stream, const wchar_t* _FileName, const wchar_t* _Mode, FILE* _OldStream);
     * }
     */
    public static int _wfreopen_s(MemorySegment _Stream, MemorySegment _FileName, MemorySegment _Mode, MemorySegment _OldStream) {
        var mh$ = _wfreopen_s$MH();
        try {
            return (int)mh$.invokeExact(_Stream, _FileName, _Mode, _OldStream);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle _wfsopen$MH() {
        return RuntimeHelper.requireNonNull(constants$39._wfsopen$MH,"_wfsopen");
    }
    /**
     * {@snippet :
     * FILE* _wfsopen(const wchar_t* _FileName, const wchar_t* _Mode, int _ShFlag);
     * }
     */
    public static MemorySegment _wfsopen(MemorySegment _FileName, MemorySegment _Mode, int _ShFlag) {
        var mh$ = _wfsopen$MH();
        try {
            return (java.lang.foreign.MemorySegment)mh$.invokeExact(_FileName, _Mode, _ShFlag);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle _wperror$MH() {
        return RuntimeHelper.requireNonNull(constants$39._wperror$MH,"_wperror");
    }
    /**
     * {@snippet :
     * void _wperror(const wchar_t* _ErrorMessage);
     * }
     */
    public static void _wperror(MemorySegment _ErrorMessage) {
        var mh$ = _wperror$MH();
        try {
            mh$.invokeExact(_ErrorMessage);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle _wpopen$MH() {
        return RuntimeHelper.requireNonNull(constants$40._wpopen$MH,"_wpopen");
    }
    /**
     * {@snippet :
     * FILE* _wpopen(const wchar_t* _Command, const wchar_t* _Mode);
     * }
     */
    public static MemorySegment _wpopen(MemorySegment _Command, MemorySegment _Mode) {
        var mh$ = _wpopen$MH();
        try {
            return (java.lang.foreign.MemorySegment)mh$.invokeExact(_Command, _Mode);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle _wremove$MH() {
        return RuntimeHelper.requireNonNull(constants$40._wremove$MH,"_wremove");
    }
    /**
     * {@snippet :
     * int _wremove(const wchar_t* _FileName);
     * }
     */
    public static int _wremove(MemorySegment _FileName) {
        var mh$ = _wremove$MH();
        try {
            return (int)mh$.invokeExact(_FileName);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle _wtempnam$MH() {
        return RuntimeHelper.requireNonNull(constants$40._wtempnam$MH,"_wtempnam");
    }
    /**
     * {@snippet :
     * wchar_t* _wtempnam(const wchar_t* _Directory, const wchar_t* _FilePrefix);
     * }
     */
    public static MemorySegment _wtempnam(MemorySegment _Directory, MemorySegment _FilePrefix) {
        var mh$ = _wtempnam$MH();
        try {
            return (java.lang.foreign.MemorySegment)mh$.invokeExact(_Directory, _FilePrefix);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle _wtmpnam_s$MH() {
        return RuntimeHelper.requireNonNull(constants$40._wtmpnam_s$MH,"_wtmpnam_s");
    }
    /**
     * {@snippet :
     * errno_t _wtmpnam_s(wchar_t* _Buffer, size_t _BufferCount);
     * }
     */
    public static int _wtmpnam_s(MemorySegment _Buffer, long _BufferCount) {
        var mh$ = _wtmpnam_s$MH();
        try {
            return (int)mh$.invokeExact(_Buffer, _BufferCount);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle _wtmpnam$MH() {
        return RuntimeHelper.requireNonNull(constants$40._wtmpnam$MH,"_wtmpnam");
    }
    /**
     * {@snippet :
     * wchar_t* _wtmpnam(wchar_t* _Buffer);
     * }
     */
    public static MemorySegment _wtmpnam(MemorySegment _Buffer) {
        var mh$ = _wtmpnam$MH();
        try {
            return (java.lang.foreign.MemorySegment)mh$.invokeExact(_Buffer);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle _fgetwc_nolock$MH() {
        return RuntimeHelper.requireNonNull(constants$40._fgetwc_nolock$MH,"_fgetwc_nolock");
    }
    /**
     * {@snippet :
     * wint_t _fgetwc_nolock(FILE* _Stream);
     * }
     */
    public static short _fgetwc_nolock(MemorySegment _Stream) {
        var mh$ = _fgetwc_nolock$MH();
        try {
            return (short)mh$.invokeExact(_Stream);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle _fputwc_nolock$MH() {
        return RuntimeHelper.requireNonNull(constants$41._fputwc_nolock$MH,"_fputwc_nolock");
    }
    /**
     * {@snippet :
     * wint_t _fputwc_nolock(wchar_t _Character, FILE* _Stream);
     * }
     */
    public static short _fputwc_nolock(short _Character, MemorySegment _Stream) {
        var mh$ = _fputwc_nolock$MH();
        try {
            return (short)mh$.invokeExact(_Character, _Stream);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle _getwc_nolock$MH() {
        return RuntimeHelper.requireNonNull(constants$41._getwc_nolock$MH,"_getwc_nolock");
    }
    /**
     * {@snippet :
     * wint_t _getwc_nolock(FILE* _Stream);
     * }
     */
    public static short _getwc_nolock(MemorySegment _Stream) {
        var mh$ = _getwc_nolock$MH();
        try {
            return (short)mh$.invokeExact(_Stream);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle _putwc_nolock$MH() {
        return RuntimeHelper.requireNonNull(constants$41._putwc_nolock$MH,"_putwc_nolock");
    }
    /**
     * {@snippet :
     * wint_t _putwc_nolock(wchar_t _Character, FILE* _Stream);
     * }
     */
    public static short _putwc_nolock(short _Character, MemorySegment _Stream) {
        var mh$ = _putwc_nolock$MH();
        try {
            return (short)mh$.invokeExact(_Character, _Stream);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle _ungetwc_nolock$MH() {
        return RuntimeHelper.requireNonNull(constants$41._ungetwc_nolock$MH,"_ungetwc_nolock");
    }
    /**
     * {@snippet :
     * wint_t _ungetwc_nolock(wint_t _Character, FILE* _Stream);
     * }
     */
    public static short _ungetwc_nolock(short _Character, MemorySegment _Stream) {
        var mh$ = _ungetwc_nolock$MH();
        try {
            return (short)mh$.invokeExact(_Character, _Stream);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle __stdio_common_vfwprintf$MH() {
        return RuntimeHelper.requireNonNull(constants$41.__stdio_common_vfwprintf$MH,"__stdio_common_vfwprintf");
    }
    /**
     * {@snippet :
     * int __stdio_common_vfwprintf(unsigned long long _Options, FILE* _Stream, const wchar_t* _Format, _locale_t _Locale, va_list _ArgList);
     * }
     */
    public static int __stdio_common_vfwprintf(long _Options, MemorySegment _Stream, MemorySegment _Format, MemorySegment _Locale, MemorySegment _ArgList) {
        var mh$ = __stdio_common_vfwprintf$MH();
        try {
            return (int)mh$.invokeExact(_Options, _Stream, _Format, _Locale, _ArgList);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle __stdio_common_vfwprintf_s$MH() {
        return RuntimeHelper.requireNonNull(constants$41.__stdio_common_vfwprintf_s$MH,"__stdio_common_vfwprintf_s");
    }
    /**
     * {@snippet :
     * int __stdio_common_vfwprintf_s(unsigned long long _Options, FILE* _Stream, const wchar_t* _Format, _locale_t _Locale, va_list _ArgList);
     * }
     */
    public static int __stdio_common_vfwprintf_s(long _Options, MemorySegment _Stream, MemorySegment _Format, MemorySegment _Locale, MemorySegment _ArgList) {
        var mh$ = __stdio_common_vfwprintf_s$MH();
        try {
            return (int)mh$.invokeExact(_Options, _Stream, _Format, _Locale, _ArgList);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle __stdio_common_vfwprintf_p$MH() {
        return RuntimeHelper.requireNonNull(constants$42.__stdio_common_vfwprintf_p$MH,"__stdio_common_vfwprintf_p");
    }
    /**
     * {@snippet :
     * int __stdio_common_vfwprintf_p(unsigned long long _Options, FILE* _Stream, const wchar_t* _Format, _locale_t _Locale, va_list _ArgList);
     * }
     */
    public static int __stdio_common_vfwprintf_p(long _Options, MemorySegment _Stream, MemorySegment _Format, MemorySegment _Locale, MemorySegment _ArgList) {
        var mh$ = __stdio_common_vfwprintf_p$MH();
        try {
            return (int)mh$.invokeExact(_Options, _Stream, _Format, _Locale, _ArgList);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle __stdio_common_vfwscanf$MH() {
        return RuntimeHelper.requireNonNull(constants$42.__stdio_common_vfwscanf$MH,"__stdio_common_vfwscanf");
    }
    /**
     * {@snippet :
     * int __stdio_common_vfwscanf(unsigned long long _Options, FILE* _Stream, const wchar_t* _Format, _locale_t _Locale, va_list _ArgList);
     * }
     */
    public static int __stdio_common_vfwscanf(long _Options, MemorySegment _Stream, MemorySegment _Format, MemorySegment _Locale, MemorySegment _ArgList) {
        var mh$ = __stdio_common_vfwscanf$MH();
        try {
            return (int)mh$.invokeExact(_Options, _Stream, _Format, _Locale, _ArgList);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle __stdio_common_vswprintf$MH() {
        return RuntimeHelper.requireNonNull(constants$42.__stdio_common_vswprintf$MH,"__stdio_common_vswprintf");
    }
    /**
     * {@snippet :
     * int __stdio_common_vswprintf(unsigned long long _Options, wchar_t* _Buffer, size_t _BufferCount, const wchar_t* _Format, _locale_t _Locale, va_list _ArgList);
     * }
     */
    public static int __stdio_common_vswprintf(long _Options, MemorySegment _Buffer, long _BufferCount, MemorySegment _Format, MemorySegment _Locale, MemorySegment _ArgList) {
        var mh$ = __stdio_common_vswprintf$MH();
        try {
            return (int)mh$.invokeExact(_Options, _Buffer, _BufferCount, _Format, _Locale, _ArgList);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle __stdio_common_vswprintf_s$MH() {
        return RuntimeHelper.requireNonNull(constants$42.__stdio_common_vswprintf_s$MH,"__stdio_common_vswprintf_s");
    }
    /**
     * {@snippet :
     * int __stdio_common_vswprintf_s(unsigned long long _Options, wchar_t* _Buffer, size_t _BufferCount, const wchar_t* _Format, _locale_t _Locale, va_list _ArgList);
     * }
     */
    public static int __stdio_common_vswprintf_s(long _Options, MemorySegment _Buffer, long _BufferCount, MemorySegment _Format, MemorySegment _Locale, MemorySegment _ArgList) {
        var mh$ = __stdio_common_vswprintf_s$MH();
        try {
            return (int)mh$.invokeExact(_Options, _Buffer, _BufferCount, _Format, _Locale, _ArgList);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle __stdio_common_vsnwprintf_s$MH() {
        return RuntimeHelper.requireNonNull(constants$42.__stdio_common_vsnwprintf_s$MH,"__stdio_common_vsnwprintf_s");
    }
    /**
     * {@snippet :
     * int __stdio_common_vsnwprintf_s(unsigned long long _Options, wchar_t* _Buffer, size_t _BufferCount, size_t _MaxCount, const wchar_t* _Format, _locale_t _Locale, va_list _ArgList);
     * }
     */
    public static int __stdio_common_vsnwprintf_s(long _Options, MemorySegment _Buffer, long _BufferCount, long _MaxCount, MemorySegment _Format, MemorySegment _Locale, MemorySegment _ArgList) {
        var mh$ = __stdio_common_vsnwprintf_s$MH();
        try {
            return (int)mh$.invokeExact(_Options, _Buffer, _BufferCount, _MaxCount, _Format, _Locale, _ArgList);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle __stdio_common_vswprintf_p$MH() {
        return RuntimeHelper.requireNonNull(constants$42.__stdio_common_vswprintf_p$MH,"__stdio_common_vswprintf_p");
    }
    /**
     * {@snippet :
     * int __stdio_common_vswprintf_p(unsigned long long _Options, wchar_t* _Buffer, size_t _BufferCount, const wchar_t* _Format, _locale_t _Locale, va_list _ArgList);
     * }
     */
    public static int __stdio_common_vswprintf_p(long _Options, MemorySegment _Buffer, long _BufferCount, MemorySegment _Format, MemorySegment _Locale, MemorySegment _ArgList) {
        var mh$ = __stdio_common_vswprintf_p$MH();
        try {
            return (int)mh$.invokeExact(_Options, _Buffer, _BufferCount, _Format, _Locale, _ArgList);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle __stdio_common_vswscanf$MH() {
        return RuntimeHelper.requireNonNull(constants$43.__stdio_common_vswscanf$MH,"__stdio_common_vswscanf");
    }
    /**
     * {@snippet :
     * int __stdio_common_vswscanf(unsigned long long _Options, const wchar_t* _Buffer, size_t _BufferCount, const wchar_t* _Format, _locale_t _Locale, va_list _ArgList);
     * }
     */
    public static int __stdio_common_vswscanf(long _Options, MemorySegment _Buffer, long _BufferCount, MemorySegment _Format, MemorySegment _Locale, MemorySegment _ArgList) {
        var mh$ = __stdio_common_vswscanf$MH();
        try {
            return (int)mh$.invokeExact(_Options, _Buffer, _BufferCount, _Format, _Locale, _ArgList);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    /**
     * {@snippet :
     * typedef long long fpos_t;
     * }
     */
    public static final OfLong fpos_t = Constants$root.C_LONG_LONG$LAYOUT;
    public static MethodHandle _get_stream_buffer_pointers$MH() {
        return RuntimeHelper.requireNonNull(constants$43._get_stream_buffer_pointers$MH,"_get_stream_buffer_pointers");
    }
    /**
     * {@snippet :
     * errno_t _get_stream_buffer_pointers(FILE* _Stream, char*** _Base, char*** _Pointer, int** _Count);
     * }
     */
    public static int _get_stream_buffer_pointers(MemorySegment _Stream, MemorySegment _Base, MemorySegment _Pointer, MemorySegment _Count) {
        var mh$ = _get_stream_buffer_pointers$MH();
        try {
            return (int)mh$.invokeExact(_Stream, _Base, _Pointer, _Count);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle clearerr_s$MH() {
        return RuntimeHelper.requireNonNull(constants$43.clearerr_s$MH,"clearerr_s");
    }
    /**
     * {@snippet :
     * errno_t clearerr_s(FILE* _Stream);
     * }
     */
    public static int clearerr_s(MemorySegment _Stream) {
        var mh$ = clearerr_s$MH();
        try {
            return (int)mh$.invokeExact(_Stream);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle fopen_s$MH() {
        return RuntimeHelper.requireNonNull(constants$43.fopen_s$MH,"fopen_s");
    }
    /**
     * {@snippet :
     * errno_t fopen_s(FILE** _Stream, char* _FileName, char* _Mode);
     * }
     */
    public static int fopen_s(MemorySegment _Stream, MemorySegment _FileName, MemorySegment _Mode) {
        var mh$ = fopen_s$MH();
        try {
            return (int)mh$.invokeExact(_Stream, _FileName, _Mode);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle fread_s$MH() {
        return RuntimeHelper.requireNonNull(constants$43.fread_s$MH,"fread_s");
    }
    /**
     * {@snippet :
     * size_t fread_s(void* _Buffer, size_t _BufferSize, size_t _ElementSize, size_t _ElementCount, FILE* _Stream);
     * }
     */
    public static long fread_s(MemorySegment _Buffer, long _BufferSize, long _ElementSize, long _ElementCount, MemorySegment _Stream) {
        var mh$ = fread_s$MH();
        try {
            return (long)mh$.invokeExact(_Buffer, _BufferSize, _ElementSize, _ElementCount, _Stream);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle freopen_s$MH() {
        return RuntimeHelper.requireNonNull(constants$43.freopen_s$MH,"freopen_s");
    }
    /**
     * {@snippet :
     * errno_t freopen_s(FILE** _Stream, char* _FileName, char* _Mode, FILE* _OldStream);
     * }
     */
    public static int freopen_s(MemorySegment _Stream, MemorySegment _FileName, MemorySegment _Mode, MemorySegment _OldStream) {
        var mh$ = freopen_s$MH();
        try {
            return (int)mh$.invokeExact(_Stream, _FileName, _Mode, _OldStream);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle gets_s$MH() {
        return RuntimeHelper.requireNonNull(constants$44.gets_s$MH,"gets_s");
    }
    /**
     * {@snippet :
     * char* gets_s(char* _Buffer, rsize_t _Size);
     * }
     */
    public static MemorySegment gets_s(MemorySegment _Buffer, long _Size) {
        var mh$ = gets_s$MH();
        try {
            return (java.lang.foreign.MemorySegment)mh$.invokeExact(_Buffer, _Size);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle tmpfile_s$MH() {
        return RuntimeHelper.requireNonNull(constants$44.tmpfile_s$MH,"tmpfile_s");
    }
    /**
     * {@snippet :
     * errno_t tmpfile_s(FILE** _Stream);
     * }
     */
    public static int tmpfile_s(MemorySegment _Stream) {
        var mh$ = tmpfile_s$MH();
        try {
            return (int)mh$.invokeExact(_Stream);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle tmpnam_s$MH() {
        return RuntimeHelper.requireNonNull(constants$44.tmpnam_s$MH,"tmpnam_s");
    }
    /**
     * {@snippet :
     * errno_t tmpnam_s(char* _Buffer, rsize_t _Size);
     * }
     */
    public static int tmpnam_s(MemorySegment _Buffer, long _Size) {
        var mh$ = tmpnam_s$MH();
        try {
            return (int)mh$.invokeExact(_Buffer, _Size);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle clearerr$MH() {
        return RuntimeHelper.requireNonNull(constants$44.clearerr$MH,"clearerr");
    }
    /**
     * {@snippet :
     * void clearerr(FILE* _Stream);
     * }
     */
    public static void clearerr(MemorySegment _Stream) {
        var mh$ = clearerr$MH();
        try {
            mh$.invokeExact(_Stream);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle fclose$MH() {
        return RuntimeHelper.requireNonNull(constants$44.fclose$MH,"fclose");
    }
    /**
     * {@snippet :
     * int fclose(FILE* _Stream);
     * }
     */
    public static int fclose(MemorySegment _Stream) {
        var mh$ = fclose$MH();
        try {
            return (int)mh$.invokeExact(_Stream);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle _fcloseall$MH() {
        return RuntimeHelper.requireNonNull(constants$44._fcloseall$MH,"_fcloseall");
    }
    /**
     * {@snippet :
     * int _fcloseall();
     * }
     */
    public static int _fcloseall() {
        var mh$ = _fcloseall$MH();
        try {
            return (int)mh$.invokeExact();
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle _fdopen$MH() {
        return RuntimeHelper.requireNonNull(constants$45._fdopen$MH,"_fdopen");
    }
    /**
     * {@snippet :
     * FILE* _fdopen(int _FileHandle, char* _Mode);
     * }
     */
    public static MemorySegment _fdopen(int _FileHandle, MemorySegment _Mode) {
        var mh$ = _fdopen$MH();
        try {
            return (java.lang.foreign.MemorySegment)mh$.invokeExact(_FileHandle, _Mode);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle feof$MH() {
        return RuntimeHelper.requireNonNull(constants$45.feof$MH,"feof");
    }
    /**
     * {@snippet :
     * int feof(FILE* _Stream);
     * }
     */
    public static int feof(MemorySegment _Stream) {
        var mh$ = feof$MH();
        try {
            return (int)mh$.invokeExact(_Stream);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle ferror$MH() {
        return RuntimeHelper.requireNonNull(constants$45.ferror$MH,"ferror");
    }
    /**
     * {@snippet :
     * int ferror(FILE* _Stream);
     * }
     */
    public static int ferror(MemorySegment _Stream) {
        var mh$ = ferror$MH();
        try {
            return (int)mh$.invokeExact(_Stream);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle fflush$MH() {
        return RuntimeHelper.requireNonNull(constants$45.fflush$MH,"fflush");
    }
    /**
     * {@snippet :
     * int fflush(FILE* _Stream);
     * }
     */
    public static int fflush(MemorySegment _Stream) {
        var mh$ = fflush$MH();
        try {
            return (int)mh$.invokeExact(_Stream);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle fgetc$MH() {
        return RuntimeHelper.requireNonNull(constants$45.fgetc$MH,"fgetc");
    }
    /**
     * {@snippet :
     * int fgetc(FILE* _Stream);
     * }
     */
    public static int fgetc(MemorySegment _Stream) {
        var mh$ = fgetc$MH();
        try {
            return (int)mh$.invokeExact(_Stream);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle _fgetchar$MH() {
        return RuntimeHelper.requireNonNull(constants$45._fgetchar$MH,"_fgetchar");
    }
    /**
     * {@snippet :
     * int _fgetchar();
     * }
     */
    public static int _fgetchar() {
        var mh$ = _fgetchar$MH();
        try {
            return (int)mh$.invokeExact();
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle fgetpos$MH() {
        return RuntimeHelper.requireNonNull(constants$46.fgetpos$MH,"fgetpos");
    }
    /**
     * {@snippet :
     * int fgetpos(FILE* _Stream, fpos_t* _Position);
     * }
     */
    public static int fgetpos(MemorySegment _Stream, MemorySegment _Position) {
        var mh$ = fgetpos$MH();
        try {
            return (int)mh$.invokeExact(_Stream, _Position);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle fgets$MH() {
        return RuntimeHelper.requireNonNull(constants$46.fgets$MH,"fgets");
    }
    /**
     * {@snippet :
     * char* fgets(char* _Buffer, int _MaxCount, FILE* _Stream);
     * }
     */
    public static MemorySegment fgets(MemorySegment _Buffer, int _MaxCount, MemorySegment _Stream) {
        var mh$ = fgets$MH();
        try {
            return (java.lang.foreign.MemorySegment)mh$.invokeExact(_Buffer, _MaxCount, _Stream);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle _fileno$MH() {
        return RuntimeHelper.requireNonNull(constants$46._fileno$MH,"_fileno");
    }
    /**
     * {@snippet :
     * int _fileno(FILE* _Stream);
     * }
     */
    public static int _fileno(MemorySegment _Stream) {
        var mh$ = _fileno$MH();
        try {
            return (int)mh$.invokeExact(_Stream);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle _flushall$MH() {
        return RuntimeHelper.requireNonNull(constants$46._flushall$MH,"_flushall");
    }
    /**
     * {@snippet :
     * int _flushall();
     * }
     */
    public static int _flushall() {
        var mh$ = _flushall$MH();
        try {
            return (int)mh$.invokeExact();
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle fopen$MH() {
        return RuntimeHelper.requireNonNull(constants$46.fopen$MH,"fopen");
    }
    /**
     * {@snippet :
     * FILE* fopen(char* _FileName, char* _Mode);
     * }
     */
    public static MemorySegment fopen(MemorySegment _FileName, MemorySegment _Mode) {
        var mh$ = fopen$MH();
        try {
            return (java.lang.foreign.MemorySegment)mh$.invokeExact(_FileName, _Mode);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle fputc$MH() {
        return RuntimeHelper.requireNonNull(constants$46.fputc$MH,"fputc");
    }
    /**
     * {@snippet :
     * int fputc(int _Character, FILE* _Stream);
     * }
     */
    public static int fputc(int _Character, MemorySegment _Stream) {
        var mh$ = fputc$MH();
        try {
            return (int)mh$.invokeExact(_Character, _Stream);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle _fputchar$MH() {
        return RuntimeHelper.requireNonNull(constants$47._fputchar$MH,"_fputchar");
    }
    /**
     * {@snippet :
     * int _fputchar(int _Character);
     * }
     */
    public static int _fputchar(int _Character) {
        var mh$ = _fputchar$MH();
        try {
            return (int)mh$.invokeExact(_Character);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle fputs$MH() {
        return RuntimeHelper.requireNonNull(constants$47.fputs$MH,"fputs");
    }
    /**
     * {@snippet :
     * int fputs(char* _Buffer, FILE* _Stream);
     * }
     */
    public static int fputs(MemorySegment _Buffer, MemorySegment _Stream) {
        var mh$ = fputs$MH();
        try {
            return (int)mh$.invokeExact(_Buffer, _Stream);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle fread$MH() {
        return RuntimeHelper.requireNonNull(constants$47.fread$MH,"fread");
    }
    /**
     * {@snippet :
     * unsigned long long fread(void* _Buffer, size_t _ElementSize, size_t _ElementCount, FILE* _Stream);
     * }
     */
    public static long fread(MemorySegment _Buffer, long _ElementSize, long _ElementCount, MemorySegment _Stream) {
        var mh$ = fread$MH();
        try {
            return (long)mh$.invokeExact(_Buffer, _ElementSize, _ElementCount, _Stream);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle freopen$MH() {
        return RuntimeHelper.requireNonNull(constants$47.freopen$MH,"freopen");
    }
    /**
     * {@snippet :
     * FILE* freopen(char* _FileName, char* _Mode, FILE* _Stream);
     * }
     */
    public static MemorySegment freopen(MemorySegment _FileName, MemorySegment _Mode, MemorySegment _Stream) {
        var mh$ = freopen$MH();
        try {
            return (java.lang.foreign.MemorySegment)mh$.invokeExact(_FileName, _Mode, _Stream);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle _fsopen$MH() {
        return RuntimeHelper.requireNonNull(constants$47._fsopen$MH,"_fsopen");
    }
    /**
     * {@snippet :
     * FILE* _fsopen(char* _FileName, char* _Mode, int _ShFlag);
     * }
     */
    public static MemorySegment _fsopen(MemorySegment _FileName, MemorySegment _Mode, int _ShFlag) {
        var mh$ = _fsopen$MH();
        try {
            return (java.lang.foreign.MemorySegment)mh$.invokeExact(_FileName, _Mode, _ShFlag);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle fsetpos$MH() {
        return RuntimeHelper.requireNonNull(constants$47.fsetpos$MH,"fsetpos");
    }
    /**
     * {@snippet :
     * int fsetpos(FILE* _Stream, const fpos_t* _Position);
     * }
     */
    public static int fsetpos(MemorySegment _Stream, MemorySegment _Position) {
        var mh$ = fsetpos$MH();
        try {
            return (int)mh$.invokeExact(_Stream, _Position);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle fseek$MH() {
        return RuntimeHelper.requireNonNull(constants$48.fseek$MH,"fseek");
    }
    /**
     * {@snippet :
     * int fseek(FILE* _Stream, long _Offset, int _Origin);
     * }
     */
    public static int fseek(MemorySegment _Stream, int _Offset, int _Origin) {
        var mh$ = fseek$MH();
        try {
            return (int)mh$.invokeExact(_Stream, _Offset, _Origin);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle _fseeki64$MH() {
        return RuntimeHelper.requireNonNull(constants$48._fseeki64$MH,"_fseeki64");
    }
    /**
     * {@snippet :
     * int _fseeki64(FILE* _Stream, long long _Offset, int _Origin);
     * }
     */
    public static int _fseeki64(MemorySegment _Stream, long _Offset, int _Origin) {
        var mh$ = _fseeki64$MH();
        try {
            return (int)mh$.invokeExact(_Stream, _Offset, _Origin);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle ftell$MH() {
        return RuntimeHelper.requireNonNull(constants$48.ftell$MH,"ftell");
    }
    /**
     * {@snippet :
     * long ftell(FILE* _Stream);
     * }
     */
    public static int ftell(MemorySegment _Stream) {
        var mh$ = ftell$MH();
        try {
            return (int)mh$.invokeExact(_Stream);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle _ftelli64$MH() {
        return RuntimeHelper.requireNonNull(constants$48._ftelli64$MH,"_ftelli64");
    }
    /**
     * {@snippet :
     * long long _ftelli64(FILE* _Stream);
     * }
     */
    public static long _ftelli64(MemorySegment _Stream) {
        var mh$ = _ftelli64$MH();
        try {
            return (long)mh$.invokeExact(_Stream);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle fwrite$MH() {
        return RuntimeHelper.requireNonNull(constants$48.fwrite$MH,"fwrite");
    }
    /**
     * {@snippet :
     * unsigned long long fwrite(void* _Buffer, size_t _ElementSize, size_t _ElementCount, FILE* _Stream);
     * }
     */
    public static long fwrite(MemorySegment _Buffer, long _ElementSize, long _ElementCount, MemorySegment _Stream) {
        var mh$ = fwrite$MH();
        try {
            return (long)mh$.invokeExact(_Buffer, _ElementSize, _ElementCount, _Stream);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle getc$MH() {
        return RuntimeHelper.requireNonNull(constants$48.getc$MH,"getc");
    }
    /**
     * {@snippet :
     * int getc(FILE* _Stream);
     * }
     */
    public static int getc(MemorySegment _Stream) {
        var mh$ = getc$MH();
        try {
            return (int)mh$.invokeExact(_Stream);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle getchar$MH() {
        return RuntimeHelper.requireNonNull(constants$49.getchar$MH,"getchar");
    }
    /**
     * {@snippet :
     * int getchar();
     * }
     */
    public static int getchar() {
        var mh$ = getchar$MH();
        try {
            return (int)mh$.invokeExact();
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle _getmaxstdio$MH() {
        return RuntimeHelper.requireNonNull(constants$49._getmaxstdio$MH,"_getmaxstdio");
    }
    /**
     * {@snippet :
     * int _getmaxstdio();
     * }
     */
    public static int _getmaxstdio() {
        var mh$ = _getmaxstdio$MH();
        try {
            return (int)mh$.invokeExact();
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle _getw$MH() {
        return RuntimeHelper.requireNonNull(constants$49._getw$MH,"_getw");
    }
    /**
     * {@snippet :
     * int _getw(FILE* _Stream);
     * }
     */
    public static int _getw(MemorySegment _Stream) {
        var mh$ = _getw$MH();
        try {
            return (int)mh$.invokeExact(_Stream);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle perror$MH() {
        return RuntimeHelper.requireNonNull(constants$49.perror$MH,"perror");
    }
    /**
     * {@snippet :
     * void perror(char* _ErrorMessage);
     * }
     */
    public static void perror(MemorySegment _ErrorMessage) {
        var mh$ = perror$MH();
        try {
            mh$.invokeExact(_ErrorMessage);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle _pclose$MH() {
        return RuntimeHelper.requireNonNull(constants$49._pclose$MH,"_pclose");
    }
    /**
     * {@snippet :
     * int _pclose(FILE* _Stream);
     * }
     */
    public static int _pclose(MemorySegment _Stream) {
        var mh$ = _pclose$MH();
        try {
            return (int)mh$.invokeExact(_Stream);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle _popen$MH() {
        return RuntimeHelper.requireNonNull(constants$49._popen$MH,"_popen");
    }
    /**
     * {@snippet :
     * FILE* _popen(char* _Command, char* _Mode);
     * }
     */
    public static MemorySegment _popen(MemorySegment _Command, MemorySegment _Mode) {
        var mh$ = _popen$MH();
        try {
            return (java.lang.foreign.MemorySegment)mh$.invokeExact(_Command, _Mode);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle putc$MH() {
        return RuntimeHelper.requireNonNull(constants$50.putc$MH,"putc");
    }
    /**
     * {@snippet :
     * int putc(int _Character, FILE* _Stream);
     * }
     */
    public static int putc(int _Character, MemorySegment _Stream) {
        var mh$ = putc$MH();
        try {
            return (int)mh$.invokeExact(_Character, _Stream);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle putchar$MH() {
        return RuntimeHelper.requireNonNull(constants$50.putchar$MH,"putchar");
    }
    /**
     * {@snippet :
     * int putchar(int _Character);
     * }
     */
    public static int putchar(int _Character) {
        var mh$ = putchar$MH();
        try {
            return (int)mh$.invokeExact(_Character);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle puts$MH() {
        return RuntimeHelper.requireNonNull(constants$50.puts$MH,"puts");
    }
    /**
     * {@snippet :
     * int puts(char* _Buffer);
     * }
     */
    public static int puts(MemorySegment _Buffer) {
        var mh$ = puts$MH();
        try {
            return (int)mh$.invokeExact(_Buffer);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle _putw$MH() {
        return RuntimeHelper.requireNonNull(constants$50._putw$MH,"_putw");
    }
    /**
     * {@snippet :
     * int _putw(int _Word, FILE* _Stream);
     * }
     */
    public static int _putw(int _Word, MemorySegment _Stream) {
        var mh$ = _putw$MH();
        try {
            return (int)mh$.invokeExact(_Word, _Stream);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle remove$MH() {
        return RuntimeHelper.requireNonNull(constants$50.remove$MH,"remove");
    }
    /**
     * {@snippet :
     * int remove(char* _FileName);
     * }
     */
    public static int remove(MemorySegment _FileName) {
        var mh$ = remove$MH();
        try {
            return (int)mh$.invokeExact(_FileName);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle rename$MH() {
        return RuntimeHelper.requireNonNull(constants$50.rename$MH,"rename");
    }
    /**
     * {@snippet :
     * int rename(char* _OldFileName, char* _NewFileName);
     * }
     */
    public static int rename(MemorySegment _OldFileName, MemorySegment _NewFileName) {
        var mh$ = rename$MH();
        try {
            return (int)mh$.invokeExact(_OldFileName, _NewFileName);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle _unlink$MH() {
        return RuntimeHelper.requireNonNull(constants$51._unlink$MH,"_unlink");
    }
    /**
     * {@snippet :
     * int _unlink(char* _FileName);
     * }
     */
    public static int _unlink(MemorySegment _FileName) {
        var mh$ = _unlink$MH();
        try {
            return (int)mh$.invokeExact(_FileName);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle unlink$MH() {
        return RuntimeHelper.requireNonNull(constants$51.unlink$MH,"unlink");
    }
    /**
     * {@snippet :
     * int unlink(char* _FileName);
     * }
     */
    public static int unlink(MemorySegment _FileName) {
        var mh$ = unlink$MH();
        try {
            return (int)mh$.invokeExact(_FileName);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle rewind$MH() {
        return RuntimeHelper.requireNonNull(constants$51.rewind$MH,"rewind");
    }
    /**
     * {@snippet :
     * void rewind(FILE* _Stream);
     * }
     */
    public static void rewind(MemorySegment _Stream) {
        var mh$ = rewind$MH();
        try {
            mh$.invokeExact(_Stream);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle _rmtmp$MH() {
        return RuntimeHelper.requireNonNull(constants$51._rmtmp$MH,"_rmtmp");
    }
    /**
     * {@snippet :
     * int _rmtmp();
     * }
     */
    public static int _rmtmp() {
        var mh$ = _rmtmp$MH();
        try {
            return (int)mh$.invokeExact();
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle setbuf$MH() {
        return RuntimeHelper.requireNonNull(constants$51.setbuf$MH,"setbuf");
    }
    /**
     * {@snippet :
     * void setbuf(FILE* _Stream, char* _Buffer);
     * }
     */
    public static void setbuf(MemorySegment _Stream, MemorySegment _Buffer) {
        var mh$ = setbuf$MH();
        try {
            mh$.invokeExact(_Stream, _Buffer);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle _setmaxstdio$MH() {
        return RuntimeHelper.requireNonNull(constants$51._setmaxstdio$MH,"_setmaxstdio");
    }
    /**
     * {@snippet :
     * int _setmaxstdio(int _Maximum);
     * }
     */
    public static int _setmaxstdio(int _Maximum) {
        var mh$ = _setmaxstdio$MH();
        try {
            return (int)mh$.invokeExact(_Maximum);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle setvbuf$MH() {
        return RuntimeHelper.requireNonNull(constants$52.setvbuf$MH,"setvbuf");
    }
    /**
     * {@snippet :
     * int setvbuf(FILE* _Stream, char* _Buffer, int _Mode, size_t _Size);
     * }
     */
    public static int setvbuf(MemorySegment _Stream, MemorySegment _Buffer, int _Mode, long _Size) {
        var mh$ = setvbuf$MH();
        try {
            return (int)mh$.invokeExact(_Stream, _Buffer, _Mode, _Size);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle _tempnam$MH() {
        return RuntimeHelper.requireNonNull(constants$52._tempnam$MH,"_tempnam");
    }
    /**
     * {@snippet :
     * char* _tempnam(char* _DirectoryName, char* _FilePrefix);
     * }
     */
    public static MemorySegment _tempnam(MemorySegment _DirectoryName, MemorySegment _FilePrefix) {
        var mh$ = _tempnam$MH();
        try {
            return (java.lang.foreign.MemorySegment)mh$.invokeExact(_DirectoryName, _FilePrefix);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle tmpfile$MH() {
        return RuntimeHelper.requireNonNull(constants$52.tmpfile$MH,"tmpfile");
    }
    /**
     * {@snippet :
     * FILE* tmpfile();
     * }
     */
    public static MemorySegment tmpfile() {
        var mh$ = tmpfile$MH();
        try {
            return (java.lang.foreign.MemorySegment)mh$.invokeExact();
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle tmpnam$MH() {
        return RuntimeHelper.requireNonNull(constants$52.tmpnam$MH,"tmpnam");
    }
    /**
     * {@snippet :
     * char* tmpnam(char* _Buffer);
     * }
     */
    public static MemorySegment tmpnam(MemorySegment _Buffer) {
        var mh$ = tmpnam$MH();
        try {
            return (java.lang.foreign.MemorySegment)mh$.invokeExact(_Buffer);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle ungetc$MH() {
        return RuntimeHelper.requireNonNull(constants$52.ungetc$MH,"ungetc");
    }
    /**
     * {@snippet :
     * int ungetc(int _Character, FILE* _Stream);
     * }
     */
    public static int ungetc(int _Character, MemorySegment _Stream) {
        var mh$ = ungetc$MH();
        try {
            return (int)mh$.invokeExact(_Character, _Stream);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle _lock_file$MH() {
        return RuntimeHelper.requireNonNull(constants$52._lock_file$MH,"_lock_file");
    }
    /**
     * {@snippet :
     * void _lock_file(FILE* _Stream);
     * }
     */
    public static void _lock_file(MemorySegment _Stream) {
        var mh$ = _lock_file$MH();
        try {
            mh$.invokeExact(_Stream);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle _unlock_file$MH() {
        return RuntimeHelper.requireNonNull(constants$53._unlock_file$MH,"_unlock_file");
    }
    /**
     * {@snippet :
     * void _unlock_file(FILE* _Stream);
     * }
     */
    public static void _unlock_file(MemorySegment _Stream) {
        var mh$ = _unlock_file$MH();
        try {
            mh$.invokeExact(_Stream);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle _fclose_nolock$MH() {
        return RuntimeHelper.requireNonNull(constants$53._fclose_nolock$MH,"_fclose_nolock");
    }
    /**
     * {@snippet :
     * int _fclose_nolock(FILE* _Stream);
     * }
     */
    public static int _fclose_nolock(MemorySegment _Stream) {
        var mh$ = _fclose_nolock$MH();
        try {
            return (int)mh$.invokeExact(_Stream);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle _fflush_nolock$MH() {
        return RuntimeHelper.requireNonNull(constants$53._fflush_nolock$MH,"_fflush_nolock");
    }
    /**
     * {@snippet :
     * int _fflush_nolock(FILE* _Stream);
     * }
     */
    public static int _fflush_nolock(MemorySegment _Stream) {
        var mh$ = _fflush_nolock$MH();
        try {
            return (int)mh$.invokeExact(_Stream);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle _fgetc_nolock$MH() {
        return RuntimeHelper.requireNonNull(constants$53._fgetc_nolock$MH,"_fgetc_nolock");
    }
    /**
     * {@snippet :
     * int _fgetc_nolock(FILE* _Stream);
     * }
     */
    public static int _fgetc_nolock(MemorySegment _Stream) {
        var mh$ = _fgetc_nolock$MH();
        try {
            return (int)mh$.invokeExact(_Stream);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle _fputc_nolock$MH() {
        return RuntimeHelper.requireNonNull(constants$53._fputc_nolock$MH,"_fputc_nolock");
    }
    /**
     * {@snippet :
     * int _fputc_nolock(int _Character, FILE* _Stream);
     * }
     */
    public static int _fputc_nolock(int _Character, MemorySegment _Stream) {
        var mh$ = _fputc_nolock$MH();
        try {
            return (int)mh$.invokeExact(_Character, _Stream);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle _fread_nolock$MH() {
        return RuntimeHelper.requireNonNull(constants$53._fread_nolock$MH,"_fread_nolock");
    }
    /**
     * {@snippet :
     * size_t _fread_nolock(void* _Buffer, size_t _ElementSize, size_t _ElementCount, FILE* _Stream);
     * }
     */
    public static long _fread_nolock(MemorySegment _Buffer, long _ElementSize, long _ElementCount, MemorySegment _Stream) {
        var mh$ = _fread_nolock$MH();
        try {
            return (long)mh$.invokeExact(_Buffer, _ElementSize, _ElementCount, _Stream);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle _fread_nolock_s$MH() {
        return RuntimeHelper.requireNonNull(constants$54._fread_nolock_s$MH,"_fread_nolock_s");
    }
    /**
     * {@snippet :
     * size_t _fread_nolock_s(void* _Buffer, size_t _BufferSize, size_t _ElementSize, size_t _ElementCount, FILE* _Stream);
     * }
     */
    public static long _fread_nolock_s(MemorySegment _Buffer, long _BufferSize, long _ElementSize, long _ElementCount, MemorySegment _Stream) {
        var mh$ = _fread_nolock_s$MH();
        try {
            return (long)mh$.invokeExact(_Buffer, _BufferSize, _ElementSize, _ElementCount, _Stream);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle _fseek_nolock$MH() {
        return RuntimeHelper.requireNonNull(constants$54._fseek_nolock$MH,"_fseek_nolock");
    }
    /**
     * {@snippet :
     * int _fseek_nolock(FILE* _Stream, long _Offset, int _Origin);
     * }
     */
    public static int _fseek_nolock(MemorySegment _Stream, int _Offset, int _Origin) {
        var mh$ = _fseek_nolock$MH();
        try {
            return (int)mh$.invokeExact(_Stream, _Offset, _Origin);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle _fseeki64_nolock$MH() {
        return RuntimeHelper.requireNonNull(constants$54._fseeki64_nolock$MH,"_fseeki64_nolock");
    }
    /**
     * {@snippet :
     * int _fseeki64_nolock(FILE* _Stream, long long _Offset, int _Origin);
     * }
     */
    public static int _fseeki64_nolock(MemorySegment _Stream, long _Offset, int _Origin) {
        var mh$ = _fseeki64_nolock$MH();
        try {
            return (int)mh$.invokeExact(_Stream, _Offset, _Origin);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle _ftell_nolock$MH() {
        return RuntimeHelper.requireNonNull(constants$54._ftell_nolock$MH,"_ftell_nolock");
    }
    /**
     * {@snippet :
     * long _ftell_nolock(FILE* _Stream);
     * }
     */
    public static int _ftell_nolock(MemorySegment _Stream) {
        var mh$ = _ftell_nolock$MH();
        try {
            return (int)mh$.invokeExact(_Stream);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle _ftelli64_nolock$MH() {
        return RuntimeHelper.requireNonNull(constants$54._ftelli64_nolock$MH,"_ftelli64_nolock");
    }
    /**
     * {@snippet :
     * long long _ftelli64_nolock(FILE* _Stream);
     * }
     */
    public static long _ftelli64_nolock(MemorySegment _Stream) {
        var mh$ = _ftelli64_nolock$MH();
        try {
            return (long)mh$.invokeExact(_Stream);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle _fwrite_nolock$MH() {
        return RuntimeHelper.requireNonNull(constants$54._fwrite_nolock$MH,"_fwrite_nolock");
    }
    /**
     * {@snippet :
     * size_t _fwrite_nolock(void* _Buffer, size_t _ElementSize, size_t _ElementCount, FILE* _Stream);
     * }
     */
    public static long _fwrite_nolock(MemorySegment _Buffer, long _ElementSize, long _ElementCount, MemorySegment _Stream) {
        var mh$ = _fwrite_nolock$MH();
        try {
            return (long)mh$.invokeExact(_Buffer, _ElementSize, _ElementCount, _Stream);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle _getc_nolock$MH() {
        return RuntimeHelper.requireNonNull(constants$55._getc_nolock$MH,"_getc_nolock");
    }
    /**
     * {@snippet :
     * int _getc_nolock(FILE* _Stream);
     * }
     */
    public static int _getc_nolock(MemorySegment _Stream) {
        var mh$ = _getc_nolock$MH();
        try {
            return (int)mh$.invokeExact(_Stream);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle _putc_nolock$MH() {
        return RuntimeHelper.requireNonNull(constants$55._putc_nolock$MH,"_putc_nolock");
    }
    /**
     * {@snippet :
     * int _putc_nolock(int _Character, FILE* _Stream);
     * }
     */
    public static int _putc_nolock(int _Character, MemorySegment _Stream) {
        var mh$ = _putc_nolock$MH();
        try {
            return (int)mh$.invokeExact(_Character, _Stream);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle _ungetc_nolock$MH() {
        return RuntimeHelper.requireNonNull(constants$55._ungetc_nolock$MH,"_ungetc_nolock");
    }
    /**
     * {@snippet :
     * int _ungetc_nolock(int _Character, FILE* _Stream);
     * }
     */
    public static int _ungetc_nolock(int _Character, MemorySegment _Stream) {
        var mh$ = _ungetc_nolock$MH();
        try {
            return (int)mh$.invokeExact(_Character, _Stream);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle __p__commode$MH() {
        return RuntimeHelper.requireNonNull(constants$55.__p__commode$MH,"__p__commode");
    }
    /**
     * {@snippet :
     * int* __p__commode();
     * }
     */
    public static MemorySegment __p__commode() {
        var mh$ = __p__commode$MH();
        try {
            return (java.lang.foreign.MemorySegment)mh$.invokeExact();
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle __stdio_common_vfprintf$MH() {
        return RuntimeHelper.requireNonNull(constants$55.__stdio_common_vfprintf$MH,"__stdio_common_vfprintf");
    }
    /**
     * {@snippet :
     * int __stdio_common_vfprintf(unsigned long long _Options, FILE* _Stream, char* _Format, _locale_t _Locale, va_list _ArgList);
     * }
     */
    public static int __stdio_common_vfprintf(long _Options, MemorySegment _Stream, MemorySegment _Format, MemorySegment _Locale, MemorySegment _ArgList) {
        var mh$ = __stdio_common_vfprintf$MH();
        try {
            return (int)mh$.invokeExact(_Options, _Stream, _Format, _Locale, _ArgList);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle __stdio_common_vfprintf_s$MH() {
        return RuntimeHelper.requireNonNull(constants$55.__stdio_common_vfprintf_s$MH,"__stdio_common_vfprintf_s");
    }
    /**
     * {@snippet :
     * int __stdio_common_vfprintf_s(unsigned long long _Options, FILE* _Stream, char* _Format, _locale_t _Locale, va_list _ArgList);
     * }
     */
    public static int __stdio_common_vfprintf_s(long _Options, MemorySegment _Stream, MemorySegment _Format, MemorySegment _Locale, MemorySegment _ArgList) {
        var mh$ = __stdio_common_vfprintf_s$MH();
        try {
            return (int)mh$.invokeExact(_Options, _Stream, _Format, _Locale, _ArgList);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle __stdio_common_vfprintf_p$MH() {
        return RuntimeHelper.requireNonNull(constants$56.__stdio_common_vfprintf_p$MH,"__stdio_common_vfprintf_p");
    }
    /**
     * {@snippet :
     * int __stdio_common_vfprintf_p(unsigned long long _Options, FILE* _Stream, char* _Format, _locale_t _Locale, va_list _ArgList);
     * }
     */
    public static int __stdio_common_vfprintf_p(long _Options, MemorySegment _Stream, MemorySegment _Format, MemorySegment _Locale, MemorySegment _ArgList) {
        var mh$ = __stdio_common_vfprintf_p$MH();
        try {
            return (int)mh$.invokeExact(_Options, _Stream, _Format, _Locale, _ArgList);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle _set_printf_count_output$MH() {
        return RuntimeHelper.requireNonNull(constants$56._set_printf_count_output$MH,"_set_printf_count_output");
    }
    /**
     * {@snippet :
     * int _set_printf_count_output(int _Value);
     * }
     */
    public static int _set_printf_count_output(int _Value) {
        var mh$ = _set_printf_count_output$MH();
        try {
            return (int)mh$.invokeExact(_Value);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle _get_printf_count_output$MH() {
        return RuntimeHelper.requireNonNull(constants$56._get_printf_count_output$MH,"_get_printf_count_output");
    }
    /**
     * {@snippet :
     * int _get_printf_count_output();
     * }
     */
    public static int _get_printf_count_output() {
        var mh$ = _get_printf_count_output$MH();
        try {
            return (int)mh$.invokeExact();
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle __stdio_common_vfscanf$MH() {
        return RuntimeHelper.requireNonNull(constants$56.__stdio_common_vfscanf$MH,"__stdio_common_vfscanf");
    }
    /**
     * {@snippet :
     * int __stdio_common_vfscanf(unsigned long long _Options, FILE* _Stream, char* _Format, _locale_t _Locale, va_list _Arglist);
     * }
     */
    public static int __stdio_common_vfscanf(long _Options, MemorySegment _Stream, MemorySegment _Format, MemorySegment _Locale, MemorySegment _Arglist) {
        var mh$ = __stdio_common_vfscanf$MH();
        try {
            return (int)mh$.invokeExact(_Options, _Stream, _Format, _Locale, _Arglist);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle __stdio_common_vsprintf$MH() {
        return RuntimeHelper.requireNonNull(constants$56.__stdio_common_vsprintf$MH,"__stdio_common_vsprintf");
    }
    /**
     * {@snippet :
     * int __stdio_common_vsprintf(unsigned long long _Options, char* _Buffer, size_t _BufferCount, char* _Format, _locale_t _Locale, va_list _ArgList);
     * }
     */
    public static int __stdio_common_vsprintf(long _Options, MemorySegment _Buffer, long _BufferCount, MemorySegment _Format, MemorySegment _Locale, MemorySegment _ArgList) {
        var mh$ = __stdio_common_vsprintf$MH();
        try {
            return (int)mh$.invokeExact(_Options, _Buffer, _BufferCount, _Format, _Locale, _ArgList);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle __stdio_common_vsprintf_s$MH() {
        return RuntimeHelper.requireNonNull(constants$56.__stdio_common_vsprintf_s$MH,"__stdio_common_vsprintf_s");
    }
    /**
     * {@snippet :
     * int __stdio_common_vsprintf_s(unsigned long long _Options, char* _Buffer, size_t _BufferCount, char* _Format, _locale_t _Locale, va_list _ArgList);
     * }
     */
    public static int __stdio_common_vsprintf_s(long _Options, MemorySegment _Buffer, long _BufferCount, MemorySegment _Format, MemorySegment _Locale, MemorySegment _ArgList) {
        var mh$ = __stdio_common_vsprintf_s$MH();
        try {
            return (int)mh$.invokeExact(_Options, _Buffer, _BufferCount, _Format, _Locale, _ArgList);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle __stdio_common_vsnprintf_s$MH() {
        return RuntimeHelper.requireNonNull(constants$57.__stdio_common_vsnprintf_s$MH,"__stdio_common_vsnprintf_s");
    }
    /**
     * {@snippet :
     * int __stdio_common_vsnprintf_s(unsigned long long _Options, char* _Buffer, size_t _BufferCount, size_t _MaxCount, char* _Format, _locale_t _Locale, va_list _ArgList);
     * }
     */
    public static int __stdio_common_vsnprintf_s(long _Options, MemorySegment _Buffer, long _BufferCount, long _MaxCount, MemorySegment _Format, MemorySegment _Locale, MemorySegment _ArgList) {
        var mh$ = __stdio_common_vsnprintf_s$MH();
        try {
            return (int)mh$.invokeExact(_Options, _Buffer, _BufferCount, _MaxCount, _Format, _Locale, _ArgList);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle __stdio_common_vsprintf_p$MH() {
        return RuntimeHelper.requireNonNull(constants$57.__stdio_common_vsprintf_p$MH,"__stdio_common_vsprintf_p");
    }
    /**
     * {@snippet :
     * int __stdio_common_vsprintf_p(unsigned long long _Options, char* _Buffer, size_t _BufferCount, char* _Format, _locale_t _Locale, va_list _ArgList);
     * }
     */
    public static int __stdio_common_vsprintf_p(long _Options, MemorySegment _Buffer, long _BufferCount, MemorySegment _Format, MemorySegment _Locale, MemorySegment _ArgList) {
        var mh$ = __stdio_common_vsprintf_p$MH();
        try {
            return (int)mh$.invokeExact(_Options, _Buffer, _BufferCount, _Format, _Locale, _ArgList);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle __stdio_common_vsscanf$MH() {
        return RuntimeHelper.requireNonNull(constants$57.__stdio_common_vsscanf$MH,"__stdio_common_vsscanf");
    }
    /**
     * {@snippet :
     * int __stdio_common_vsscanf(unsigned long long _Options, char* _Buffer, size_t _BufferCount, char* _Format, _locale_t _Locale, va_list _ArgList);
     * }
     */
    public static int __stdio_common_vsscanf(long _Options, MemorySegment _Buffer, long _BufferCount, MemorySegment _Format, MemorySegment _Locale, MemorySegment _ArgList) {
        var mh$ = __stdio_common_vsscanf$MH();
        try {
            return (int)mh$.invokeExact(_Options, _Buffer, _BufferCount, _Format, _Locale, _ArgList);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle tempnam$MH() {
        return RuntimeHelper.requireNonNull(constants$57.tempnam$MH,"tempnam");
    }
    /**
     * {@snippet :
     * char* tempnam(char* _Directory, char* _FilePrefix);
     * }
     */
    public static MemorySegment tempnam(MemorySegment _Directory, MemorySegment _FilePrefix) {
        var mh$ = tempnam$MH();
        try {
            return (java.lang.foreign.MemorySegment)mh$.invokeExact(_Directory, _FilePrefix);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle fcloseall$MH() {
        return RuntimeHelper.requireNonNull(constants$57.fcloseall$MH,"fcloseall");
    }
    /**
     * {@snippet :
     * int fcloseall();
     * }
     */
    public static int fcloseall() {
        var mh$ = fcloseall$MH();
        try {
            return (int)mh$.invokeExact();
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle fdopen$MH() {
        return RuntimeHelper.requireNonNull(constants$57.fdopen$MH,"fdopen");
    }
    /**
     * {@snippet :
     * FILE* fdopen(int _FileHandle, char* _Format);
     * }
     */
    public static MemorySegment fdopen(int _FileHandle, MemorySegment _Format) {
        var mh$ = fdopen$MH();
        try {
            return (java.lang.foreign.MemorySegment)mh$.invokeExact(_FileHandle, _Format);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle fgetchar$MH() {
        return RuntimeHelper.requireNonNull(constants$58.fgetchar$MH,"fgetchar");
    }
    /**
     * {@snippet :
     * int fgetchar();
     * }
     */
    public static int fgetchar() {
        var mh$ = fgetchar$MH();
        try {
            return (int)mh$.invokeExact();
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle fileno$MH() {
        return RuntimeHelper.requireNonNull(constants$58.fileno$MH,"fileno");
    }
    /**
     * {@snippet :
     * int fileno(FILE* _Stream);
     * }
     */
    public static int fileno(MemorySegment _Stream) {
        var mh$ = fileno$MH();
        try {
            return (int)mh$.invokeExact(_Stream);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle flushall$MH() {
        return RuntimeHelper.requireNonNull(constants$58.flushall$MH,"flushall");
    }
    /**
     * {@snippet :
     * int flushall();
     * }
     */
    public static int flushall() {
        var mh$ = flushall$MH();
        try {
            return (int)mh$.invokeExact();
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle fputchar$MH() {
        return RuntimeHelper.requireNonNull(constants$58.fputchar$MH,"fputchar");
    }
    /**
     * {@snippet :
     * int fputchar(int _Ch);
     * }
     */
    public static int fputchar(int _Ch) {
        var mh$ = fputchar$MH();
        try {
            return (int)mh$.invokeExact(_Ch);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle getw$MH() {
        return RuntimeHelper.requireNonNull(constants$58.getw$MH,"getw");
    }
    /**
     * {@snippet :
     * int getw(FILE* _Stream);
     * }
     */
    public static int getw(MemorySegment _Stream) {
        var mh$ = getw$MH();
        try {
            return (int)mh$.invokeExact(_Stream);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle putw$MH() {
        return RuntimeHelper.requireNonNull(constants$58.putw$MH,"putw");
    }
    /**
     * {@snippet :
     * int putw(int _Ch, FILE* _Stream);
     * }
     */
    public static int putw(int _Ch, MemorySegment _Stream) {
        var mh$ = putw$MH();
        try {
            return (int)mh$.invokeExact(_Ch, _Stream);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle rmtmp$MH() {
        return RuntimeHelper.requireNonNull(constants$59.rmtmp$MH,"rmtmp");
    }
    /**
     * {@snippet :
     * int rmtmp();
     * }
     */
    public static int rmtmp() {
        var mh$ = rmtmp$MH();
        try {
            return (int)mh$.invokeExact();
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle _calloc_base$MH() {
        return RuntimeHelper.requireNonNull(constants$59._calloc_base$MH,"_calloc_base");
    }
    /**
     * {@snippet :
     * void* _calloc_base(size_t _Count, size_t _Size);
     * }
     */
    public static MemorySegment _calloc_base(long _Count, long _Size) {
        var mh$ = _calloc_base$MH();
        try {
            return (java.lang.foreign.MemorySegment)mh$.invokeExact(_Count, _Size);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle calloc$MH() {
        return RuntimeHelper.requireNonNull(constants$59.calloc$MH,"calloc");
    }
    /**
     * {@snippet :
     * void* calloc(size_t _Count, size_t _Size);
     * }
     */
    public static MemorySegment calloc(long _Count, long _Size) {
        var mh$ = calloc$MH();
        try {
            return (java.lang.foreign.MemorySegment)mh$.invokeExact(_Count, _Size);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle _callnewh$MH() {
        return RuntimeHelper.requireNonNull(constants$59._callnewh$MH,"_callnewh");
    }
    /**
     * {@snippet :
     * int _callnewh(size_t _Size);
     * }
     */
    public static int _callnewh(long _Size) {
        var mh$ = _callnewh$MH();
        try {
            return (int)mh$.invokeExact(_Size);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle _expand$MH() {
        return RuntimeHelper.requireNonNull(constants$59._expand$MH,"_expand");
    }
    /**
     * {@snippet :
     * void* _expand(void* _Block, size_t _Size);
     * }
     */
    public static MemorySegment _expand(MemorySegment _Block, long _Size) {
        var mh$ = _expand$MH();
        try {
            return (java.lang.foreign.MemorySegment)mh$.invokeExact(_Block, _Size);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle _free_base$MH() {
        return RuntimeHelper.requireNonNull(constants$59._free_base$MH,"_free_base");
    }
    /**
     * {@snippet :
     * void _free_base(void* _Block);
     * }
     */
    public static void _free_base(MemorySegment _Block) {
        var mh$ = _free_base$MH();
        try {
            mh$.invokeExact(_Block);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle free$MH() {
        return RuntimeHelper.requireNonNull(constants$60.free$MH,"free");
    }
    /**
     * {@snippet :
     * void free(void* _Block);
     * }
     */
    public static void free(MemorySegment _Block) {
        var mh$ = free$MH();
        try {
            mh$.invokeExact(_Block);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle _malloc_base$MH() {
        return RuntimeHelper.requireNonNull(constants$60._malloc_base$MH,"_malloc_base");
    }
    /**
     * {@snippet :
     * void* _malloc_base(size_t _Size);
     * }
     */
    public static MemorySegment _malloc_base(long _Size) {
        var mh$ = _malloc_base$MH();
        try {
            return (java.lang.foreign.MemorySegment)mh$.invokeExact(_Size);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle malloc$MH() {
        return RuntimeHelper.requireNonNull(constants$60.malloc$MH,"malloc");
    }
    /**
     * {@snippet :
     * void* malloc(size_t _Size);
     * }
     */
    public static MemorySegment malloc(long _Size) {
        var mh$ = malloc$MH();
        try {
            return (java.lang.foreign.MemorySegment)mh$.invokeExact(_Size);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle _msize_base$MH() {
        return RuntimeHelper.requireNonNull(constants$60._msize_base$MH,"_msize_base");
    }
    /**
     * {@snippet :
     * size_t _msize_base(void* _Block);
     * }
     */
    public static long _msize_base(MemorySegment _Block) {
        var mh$ = _msize_base$MH();
        try {
            return (long)mh$.invokeExact(_Block);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle _msize$MH() {
        return RuntimeHelper.requireNonNull(constants$60._msize$MH,"_msize");
    }
    /**
     * {@snippet :
     * size_t _msize(void* _Block);
     * }
     */
    public static long _msize(MemorySegment _Block) {
        var mh$ = _msize$MH();
        try {
            return (long)mh$.invokeExact(_Block);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle _realloc_base$MH() {
        return RuntimeHelper.requireNonNull(constants$60._realloc_base$MH,"_realloc_base");
    }
    /**
     * {@snippet :
     * void* _realloc_base(void* _Block, size_t _Size);
     * }
     */
    public static MemorySegment _realloc_base(MemorySegment _Block, long _Size) {
        var mh$ = _realloc_base$MH();
        try {
            return (java.lang.foreign.MemorySegment)mh$.invokeExact(_Block, _Size);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle realloc$MH() {
        return RuntimeHelper.requireNonNull(constants$61.realloc$MH,"realloc");
    }
    /**
     * {@snippet :
     * void* realloc(void* _Block, size_t _Size);
     * }
     */
    public static MemorySegment realloc(MemorySegment _Block, long _Size) {
        var mh$ = realloc$MH();
        try {
            return (java.lang.foreign.MemorySegment)mh$.invokeExact(_Block, _Size);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle _recalloc_base$MH() {
        return RuntimeHelper.requireNonNull(constants$61._recalloc_base$MH,"_recalloc_base");
    }
    /**
     * {@snippet :
     * void* _recalloc_base(void* _Block, size_t _Count, size_t _Size);
     * }
     */
    public static MemorySegment _recalloc_base(MemorySegment _Block, long _Count, long _Size) {
        var mh$ = _recalloc_base$MH();
        try {
            return (java.lang.foreign.MemorySegment)mh$.invokeExact(_Block, _Count, _Size);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle _recalloc$MH() {
        return RuntimeHelper.requireNonNull(constants$61._recalloc$MH,"_recalloc");
    }
    /**
     * {@snippet :
     * void* _recalloc(void* _Block, size_t _Count, size_t _Size);
     * }
     */
    public static MemorySegment _recalloc(MemorySegment _Block, long _Count, long _Size) {
        var mh$ = _recalloc$MH();
        try {
            return (java.lang.foreign.MemorySegment)mh$.invokeExact(_Block, _Count, _Size);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle _aligned_free$MH() {
        return RuntimeHelper.requireNonNull(constants$61._aligned_free$MH,"_aligned_free");
    }
    /**
     * {@snippet :
     * void _aligned_free(void* _Block);
     * }
     */
    public static void _aligned_free(MemorySegment _Block) {
        var mh$ = _aligned_free$MH();
        try {
            mh$.invokeExact(_Block);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle _aligned_malloc$MH() {
        return RuntimeHelper.requireNonNull(constants$61._aligned_malloc$MH,"_aligned_malloc");
    }
    /**
     * {@snippet :
     * void* _aligned_malloc(size_t _Size, size_t _Alignment);
     * }
     */
    public static MemorySegment _aligned_malloc(long _Size, long _Alignment) {
        var mh$ = _aligned_malloc$MH();
        try {
            return (java.lang.foreign.MemorySegment)mh$.invokeExact(_Size, _Alignment);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle _aligned_offset_malloc$MH() {
        return RuntimeHelper.requireNonNull(constants$61._aligned_offset_malloc$MH,"_aligned_offset_malloc");
    }
    /**
     * {@snippet :
     * void* _aligned_offset_malloc(size_t _Size, size_t _Alignment, size_t _Offset);
     * }
     */
    public static MemorySegment _aligned_offset_malloc(long _Size, long _Alignment, long _Offset) {
        var mh$ = _aligned_offset_malloc$MH();
        try {
            return (java.lang.foreign.MemorySegment)mh$.invokeExact(_Size, _Alignment, _Offset);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle _aligned_msize$MH() {
        return RuntimeHelper.requireNonNull(constants$62._aligned_msize$MH,"_aligned_msize");
    }
    /**
     * {@snippet :
     * size_t _aligned_msize(void* _Block, size_t _Alignment, size_t _Offset);
     * }
     */
    public static long _aligned_msize(MemorySegment _Block, long _Alignment, long _Offset) {
        var mh$ = _aligned_msize$MH();
        try {
            return (long)mh$.invokeExact(_Block, _Alignment, _Offset);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle _aligned_offset_realloc$MH() {
        return RuntimeHelper.requireNonNull(constants$62._aligned_offset_realloc$MH,"_aligned_offset_realloc");
    }
    /**
     * {@snippet :
     * void* _aligned_offset_realloc(void* _Block, size_t _Size, size_t _Alignment, size_t _Offset);
     * }
     */
    public static MemorySegment _aligned_offset_realloc(MemorySegment _Block, long _Size, long _Alignment, long _Offset) {
        var mh$ = _aligned_offset_realloc$MH();
        try {
            return (java.lang.foreign.MemorySegment)mh$.invokeExact(_Block, _Size, _Alignment, _Offset);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle _aligned_offset_recalloc$MH() {
        return RuntimeHelper.requireNonNull(constants$62._aligned_offset_recalloc$MH,"_aligned_offset_recalloc");
    }
    /**
     * {@snippet :
     * void* _aligned_offset_recalloc(void* _Block, size_t _Count, size_t _Size, size_t _Alignment, size_t _Offset);
     * }
     */
    public static MemorySegment _aligned_offset_recalloc(MemorySegment _Block, long _Count, long _Size, long _Alignment, long _Offset) {
        var mh$ = _aligned_offset_recalloc$MH();
        try {
            return (java.lang.foreign.MemorySegment)mh$.invokeExact(_Block, _Count, _Size, _Alignment, _Offset);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle _aligned_realloc$MH() {
        return RuntimeHelper.requireNonNull(constants$62._aligned_realloc$MH,"_aligned_realloc");
    }
    /**
     * {@snippet :
     * void* _aligned_realloc(void* _Block, size_t _Size, size_t _Alignment);
     * }
     */
    public static MemorySegment _aligned_realloc(MemorySegment _Block, long _Size, long _Alignment) {
        var mh$ = _aligned_realloc$MH();
        try {
            return (java.lang.foreign.MemorySegment)mh$.invokeExact(_Block, _Size, _Alignment);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle _aligned_recalloc$MH() {
        return RuntimeHelper.requireNonNull(constants$62._aligned_recalloc$MH,"_aligned_recalloc");
    }
    /**
     * {@snippet :
     * void* _aligned_recalloc(void* _Block, size_t _Count, size_t _Size, size_t _Alignment);
     * }
     */
    public static MemorySegment _aligned_recalloc(MemorySegment _Block, long _Count, long _Size, long _Alignment) {
        var mh$ = _aligned_recalloc$MH();
        try {
            return (java.lang.foreign.MemorySegment)mh$.invokeExact(_Block, _Count, _Size, _Alignment);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    /**
     * {@snippet :
     * typedef double max_align_t;
     * }
     */
    public static final OfDouble max_align_t = Constants$root.C_DOUBLE$LAYOUT;
    public static MethodHandle bsearch_s$MH() {
        return RuntimeHelper.requireNonNull(constants$63.bsearch_s$MH,"bsearch_s");
    }
    /**
     * {@snippet :
     * void* bsearch_s(void* _Key, void* _Base, rsize_t _NumOfElements, rsize_t _SizeOfElements, _CoreCrtSecureSearchSortCompareFunction _CompareFunction, void* _Context);
     * }
     */
    public static MemorySegment bsearch_s(MemorySegment _Key, MemorySegment _Base, long _NumOfElements, long _SizeOfElements, MemorySegment _CompareFunction, MemorySegment _Context) {
        var mh$ = bsearch_s$MH();
        try {
            return (java.lang.foreign.MemorySegment)mh$.invokeExact(_Key, _Base, _NumOfElements, _SizeOfElements, _CompareFunction, _Context);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle qsort_s$MH() {
        return RuntimeHelper.requireNonNull(constants$63.qsort_s$MH,"qsort_s");
    }
    /**
     * {@snippet :
     * void qsort_s(void* _Base, rsize_t _NumOfElements, rsize_t _SizeOfElements, _CoreCrtSecureSearchSortCompareFunction _CompareFunction, void* _Context);
     * }
     */
    public static void qsort_s(MemorySegment _Base, long _NumOfElements, long _SizeOfElements, MemorySegment _CompareFunction, MemorySegment _Context) {
        var mh$ = qsort_s$MH();
        try {
            mh$.invokeExact(_Base, _NumOfElements, _SizeOfElements, _CompareFunction, _Context);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle bsearch$MH() {
        return RuntimeHelper.requireNonNull(constants$63.bsearch$MH,"bsearch");
    }
    /**
     * {@snippet :
     * void* bsearch(void* _Key, void* _Base, size_t _NumOfElements, size_t _SizeOfElements, _CoreCrtNonSecureSearchSortCompareFunction _CompareFunction);
     * }
     */
    public static MemorySegment bsearch(MemorySegment _Key, MemorySegment _Base, long _NumOfElements, long _SizeOfElements, MemorySegment _CompareFunction) {
        var mh$ = bsearch$MH();
        try {
            return (java.lang.foreign.MemorySegment)mh$.invokeExact(_Key, _Base, _NumOfElements, _SizeOfElements, _CompareFunction);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle qsort$MH() {
        return RuntimeHelper.requireNonNull(constants$64.qsort$MH,"qsort");
    }
    /**
     * {@snippet :
     * void qsort(void* _Base, size_t _NumOfElements, size_t _SizeOfElements, _CoreCrtNonSecureSearchSortCompareFunction _CompareFunction);
     * }
     */
    public static void qsort(MemorySegment _Base, long _NumOfElements, long _SizeOfElements, MemorySegment _CompareFunction) {
        var mh$ = qsort$MH();
        try {
            mh$.invokeExact(_Base, _NumOfElements, _SizeOfElements, _CompareFunction);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle _lfind_s$MH() {
        return RuntimeHelper.requireNonNull(constants$64._lfind_s$MH,"_lfind_s");
    }
    /**
     * {@snippet :
     * void* _lfind_s(void* _Key, void* _Base, unsigned int* _NumOfElements, size_t _SizeOfElements, _CoreCrtSecureSearchSortCompareFunction _CompareFunction, void* _Context);
     * }
     */
    public static MemorySegment _lfind_s(MemorySegment _Key, MemorySegment _Base, MemorySegment _NumOfElements, long _SizeOfElements, MemorySegment _CompareFunction, MemorySegment _Context) {
        var mh$ = _lfind_s$MH();
        try {
            return (java.lang.foreign.MemorySegment)mh$.invokeExact(_Key, _Base, _NumOfElements, _SizeOfElements, _CompareFunction, _Context);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle _lfind$MH() {
        return RuntimeHelper.requireNonNull(constants$64._lfind$MH,"_lfind");
    }
    /**
     * {@snippet :
     * void* _lfind(void* _Key, void* _Base, unsigned int* _NumOfElements, unsigned int _SizeOfElements, _CoreCrtNonSecureSearchSortCompareFunction _CompareFunction);
     * }
     */
    public static MemorySegment _lfind(MemorySegment _Key, MemorySegment _Base, MemorySegment _NumOfElements, int _SizeOfElements, MemorySegment _CompareFunction) {
        var mh$ = _lfind$MH();
        try {
            return (java.lang.foreign.MemorySegment)mh$.invokeExact(_Key, _Base, _NumOfElements, _SizeOfElements, _CompareFunction);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle _lsearch_s$MH() {
        return RuntimeHelper.requireNonNull(constants$64._lsearch_s$MH,"_lsearch_s");
    }
    /**
     * {@snippet :
     * void* _lsearch_s(void* _Key, void* _Base, unsigned int* _NumOfElements, size_t _SizeOfElements, _CoreCrtSecureSearchSortCompareFunction _CompareFunction, void* _Context);
     * }
     */
    public static MemorySegment _lsearch_s(MemorySegment _Key, MemorySegment _Base, MemorySegment _NumOfElements, long _SizeOfElements, MemorySegment _CompareFunction, MemorySegment _Context) {
        var mh$ = _lsearch_s$MH();
        try {
            return (java.lang.foreign.MemorySegment)mh$.invokeExact(_Key, _Base, _NumOfElements, _SizeOfElements, _CompareFunction, _Context);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle _lsearch$MH() {
        return RuntimeHelper.requireNonNull(constants$64._lsearch$MH,"_lsearch");
    }
    /**
     * {@snippet :
     * void* _lsearch(void* _Key, void* _Base, unsigned int* _NumOfElements, unsigned int _SizeOfElements, _CoreCrtNonSecureSearchSortCompareFunction _CompareFunction);
     * }
     */
    public static MemorySegment _lsearch(MemorySegment _Key, MemorySegment _Base, MemorySegment _NumOfElements, int _SizeOfElements, MemorySegment _CompareFunction) {
        var mh$ = _lsearch$MH();
        try {
            return (java.lang.foreign.MemorySegment)mh$.invokeExact(_Key, _Base, _NumOfElements, _SizeOfElements, _CompareFunction);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle lfind$MH() {
        return RuntimeHelper.requireNonNull(constants$64.lfind$MH,"lfind");
    }
    /**
     * {@snippet :
     * void* lfind(void* _Key, void* _Base, unsigned int* _NumOfElements, unsigned int _SizeOfElements, _CoreCrtNonSecureSearchSortCompareFunction _CompareFunction);
     * }
     */
    public static MemorySegment lfind(MemorySegment _Key, MemorySegment _Base, MemorySegment _NumOfElements, int _SizeOfElements, MemorySegment _CompareFunction) {
        var mh$ = lfind$MH();
        try {
            return (java.lang.foreign.MemorySegment)mh$.invokeExact(_Key, _Base, _NumOfElements, _SizeOfElements, _CompareFunction);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle lsearch$MH() {
        return RuntimeHelper.requireNonNull(constants$65.lsearch$MH,"lsearch");
    }
    /**
     * {@snippet :
     * void* lsearch(void* _Key, void* _Base, unsigned int* _NumOfElements, unsigned int _SizeOfElements, _CoreCrtNonSecureSearchSortCompareFunction _CompareFunction);
     * }
     */
    public static MemorySegment lsearch(MemorySegment _Key, MemorySegment _Base, MemorySegment _NumOfElements, int _SizeOfElements, MemorySegment _CompareFunction) {
        var mh$ = lsearch$MH();
        try {
            return (java.lang.foreign.MemorySegment)mh$.invokeExact(_Key, _Base, _NumOfElements, _SizeOfElements, _CompareFunction);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle _itow_s$MH() {
        return RuntimeHelper.requireNonNull(constants$65._itow_s$MH,"_itow_s");
    }
    /**
     * {@snippet :
     * errno_t _itow_s(int _Value, wchar_t* _Buffer, size_t _BufferCount, int _Radix);
     * }
     */
    public static int _itow_s(int _Value, MemorySegment _Buffer, long _BufferCount, int _Radix) {
        var mh$ = _itow_s$MH();
        try {
            return (int)mh$.invokeExact(_Value, _Buffer, _BufferCount, _Radix);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle _itow$MH() {
        return RuntimeHelper.requireNonNull(constants$65._itow$MH,"_itow");
    }
    /**
     * {@snippet :
     * wchar_t* _itow(int _Value, wchar_t* _Buffer, int _Radix);
     * }
     */
    public static MemorySegment _itow(int _Value, MemorySegment _Buffer, int _Radix) {
        var mh$ = _itow$MH();
        try {
            return (java.lang.foreign.MemorySegment)mh$.invokeExact(_Value, _Buffer, _Radix);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle _ltow_s$MH() {
        return RuntimeHelper.requireNonNull(constants$65._ltow_s$MH,"_ltow_s");
    }
    /**
     * {@snippet :
     * errno_t _ltow_s(long _Value, wchar_t* _Buffer, size_t _BufferCount, int _Radix);
     * }
     */
    public static int _ltow_s(int _Value, MemorySegment _Buffer, long _BufferCount, int _Radix) {
        var mh$ = _ltow_s$MH();
        try {
            return (int)mh$.invokeExact(_Value, _Buffer, _BufferCount, _Radix);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle _ltow$MH() {
        return RuntimeHelper.requireNonNull(constants$65._ltow$MH,"_ltow");
    }
    /**
     * {@snippet :
     * wchar_t* _ltow(long _Value, wchar_t* _Buffer, int _Radix);
     * }
     */
    public static MemorySegment _ltow(int _Value, MemorySegment _Buffer, int _Radix) {
        var mh$ = _ltow$MH();
        try {
            return (java.lang.foreign.MemorySegment)mh$.invokeExact(_Value, _Buffer, _Radix);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle _ultow_s$MH() {
        return RuntimeHelper.requireNonNull(constants$65._ultow_s$MH,"_ultow_s");
    }
    /**
     * {@snippet :
     * errno_t _ultow_s(unsigned long _Value, wchar_t* _Buffer, size_t _BufferCount, int _Radix);
     * }
     */
    public static int _ultow_s(int _Value, MemorySegment _Buffer, long _BufferCount, int _Radix) {
        var mh$ = _ultow_s$MH();
        try {
            return (int)mh$.invokeExact(_Value, _Buffer, _BufferCount, _Radix);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle _ultow$MH() {
        return RuntimeHelper.requireNonNull(constants$66._ultow$MH,"_ultow");
    }
    /**
     * {@snippet :
     * wchar_t* _ultow(unsigned long _Value, wchar_t* _Buffer, int _Radix);
     * }
     */
    public static MemorySegment _ultow(int _Value, MemorySegment _Buffer, int _Radix) {
        var mh$ = _ultow$MH();
        try {
            return (java.lang.foreign.MemorySegment)mh$.invokeExact(_Value, _Buffer, _Radix);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle wcstod$MH() {
        return RuntimeHelper.requireNonNull(constants$66.wcstod$MH,"wcstod");
    }
    /**
     * {@snippet :
     * double wcstod(const wchar_t* _String, wchar_t** _EndPtr);
     * }
     */
    public static double wcstod(MemorySegment _String, MemorySegment _EndPtr) {
        var mh$ = wcstod$MH();
        try {
            return (double)mh$.invokeExact(_String, _EndPtr);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle _wcstod_l$MH() {
        return RuntimeHelper.requireNonNull(constants$66._wcstod_l$MH,"_wcstod_l");
    }
    /**
     * {@snippet :
     * double _wcstod_l(const wchar_t* _String, wchar_t** _EndPtr, _locale_t _Locale);
     * }
     */
    public static double _wcstod_l(MemorySegment _String, MemorySegment _EndPtr, MemorySegment _Locale) {
        var mh$ = _wcstod_l$MH();
        try {
            return (double)mh$.invokeExact(_String, _EndPtr, _Locale);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle wcstol$MH() {
        return RuntimeHelper.requireNonNull(constants$66.wcstol$MH,"wcstol");
    }
    /**
     * {@snippet :
     * long wcstol(const wchar_t* _String, wchar_t** _EndPtr, int _Radix);
     * }
     */
    public static int wcstol(MemorySegment _String, MemorySegment _EndPtr, int _Radix) {
        var mh$ = wcstol$MH();
        try {
            return (int)mh$.invokeExact(_String, _EndPtr, _Radix);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle _wcstol_l$MH() {
        return RuntimeHelper.requireNonNull(constants$66._wcstol_l$MH,"_wcstol_l");
    }
    /**
     * {@snippet :
     * long _wcstol_l(const wchar_t* _String, wchar_t** _EndPtr, int _Radix, _locale_t _Locale);
     * }
     */
    public static int _wcstol_l(MemorySegment _String, MemorySegment _EndPtr, int _Radix, MemorySegment _Locale) {
        var mh$ = _wcstol_l$MH();
        try {
            return (int)mh$.invokeExact(_String, _EndPtr, _Radix, _Locale);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle wcstoll$MH() {
        return RuntimeHelper.requireNonNull(constants$66.wcstoll$MH,"wcstoll");
    }
    /**
     * {@snippet :
     * long long wcstoll(const wchar_t* _String, wchar_t** _EndPtr, int _Radix);
     * }
     */
    public static long wcstoll(MemorySegment _String, MemorySegment _EndPtr, int _Radix) {
        var mh$ = wcstoll$MH();
        try {
            return (long)mh$.invokeExact(_String, _EndPtr, _Radix);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle _wcstoll_l$MH() {
        return RuntimeHelper.requireNonNull(constants$67._wcstoll_l$MH,"_wcstoll_l");
    }
    /**
     * {@snippet :
     * long long _wcstoll_l(const wchar_t* _String, wchar_t** _EndPtr, int _Radix, _locale_t _Locale);
     * }
     */
    public static long _wcstoll_l(MemorySegment _String, MemorySegment _EndPtr, int _Radix, MemorySegment _Locale) {
        var mh$ = _wcstoll_l$MH();
        try {
            return (long)mh$.invokeExact(_String, _EndPtr, _Radix, _Locale);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle wcstoul$MH() {
        return RuntimeHelper.requireNonNull(constants$67.wcstoul$MH,"wcstoul");
    }
    /**
     * {@snippet :
     * unsigned long wcstoul(const wchar_t* _String, wchar_t** _EndPtr, int _Radix);
     * }
     */
    public static int wcstoul(MemorySegment _String, MemorySegment _EndPtr, int _Radix) {
        var mh$ = wcstoul$MH();
        try {
            return (int)mh$.invokeExact(_String, _EndPtr, _Radix);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle _wcstoul_l$MH() {
        return RuntimeHelper.requireNonNull(constants$67._wcstoul_l$MH,"_wcstoul_l");
    }
    /**
     * {@snippet :
     * unsigned long _wcstoul_l(const wchar_t* _String, wchar_t** _EndPtr, int _Radix, _locale_t _Locale);
     * }
     */
    public static int _wcstoul_l(MemorySegment _String, MemorySegment _EndPtr, int _Radix, MemorySegment _Locale) {
        var mh$ = _wcstoul_l$MH();
        try {
            return (int)mh$.invokeExact(_String, _EndPtr, _Radix, _Locale);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
}


