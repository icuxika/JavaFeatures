// Generated by jextract

package com.icuxika.jextract.libffmpeg;

import java.lang.invoke.MethodHandle;
import java.lang.invoke.VarHandle;
import java.nio.ByteOrder;
import java.lang.foreign.*;
import static java.lang.foreign.ValueLayout.*;
final class constants$33 {

    // Suppresses default constructor, ensuring non-instantiability.
    private constants$33() {}
    static final FunctionDescriptor cosf$FUNC = FunctionDescriptor.of(Constants$root.C_FLOAT$LAYOUT,
        Constants$root.C_FLOAT$LAYOUT
    );
    static final MethodHandle cosf$MH = RuntimeHelper.downcallHandle(
        "cosf",
        constants$33.cosf$FUNC
    );
    static final FunctionDescriptor coshf$FUNC = FunctionDescriptor.of(Constants$root.C_FLOAT$LAYOUT,
        Constants$root.C_FLOAT$LAYOUT
    );
    static final MethodHandle coshf$MH = RuntimeHelper.downcallHandle(
        "coshf",
        constants$33.coshf$FUNC
    );
    static final FunctionDescriptor expf$FUNC = FunctionDescriptor.of(Constants$root.C_FLOAT$LAYOUT,
        Constants$root.C_FLOAT$LAYOUT
    );
    static final MethodHandle expf$MH = RuntimeHelper.downcallHandle(
        "expf",
        constants$33.expf$FUNC
    );
    static final FunctionDescriptor floorf$FUNC = FunctionDescriptor.of(Constants$root.C_FLOAT$LAYOUT,
        Constants$root.C_FLOAT$LAYOUT
    );
    static final MethodHandle floorf$MH = RuntimeHelper.downcallHandle(
        "floorf",
        constants$33.floorf$FUNC
    );
    static final FunctionDescriptor fmodf$FUNC = FunctionDescriptor.of(Constants$root.C_FLOAT$LAYOUT,
        Constants$root.C_FLOAT$LAYOUT,
        Constants$root.C_FLOAT$LAYOUT
    );
    static final MethodHandle fmodf$MH = RuntimeHelper.downcallHandle(
        "fmodf",
        constants$33.fmodf$FUNC
    );
    static final FunctionDescriptor log10f$FUNC = FunctionDescriptor.of(Constants$root.C_FLOAT$LAYOUT,
        Constants$root.C_FLOAT$LAYOUT
    );
    static final MethodHandle log10f$MH = RuntimeHelper.downcallHandle(
        "log10f",
        constants$33.log10f$FUNC
    );
}


