// Generated by jextract

package com.icuxika.jextract.libffmpeg;

import java.lang.invoke.MethodHandle;
import java.lang.invoke.VarHandle;
import java.nio.ByteOrder;
import java.lang.foreign.*;
import static java.lang.foreign.ValueLayout.*;
/**
 * {@snippet :
 * struct AVCodecHWConfig {
 *     enum AVPixelFormat pix_fmt;
 *     int methods;
 *     enum AVHWDeviceType device_type;
 * };
 * }
 */
public class AVCodecHWConfig {

    static final StructLayout $struct$LAYOUT = MemoryLayout.structLayout(
        Constants$root.C_LONG$LAYOUT.withName("pix_fmt"),
        Constants$root.C_LONG$LAYOUT.withName("methods"),
        Constants$root.C_LONG$LAYOUT.withName("device_type")
    ).withName("AVCodecHWConfig");
    public static MemoryLayout $LAYOUT() {
        return AVCodecHWConfig.$struct$LAYOUT;
    }
    static final VarHandle pix_fmt$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("pix_fmt"));
    public static VarHandle pix_fmt$VH() {
        return AVCodecHWConfig.pix_fmt$VH;
    }
    /**
     * Getter for field:
     * {@snippet :
     * enum AVPixelFormat pix_fmt;
     * }
     */
    public static int pix_fmt$get(MemorySegment seg) {
        return (int)AVCodecHWConfig.pix_fmt$VH.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * enum AVPixelFormat pix_fmt;
     * }
     */
    public static void pix_fmt$set(MemorySegment seg, int x) {
        AVCodecHWConfig.pix_fmt$VH.set(seg, x);
    }
    public static int pix_fmt$get(MemorySegment seg, long index) {
        return (int)AVCodecHWConfig.pix_fmt$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void pix_fmt$set(MemorySegment seg, long index, int x) {
        AVCodecHWConfig.pix_fmt$VH.set(seg.asSlice(index*sizeof()), x);
    }
    static final VarHandle methods$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("methods"));
    public static VarHandle methods$VH() {
        return AVCodecHWConfig.methods$VH;
    }
    /**
     * Getter for field:
     * {@snippet :
     * int methods;
     * }
     */
    public static int methods$get(MemorySegment seg) {
        return (int)AVCodecHWConfig.methods$VH.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * int methods;
     * }
     */
    public static void methods$set(MemorySegment seg, int x) {
        AVCodecHWConfig.methods$VH.set(seg, x);
    }
    public static int methods$get(MemorySegment seg, long index) {
        return (int)AVCodecHWConfig.methods$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void methods$set(MemorySegment seg, long index, int x) {
        AVCodecHWConfig.methods$VH.set(seg.asSlice(index*sizeof()), x);
    }
    static final VarHandle device_type$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("device_type"));
    public static VarHandle device_type$VH() {
        return AVCodecHWConfig.device_type$VH;
    }
    /**
     * Getter for field:
     * {@snippet :
     * enum AVHWDeviceType device_type;
     * }
     */
    public static int device_type$get(MemorySegment seg) {
        return (int)AVCodecHWConfig.device_type$VH.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * enum AVHWDeviceType device_type;
     * }
     */
    public static void device_type$set(MemorySegment seg, int x) {
        AVCodecHWConfig.device_type$VH.set(seg, x);
    }
    public static int device_type$get(MemorySegment seg, long index) {
        return (int)AVCodecHWConfig.device_type$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void device_type$set(MemorySegment seg, long index, int x) {
        AVCodecHWConfig.device_type$VH.set(seg.asSlice(index*sizeof()), x);
    }
    public static long sizeof() { return $LAYOUT().byteSize(); }
    public static MemorySegment allocate(SegmentAllocator allocator) { return allocator.allocate($LAYOUT()); }
    public static MemorySegment allocateArray(long len, SegmentAllocator allocator) {
        return allocator.allocate(MemoryLayout.sequenceLayout(len, $LAYOUT()));
    }
    public static MemorySegment ofAddress(MemorySegment addr, SegmentScope scope) { return RuntimeHelper.asArray(addr, $LAYOUT(), 1, scope); }
}


