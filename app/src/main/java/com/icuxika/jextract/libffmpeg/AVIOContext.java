// Generated by jextract

package com.icuxika.jextract.libffmpeg;

import java.lang.invoke.MethodHandle;
import java.lang.invoke.VarHandle;
import java.nio.ByteOrder;
import java.lang.foreign.*;
import static java.lang.foreign.ValueLayout.*;
/**
 * {@snippet :
 * struct AVIOContext {
 *     const AVClass* av_class;
 *     unsigned char* buffer;
 *     int buffer_size;
 *     unsigned char* buf_ptr;
 *     unsigned char* buf_end;
 *     void* opaque;
 *     int (*read_packet)(void*,uint8_t*,int);
 *     int (*write_packet)(void*,uint8_t*,int);
 *     int64_t (*seek)(void*,int64_t,int);
 *     int64_t pos;
 *     int eof_reached;
 *     int error;
 *     int write_flag;
 *     int max_packet_size;
 *     int min_packet_size;
 *     unsigned long checksum;
 *     unsigned char* checksum_ptr;
 *     unsigned long (*update_checksum)(unsigned long,const uint8_t*,unsigned int);
 *     int (*read_pause)(void*,int);
 *     int64_t (*read_seek)(void*,int,int64_t,int);
 *     int seekable;
 *     int direct;
 *     char* protocol_whitelist;
 *     char* protocol_blacklist;
 *     int (*write_data_type)(void*,uint8_t*,int,enum AVIODataMarkerType,int64_t);
 *     int ignore_boundary_point;
 *     unsigned char* buf_ptr_max;
 *     int64_t bytes_read;
 *     int64_t bytes_written;
 * };
 * }
 */
public class AVIOContext {

    static final StructLayout $struct$LAYOUT = MemoryLayout.structLayout(
        Constants$root.C_POINTER$LAYOUT.withName("av_class"),
        Constants$root.C_POINTER$LAYOUT.withName("buffer"),
        Constants$root.C_LONG$LAYOUT.withName("buffer_size"),
        MemoryLayout.paddingLayout(32),
        Constants$root.C_POINTER$LAYOUT.withName("buf_ptr"),
        Constants$root.C_POINTER$LAYOUT.withName("buf_end"),
        Constants$root.C_POINTER$LAYOUT.withName("opaque"),
        Constants$root.C_POINTER$LAYOUT.withName("read_packet"),
        Constants$root.C_POINTER$LAYOUT.withName("write_packet"),
        Constants$root.C_POINTER$LAYOUT.withName("seek"),
        Constants$root.C_LONG_LONG$LAYOUT.withName("pos"),
        Constants$root.C_LONG$LAYOUT.withName("eof_reached"),
        Constants$root.C_LONG$LAYOUT.withName("error"),
        Constants$root.C_LONG$LAYOUT.withName("write_flag"),
        Constants$root.C_LONG$LAYOUT.withName("max_packet_size"),
        Constants$root.C_LONG$LAYOUT.withName("min_packet_size"),
        Constants$root.C_LONG$LAYOUT.withName("checksum"),
        Constants$root.C_POINTER$LAYOUT.withName("checksum_ptr"),
        Constants$root.C_POINTER$LAYOUT.withName("update_checksum"),
        Constants$root.C_POINTER$LAYOUT.withName("read_pause"),
        Constants$root.C_POINTER$LAYOUT.withName("read_seek"),
        Constants$root.C_LONG$LAYOUT.withName("seekable"),
        Constants$root.C_LONG$LAYOUT.withName("direct"),
        Constants$root.C_POINTER$LAYOUT.withName("protocol_whitelist"),
        Constants$root.C_POINTER$LAYOUT.withName("protocol_blacklist"),
        Constants$root.C_POINTER$LAYOUT.withName("write_data_type"),
        Constants$root.C_LONG$LAYOUT.withName("ignore_boundary_point"),
        MemoryLayout.paddingLayout(32),
        Constants$root.C_POINTER$LAYOUT.withName("buf_ptr_max"),
        Constants$root.C_LONG_LONG$LAYOUT.withName("bytes_read"),
        Constants$root.C_LONG_LONG$LAYOUT.withName("bytes_written")
    ).withName("AVIOContext");
    public static MemoryLayout $LAYOUT() {
        return AVIOContext.$struct$LAYOUT;
    }
    static final VarHandle av_class$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("av_class"));
    public static VarHandle av_class$VH() {
        return AVIOContext.av_class$VH;
    }
    /**
     * Getter for field:
     * {@snippet :
     * const AVClass* av_class;
     * }
     */
    public static MemorySegment av_class$get(MemorySegment seg) {
        return (java.lang.foreign.MemorySegment)AVIOContext.av_class$VH.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * const AVClass* av_class;
     * }
     */
    public static void av_class$set(MemorySegment seg, MemorySegment x) {
        AVIOContext.av_class$VH.set(seg, x);
    }
    public static MemorySegment av_class$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemorySegment)AVIOContext.av_class$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void av_class$set(MemorySegment seg, long index, MemorySegment x) {
        AVIOContext.av_class$VH.set(seg.asSlice(index*sizeof()), x);
    }
    static final VarHandle buffer$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("buffer"));
    public static VarHandle buffer$VH() {
        return AVIOContext.buffer$VH;
    }
    /**
     * Getter for field:
     * {@snippet :
     * unsigned char* buffer;
     * }
     */
    public static MemorySegment buffer$get(MemorySegment seg) {
        return (java.lang.foreign.MemorySegment)AVIOContext.buffer$VH.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * unsigned char* buffer;
     * }
     */
    public static void buffer$set(MemorySegment seg, MemorySegment x) {
        AVIOContext.buffer$VH.set(seg, x);
    }
    public static MemorySegment buffer$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemorySegment)AVIOContext.buffer$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void buffer$set(MemorySegment seg, long index, MemorySegment x) {
        AVIOContext.buffer$VH.set(seg.asSlice(index*sizeof()), x);
    }
    static final VarHandle buffer_size$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("buffer_size"));
    public static VarHandle buffer_size$VH() {
        return AVIOContext.buffer_size$VH;
    }
    /**
     * Getter for field:
     * {@snippet :
     * int buffer_size;
     * }
     */
    public static int buffer_size$get(MemorySegment seg) {
        return (int)AVIOContext.buffer_size$VH.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * int buffer_size;
     * }
     */
    public static void buffer_size$set(MemorySegment seg, int x) {
        AVIOContext.buffer_size$VH.set(seg, x);
    }
    public static int buffer_size$get(MemorySegment seg, long index) {
        return (int)AVIOContext.buffer_size$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void buffer_size$set(MemorySegment seg, long index, int x) {
        AVIOContext.buffer_size$VH.set(seg.asSlice(index*sizeof()), x);
    }
    static final VarHandle buf_ptr$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("buf_ptr"));
    public static VarHandle buf_ptr$VH() {
        return AVIOContext.buf_ptr$VH;
    }
    /**
     * Getter for field:
     * {@snippet :
     * unsigned char* buf_ptr;
     * }
     */
    public static MemorySegment buf_ptr$get(MemorySegment seg) {
        return (java.lang.foreign.MemorySegment)AVIOContext.buf_ptr$VH.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * unsigned char* buf_ptr;
     * }
     */
    public static void buf_ptr$set(MemorySegment seg, MemorySegment x) {
        AVIOContext.buf_ptr$VH.set(seg, x);
    }
    public static MemorySegment buf_ptr$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemorySegment)AVIOContext.buf_ptr$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void buf_ptr$set(MemorySegment seg, long index, MemorySegment x) {
        AVIOContext.buf_ptr$VH.set(seg.asSlice(index*sizeof()), x);
    }
    static final VarHandle buf_end$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("buf_end"));
    public static VarHandle buf_end$VH() {
        return AVIOContext.buf_end$VH;
    }
    /**
     * Getter for field:
     * {@snippet :
     * unsigned char* buf_end;
     * }
     */
    public static MemorySegment buf_end$get(MemorySegment seg) {
        return (java.lang.foreign.MemorySegment)AVIOContext.buf_end$VH.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * unsigned char* buf_end;
     * }
     */
    public static void buf_end$set(MemorySegment seg, MemorySegment x) {
        AVIOContext.buf_end$VH.set(seg, x);
    }
    public static MemorySegment buf_end$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemorySegment)AVIOContext.buf_end$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void buf_end$set(MemorySegment seg, long index, MemorySegment x) {
        AVIOContext.buf_end$VH.set(seg.asSlice(index*sizeof()), x);
    }
    static final VarHandle opaque$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("opaque"));
    public static VarHandle opaque$VH() {
        return AVIOContext.opaque$VH;
    }
    /**
     * Getter for field:
     * {@snippet :
     * void* opaque;
     * }
     */
    public static MemorySegment opaque$get(MemorySegment seg) {
        return (java.lang.foreign.MemorySegment)AVIOContext.opaque$VH.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * void* opaque;
     * }
     */
    public static void opaque$set(MemorySegment seg, MemorySegment x) {
        AVIOContext.opaque$VH.set(seg, x);
    }
    public static MemorySegment opaque$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemorySegment)AVIOContext.opaque$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void opaque$set(MemorySegment seg, long index, MemorySegment x) {
        AVIOContext.opaque$VH.set(seg.asSlice(index*sizeof()), x);
    }
    static final FunctionDescriptor read_packet$FUNC = FunctionDescriptor.of(Constants$root.C_LONG$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_LONG$LAYOUT
    );
    static final FunctionDescriptor read_packet_UP$FUNC = FunctionDescriptor.of(Constants$root.C_LONG$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_LONG$LAYOUT
    );
    static final MethodHandle read_packet_UP$MH = RuntimeHelper.upcallHandle(read_packet.class, "apply", AVIOContext.read_packet_UP$FUNC);
    static final FunctionDescriptor read_packet_DOWN$FUNC = FunctionDescriptor.of(Constants$root.C_LONG$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_LONG$LAYOUT
    );
    static final MethodHandle read_packet_DOWN$MH = RuntimeHelper.downcallHandle(
        AVIOContext.read_packet_DOWN$FUNC
    );
    /**
     * {@snippet :
 * int (*read_packet)(void*,uint8_t*,int);
     * }
     */
    public interface read_packet {

        int apply(java.lang.foreign.MemorySegment _x0, java.lang.foreign.MemorySegment _x1, int _x2);
        static MemorySegment allocate(read_packet fi, SegmentScope scope) {
            return RuntimeHelper.upcallStub(AVIOContext.read_packet_UP$MH, fi, AVIOContext.read_packet$FUNC, scope);
        }
        static read_packet ofAddress(MemorySegment addr, SegmentScope scope) {
            MemorySegment symbol = MemorySegment.ofAddress(addr.address(), 0, scope);
            return (java.lang.foreign.MemorySegment __x0, java.lang.foreign.MemorySegment __x1, int __x2) -> {
                try {
                    return (int)AVIOContext.read_packet_DOWN$MH.invokeExact(symbol, __x0, __x1, __x2);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    static final VarHandle read_packet$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("read_packet"));
    public static VarHandle read_packet$VH() {
        return AVIOContext.read_packet$VH;
    }
    /**
     * Getter for field:
     * {@snippet :
     * int (*read_packet)(void*,uint8_t*,int);
     * }
     */
    public static MemorySegment read_packet$get(MemorySegment seg) {
        return (java.lang.foreign.MemorySegment)AVIOContext.read_packet$VH.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * int (*read_packet)(void*,uint8_t*,int);
     * }
     */
    public static void read_packet$set(MemorySegment seg, MemorySegment x) {
        AVIOContext.read_packet$VH.set(seg, x);
    }
    public static MemorySegment read_packet$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemorySegment)AVIOContext.read_packet$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void read_packet$set(MemorySegment seg, long index, MemorySegment x) {
        AVIOContext.read_packet$VH.set(seg.asSlice(index*sizeof()), x);
    }
    public static read_packet read_packet(MemorySegment segment, SegmentScope scope) {
        return read_packet.ofAddress(read_packet$get(segment), scope);
    }
    static final FunctionDescriptor write_packet$FUNC = FunctionDescriptor.of(Constants$root.C_LONG$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_LONG$LAYOUT
    );
    static final FunctionDescriptor write_packet_UP$FUNC = FunctionDescriptor.of(Constants$root.C_LONG$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_LONG$LAYOUT
    );
    static final MethodHandle write_packet_UP$MH = RuntimeHelper.upcallHandle(write_packet.class, "apply", AVIOContext.write_packet_UP$FUNC);
    static final FunctionDescriptor write_packet_DOWN$FUNC = FunctionDescriptor.of(Constants$root.C_LONG$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_LONG$LAYOUT
    );
    static final MethodHandle write_packet_DOWN$MH = RuntimeHelper.downcallHandle(
        AVIOContext.write_packet_DOWN$FUNC
    );
    /**
     * {@snippet :
 * int (*write_packet)(void*,uint8_t*,int);
     * }
     */
    public interface write_packet {

        int apply(java.lang.foreign.MemorySegment _x0, java.lang.foreign.MemorySegment _x1, int _x2);
        static MemorySegment allocate(write_packet fi, SegmentScope scope) {
            return RuntimeHelper.upcallStub(AVIOContext.write_packet_UP$MH, fi, AVIOContext.write_packet$FUNC, scope);
        }
        static write_packet ofAddress(MemorySegment addr, SegmentScope scope) {
            MemorySegment symbol = MemorySegment.ofAddress(addr.address(), 0, scope);
            return (java.lang.foreign.MemorySegment __x0, java.lang.foreign.MemorySegment __x1, int __x2) -> {
                try {
                    return (int)AVIOContext.write_packet_DOWN$MH.invokeExact(symbol, __x0, __x1, __x2);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    static final VarHandle write_packet$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("write_packet"));
    public static VarHandle write_packet$VH() {
        return AVIOContext.write_packet$VH;
    }
    /**
     * Getter for field:
     * {@snippet :
     * int (*write_packet)(void*,uint8_t*,int);
     * }
     */
    public static MemorySegment write_packet$get(MemorySegment seg) {
        return (java.lang.foreign.MemorySegment)AVIOContext.write_packet$VH.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * int (*write_packet)(void*,uint8_t*,int);
     * }
     */
    public static void write_packet$set(MemorySegment seg, MemorySegment x) {
        AVIOContext.write_packet$VH.set(seg, x);
    }
    public static MemorySegment write_packet$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemorySegment)AVIOContext.write_packet$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void write_packet$set(MemorySegment seg, long index, MemorySegment x) {
        AVIOContext.write_packet$VH.set(seg.asSlice(index*sizeof()), x);
    }
    public static write_packet write_packet(MemorySegment segment, SegmentScope scope) {
        return write_packet.ofAddress(write_packet$get(segment), scope);
    }
    static final FunctionDescriptor seek$FUNC = FunctionDescriptor.of(Constants$root.C_LONG_LONG$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_LONG_LONG$LAYOUT,
        Constants$root.C_LONG$LAYOUT
    );
    static final FunctionDescriptor seek_UP$FUNC = FunctionDescriptor.of(Constants$root.C_LONG_LONG$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_LONG_LONG$LAYOUT,
        Constants$root.C_LONG$LAYOUT
    );
    static final MethodHandle seek_UP$MH = RuntimeHelper.upcallHandle(seek.class, "apply", AVIOContext.seek_UP$FUNC);
    static final FunctionDescriptor seek_DOWN$FUNC = FunctionDescriptor.of(Constants$root.C_LONG_LONG$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_LONG_LONG$LAYOUT,
        Constants$root.C_LONG$LAYOUT
    );
    static final MethodHandle seek_DOWN$MH = RuntimeHelper.downcallHandle(
        AVIOContext.seek_DOWN$FUNC
    );
    /**
     * {@snippet :
 * int64_t (*seek)(void*,int64_t,int);
     * }
     */
    public interface seek {

        long apply(java.lang.foreign.MemorySegment _x0, long _x1, int _x2);
        static MemorySegment allocate(seek fi, SegmentScope scope) {
            return RuntimeHelper.upcallStub(AVIOContext.seek_UP$MH, fi, AVIOContext.seek$FUNC, scope);
        }
        static seek ofAddress(MemorySegment addr, SegmentScope scope) {
            MemorySegment symbol = MemorySegment.ofAddress(addr.address(), 0, scope);
            return (java.lang.foreign.MemorySegment __x0, long __x1, int __x2) -> {
                try {
                    return (long)AVIOContext.seek_DOWN$MH.invokeExact(symbol, __x0, __x1, __x2);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    static final VarHandle seek$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("seek"));
    public static VarHandle seek$VH() {
        return AVIOContext.seek$VH;
    }
    /**
     * Getter for field:
     * {@snippet :
     * int64_t (*seek)(void*,int64_t,int);
     * }
     */
    public static MemorySegment seek$get(MemorySegment seg) {
        return (java.lang.foreign.MemorySegment)AVIOContext.seek$VH.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * int64_t (*seek)(void*,int64_t,int);
     * }
     */
    public static void seek$set(MemorySegment seg, MemorySegment x) {
        AVIOContext.seek$VH.set(seg, x);
    }
    public static MemorySegment seek$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemorySegment)AVIOContext.seek$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void seek$set(MemorySegment seg, long index, MemorySegment x) {
        AVIOContext.seek$VH.set(seg.asSlice(index*sizeof()), x);
    }
    public static seek seek(MemorySegment segment, SegmentScope scope) {
        return seek.ofAddress(seek$get(segment), scope);
    }
    static final VarHandle pos$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("pos"));
    public static VarHandle pos$VH() {
        return AVIOContext.pos$VH;
    }
    /**
     * Getter for field:
     * {@snippet :
     * int64_t pos;
     * }
     */
    public static long pos$get(MemorySegment seg) {
        return (long)AVIOContext.pos$VH.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * int64_t pos;
     * }
     */
    public static void pos$set(MemorySegment seg, long x) {
        AVIOContext.pos$VH.set(seg, x);
    }
    public static long pos$get(MemorySegment seg, long index) {
        return (long)AVIOContext.pos$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void pos$set(MemorySegment seg, long index, long x) {
        AVIOContext.pos$VH.set(seg.asSlice(index*sizeof()), x);
    }
    static final VarHandle eof_reached$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("eof_reached"));
    public static VarHandle eof_reached$VH() {
        return AVIOContext.eof_reached$VH;
    }
    /**
     * Getter for field:
     * {@snippet :
     * int eof_reached;
     * }
     */
    public static int eof_reached$get(MemorySegment seg) {
        return (int)AVIOContext.eof_reached$VH.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * int eof_reached;
     * }
     */
    public static void eof_reached$set(MemorySegment seg, int x) {
        AVIOContext.eof_reached$VH.set(seg, x);
    }
    public static int eof_reached$get(MemorySegment seg, long index) {
        return (int)AVIOContext.eof_reached$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void eof_reached$set(MemorySegment seg, long index, int x) {
        AVIOContext.eof_reached$VH.set(seg.asSlice(index*sizeof()), x);
    }
    static final VarHandle error$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("error"));
    public static VarHandle error$VH() {
        return AVIOContext.error$VH;
    }
    /**
     * Getter for field:
     * {@snippet :
     * int error;
     * }
     */
    public static int error$get(MemorySegment seg) {
        return (int)AVIOContext.error$VH.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * int error;
     * }
     */
    public static void error$set(MemorySegment seg, int x) {
        AVIOContext.error$VH.set(seg, x);
    }
    public static int error$get(MemorySegment seg, long index) {
        return (int)AVIOContext.error$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void error$set(MemorySegment seg, long index, int x) {
        AVIOContext.error$VH.set(seg.asSlice(index*sizeof()), x);
    }
    static final VarHandle write_flag$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("write_flag"));
    public static VarHandle write_flag$VH() {
        return AVIOContext.write_flag$VH;
    }
    /**
     * Getter for field:
     * {@snippet :
     * int write_flag;
     * }
     */
    public static int write_flag$get(MemorySegment seg) {
        return (int)AVIOContext.write_flag$VH.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * int write_flag;
     * }
     */
    public static void write_flag$set(MemorySegment seg, int x) {
        AVIOContext.write_flag$VH.set(seg, x);
    }
    public static int write_flag$get(MemorySegment seg, long index) {
        return (int)AVIOContext.write_flag$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void write_flag$set(MemorySegment seg, long index, int x) {
        AVIOContext.write_flag$VH.set(seg.asSlice(index*sizeof()), x);
    }
    static final VarHandle max_packet_size$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("max_packet_size"));
    public static VarHandle max_packet_size$VH() {
        return AVIOContext.max_packet_size$VH;
    }
    /**
     * Getter for field:
     * {@snippet :
     * int max_packet_size;
     * }
     */
    public static int max_packet_size$get(MemorySegment seg) {
        return (int)AVIOContext.max_packet_size$VH.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * int max_packet_size;
     * }
     */
    public static void max_packet_size$set(MemorySegment seg, int x) {
        AVIOContext.max_packet_size$VH.set(seg, x);
    }
    public static int max_packet_size$get(MemorySegment seg, long index) {
        return (int)AVIOContext.max_packet_size$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void max_packet_size$set(MemorySegment seg, long index, int x) {
        AVIOContext.max_packet_size$VH.set(seg.asSlice(index*sizeof()), x);
    }
    static final VarHandle min_packet_size$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("min_packet_size"));
    public static VarHandle min_packet_size$VH() {
        return AVIOContext.min_packet_size$VH;
    }
    /**
     * Getter for field:
     * {@snippet :
     * int min_packet_size;
     * }
     */
    public static int min_packet_size$get(MemorySegment seg) {
        return (int)AVIOContext.min_packet_size$VH.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * int min_packet_size;
     * }
     */
    public static void min_packet_size$set(MemorySegment seg, int x) {
        AVIOContext.min_packet_size$VH.set(seg, x);
    }
    public static int min_packet_size$get(MemorySegment seg, long index) {
        return (int)AVIOContext.min_packet_size$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void min_packet_size$set(MemorySegment seg, long index, int x) {
        AVIOContext.min_packet_size$VH.set(seg.asSlice(index*sizeof()), x);
    }
    static final VarHandle checksum$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("checksum"));
    public static VarHandle checksum$VH() {
        return AVIOContext.checksum$VH;
    }
    /**
     * Getter for field:
     * {@snippet :
     * unsigned long checksum;
     * }
     */
    public static int checksum$get(MemorySegment seg) {
        return (int)AVIOContext.checksum$VH.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * unsigned long checksum;
     * }
     */
    public static void checksum$set(MemorySegment seg, int x) {
        AVIOContext.checksum$VH.set(seg, x);
    }
    public static int checksum$get(MemorySegment seg, long index) {
        return (int)AVIOContext.checksum$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void checksum$set(MemorySegment seg, long index, int x) {
        AVIOContext.checksum$VH.set(seg.asSlice(index*sizeof()), x);
    }
    static final VarHandle checksum_ptr$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("checksum_ptr"));
    public static VarHandle checksum_ptr$VH() {
        return AVIOContext.checksum_ptr$VH;
    }
    /**
     * Getter for field:
     * {@snippet :
     * unsigned char* checksum_ptr;
     * }
     */
    public static MemorySegment checksum_ptr$get(MemorySegment seg) {
        return (java.lang.foreign.MemorySegment)AVIOContext.checksum_ptr$VH.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * unsigned char* checksum_ptr;
     * }
     */
    public static void checksum_ptr$set(MemorySegment seg, MemorySegment x) {
        AVIOContext.checksum_ptr$VH.set(seg, x);
    }
    public static MemorySegment checksum_ptr$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemorySegment)AVIOContext.checksum_ptr$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void checksum_ptr$set(MemorySegment seg, long index, MemorySegment x) {
        AVIOContext.checksum_ptr$VH.set(seg.asSlice(index*sizeof()), x);
    }
    static final FunctionDescriptor update_checksum$FUNC = FunctionDescriptor.of(Constants$root.C_LONG$LAYOUT,
        Constants$root.C_LONG$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_LONG$LAYOUT
    );
    static final FunctionDescriptor update_checksum_UP$FUNC = FunctionDescriptor.of(Constants$root.C_LONG$LAYOUT,
        Constants$root.C_LONG$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_LONG$LAYOUT
    );
    static final MethodHandle update_checksum_UP$MH = RuntimeHelper.upcallHandle(update_checksum.class, "apply", AVIOContext.update_checksum_UP$FUNC);
    static final FunctionDescriptor update_checksum_DOWN$FUNC = FunctionDescriptor.of(Constants$root.C_LONG$LAYOUT,
        Constants$root.C_LONG$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_LONG$LAYOUT
    );
    static final MethodHandle update_checksum_DOWN$MH = RuntimeHelper.downcallHandle(
        AVIOContext.update_checksum_DOWN$FUNC
    );
    /**
     * {@snippet :
 * unsigned long (*update_checksum)(unsigned long,const uint8_t*,unsigned int);
     * }
     */
    public interface update_checksum {

        int apply(int _x0, java.lang.foreign.MemorySegment _x1, int _x2);
        static MemorySegment allocate(update_checksum fi, SegmentScope scope) {
            return RuntimeHelper.upcallStub(AVIOContext.update_checksum_UP$MH, fi, AVIOContext.update_checksum$FUNC, scope);
        }
        static update_checksum ofAddress(MemorySegment addr, SegmentScope scope) {
            MemorySegment symbol = MemorySegment.ofAddress(addr.address(), 0, scope);
            return (int __x0, java.lang.foreign.MemorySegment __x1, int __x2) -> {
                try {
                    return (int)AVIOContext.update_checksum_DOWN$MH.invokeExact(symbol, __x0, __x1, __x2);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    static final VarHandle update_checksum$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("update_checksum"));
    public static VarHandle update_checksum$VH() {
        return AVIOContext.update_checksum$VH;
    }
    /**
     * Getter for field:
     * {@snippet :
     * unsigned long (*update_checksum)(unsigned long,const uint8_t*,unsigned int);
     * }
     */
    public static MemorySegment update_checksum$get(MemorySegment seg) {
        return (java.lang.foreign.MemorySegment)AVIOContext.update_checksum$VH.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * unsigned long (*update_checksum)(unsigned long,const uint8_t*,unsigned int);
     * }
     */
    public static void update_checksum$set(MemorySegment seg, MemorySegment x) {
        AVIOContext.update_checksum$VH.set(seg, x);
    }
    public static MemorySegment update_checksum$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemorySegment)AVIOContext.update_checksum$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void update_checksum$set(MemorySegment seg, long index, MemorySegment x) {
        AVIOContext.update_checksum$VH.set(seg.asSlice(index*sizeof()), x);
    }
    public static update_checksum update_checksum(MemorySegment segment, SegmentScope scope) {
        return update_checksum.ofAddress(update_checksum$get(segment), scope);
    }
    static final FunctionDescriptor read_pause$FUNC = FunctionDescriptor.of(Constants$root.C_LONG$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_LONG$LAYOUT
    );
    static final FunctionDescriptor read_pause_UP$FUNC = FunctionDescriptor.of(Constants$root.C_LONG$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_LONG$LAYOUT
    );
    static final MethodHandle read_pause_UP$MH = RuntimeHelper.upcallHandle(read_pause.class, "apply", AVIOContext.read_pause_UP$FUNC);
    static final FunctionDescriptor read_pause_DOWN$FUNC = FunctionDescriptor.of(Constants$root.C_LONG$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_LONG$LAYOUT
    );
    static final MethodHandle read_pause_DOWN$MH = RuntimeHelper.downcallHandle(
        AVIOContext.read_pause_DOWN$FUNC
    );
    /**
     * {@snippet :
 * int (*read_pause)(void*,int);
     * }
     */
    public interface read_pause {

        int apply(java.lang.foreign.MemorySegment _x0, int _x1);
        static MemorySegment allocate(read_pause fi, SegmentScope scope) {
            return RuntimeHelper.upcallStub(AVIOContext.read_pause_UP$MH, fi, AVIOContext.read_pause$FUNC, scope);
        }
        static read_pause ofAddress(MemorySegment addr, SegmentScope scope) {
            MemorySegment symbol = MemorySegment.ofAddress(addr.address(), 0, scope);
            return (java.lang.foreign.MemorySegment __x0, int __x1) -> {
                try {
                    return (int)AVIOContext.read_pause_DOWN$MH.invokeExact(symbol, __x0, __x1);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    static final VarHandle read_pause$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("read_pause"));
    public static VarHandle read_pause$VH() {
        return AVIOContext.read_pause$VH;
    }
    /**
     * Getter for field:
     * {@snippet :
     * int (*read_pause)(void*,int);
     * }
     */
    public static MemorySegment read_pause$get(MemorySegment seg) {
        return (java.lang.foreign.MemorySegment)AVIOContext.read_pause$VH.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * int (*read_pause)(void*,int);
     * }
     */
    public static void read_pause$set(MemorySegment seg, MemorySegment x) {
        AVIOContext.read_pause$VH.set(seg, x);
    }
    public static MemorySegment read_pause$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemorySegment)AVIOContext.read_pause$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void read_pause$set(MemorySegment seg, long index, MemorySegment x) {
        AVIOContext.read_pause$VH.set(seg.asSlice(index*sizeof()), x);
    }
    public static read_pause read_pause(MemorySegment segment, SegmentScope scope) {
        return read_pause.ofAddress(read_pause$get(segment), scope);
    }
    static final FunctionDescriptor read_seek$FUNC = FunctionDescriptor.of(Constants$root.C_LONG_LONG$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_LONG$LAYOUT,
        Constants$root.C_LONG_LONG$LAYOUT,
        Constants$root.C_LONG$LAYOUT
    );
    static final FunctionDescriptor read_seek_UP$FUNC = FunctionDescriptor.of(Constants$root.C_LONG_LONG$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_LONG$LAYOUT,
        Constants$root.C_LONG_LONG$LAYOUT,
        Constants$root.C_LONG$LAYOUT
    );
    static final MethodHandle read_seek_UP$MH = RuntimeHelper.upcallHandle(read_seek.class, "apply", AVIOContext.read_seek_UP$FUNC);
    static final FunctionDescriptor read_seek_DOWN$FUNC = FunctionDescriptor.of(Constants$root.C_LONG_LONG$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_LONG$LAYOUT,
        Constants$root.C_LONG_LONG$LAYOUT,
        Constants$root.C_LONG$LAYOUT
    );
    static final MethodHandle read_seek_DOWN$MH = RuntimeHelper.downcallHandle(
        AVIOContext.read_seek_DOWN$FUNC
    );
    /**
     * {@snippet :
 * int64_t (*read_seek)(void*,int,int64_t,int);
     * }
     */
    public interface read_seek {

        long apply(java.lang.foreign.MemorySegment _x0, int _x1, long _x2, int _x3);
        static MemorySegment allocate(read_seek fi, SegmentScope scope) {
            return RuntimeHelper.upcallStub(AVIOContext.read_seek_UP$MH, fi, AVIOContext.read_seek$FUNC, scope);
        }
        static read_seek ofAddress(MemorySegment addr, SegmentScope scope) {
            MemorySegment symbol = MemorySegment.ofAddress(addr.address(), 0, scope);
            return (java.lang.foreign.MemorySegment __x0, int __x1, long __x2, int __x3) -> {
                try {
                    return (long)AVIOContext.read_seek_DOWN$MH.invokeExact(symbol, __x0, __x1, __x2, __x3);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    static final VarHandle read_seek$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("read_seek"));
    public static VarHandle read_seek$VH() {
        return AVIOContext.read_seek$VH;
    }
    /**
     * Getter for field:
     * {@snippet :
     * int64_t (*read_seek)(void*,int,int64_t,int);
     * }
     */
    public static MemorySegment read_seek$get(MemorySegment seg) {
        return (java.lang.foreign.MemorySegment)AVIOContext.read_seek$VH.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * int64_t (*read_seek)(void*,int,int64_t,int);
     * }
     */
    public static void read_seek$set(MemorySegment seg, MemorySegment x) {
        AVIOContext.read_seek$VH.set(seg, x);
    }
    public static MemorySegment read_seek$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemorySegment)AVIOContext.read_seek$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void read_seek$set(MemorySegment seg, long index, MemorySegment x) {
        AVIOContext.read_seek$VH.set(seg.asSlice(index*sizeof()), x);
    }
    public static read_seek read_seek(MemorySegment segment, SegmentScope scope) {
        return read_seek.ofAddress(read_seek$get(segment), scope);
    }
    static final VarHandle seekable$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("seekable"));
    public static VarHandle seekable$VH() {
        return AVIOContext.seekable$VH;
    }
    /**
     * Getter for field:
     * {@snippet :
     * int seekable;
     * }
     */
    public static int seekable$get(MemorySegment seg) {
        return (int)AVIOContext.seekable$VH.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * int seekable;
     * }
     */
    public static void seekable$set(MemorySegment seg, int x) {
        AVIOContext.seekable$VH.set(seg, x);
    }
    public static int seekable$get(MemorySegment seg, long index) {
        return (int)AVIOContext.seekable$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void seekable$set(MemorySegment seg, long index, int x) {
        AVIOContext.seekable$VH.set(seg.asSlice(index*sizeof()), x);
    }
    static final VarHandle direct$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("direct"));
    public static VarHandle direct$VH() {
        return AVIOContext.direct$VH;
    }
    /**
     * Getter for field:
     * {@snippet :
     * int direct;
     * }
     */
    public static int direct$get(MemorySegment seg) {
        return (int)AVIOContext.direct$VH.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * int direct;
     * }
     */
    public static void direct$set(MemorySegment seg, int x) {
        AVIOContext.direct$VH.set(seg, x);
    }
    public static int direct$get(MemorySegment seg, long index) {
        return (int)AVIOContext.direct$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void direct$set(MemorySegment seg, long index, int x) {
        AVIOContext.direct$VH.set(seg.asSlice(index*sizeof()), x);
    }
    static final VarHandle protocol_whitelist$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("protocol_whitelist"));
    public static VarHandle protocol_whitelist$VH() {
        return AVIOContext.protocol_whitelist$VH;
    }
    /**
     * Getter for field:
     * {@snippet :
     * char* protocol_whitelist;
     * }
     */
    public static MemorySegment protocol_whitelist$get(MemorySegment seg) {
        return (java.lang.foreign.MemorySegment)AVIOContext.protocol_whitelist$VH.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * char* protocol_whitelist;
     * }
     */
    public static void protocol_whitelist$set(MemorySegment seg, MemorySegment x) {
        AVIOContext.protocol_whitelist$VH.set(seg, x);
    }
    public static MemorySegment protocol_whitelist$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemorySegment)AVIOContext.protocol_whitelist$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void protocol_whitelist$set(MemorySegment seg, long index, MemorySegment x) {
        AVIOContext.protocol_whitelist$VH.set(seg.asSlice(index*sizeof()), x);
    }
    static final VarHandle protocol_blacklist$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("protocol_blacklist"));
    public static VarHandle protocol_blacklist$VH() {
        return AVIOContext.protocol_blacklist$VH;
    }
    /**
     * Getter for field:
     * {@snippet :
     * char* protocol_blacklist;
     * }
     */
    public static MemorySegment protocol_blacklist$get(MemorySegment seg) {
        return (java.lang.foreign.MemorySegment)AVIOContext.protocol_blacklist$VH.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * char* protocol_blacklist;
     * }
     */
    public static void protocol_blacklist$set(MemorySegment seg, MemorySegment x) {
        AVIOContext.protocol_blacklist$VH.set(seg, x);
    }
    public static MemorySegment protocol_blacklist$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemorySegment)AVIOContext.protocol_blacklist$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void protocol_blacklist$set(MemorySegment seg, long index, MemorySegment x) {
        AVIOContext.protocol_blacklist$VH.set(seg.asSlice(index*sizeof()), x);
    }
    static final FunctionDescriptor write_data_type$FUNC = FunctionDescriptor.of(Constants$root.C_LONG$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_LONG$LAYOUT,
        Constants$root.C_LONG$LAYOUT,
        Constants$root.C_LONG_LONG$LAYOUT
    );
    static final FunctionDescriptor write_data_type_UP$FUNC = FunctionDescriptor.of(Constants$root.C_LONG$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_LONG$LAYOUT,
        Constants$root.C_LONG$LAYOUT,
        Constants$root.C_LONG_LONG$LAYOUT
    );
    static final MethodHandle write_data_type_UP$MH = RuntimeHelper.upcallHandle(write_data_type.class, "apply", AVIOContext.write_data_type_UP$FUNC);
    static final FunctionDescriptor write_data_type_DOWN$FUNC = FunctionDescriptor.of(Constants$root.C_LONG$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_LONG$LAYOUT,
        Constants$root.C_LONG$LAYOUT,
        Constants$root.C_LONG_LONG$LAYOUT
    );
    static final MethodHandle write_data_type_DOWN$MH = RuntimeHelper.downcallHandle(
        AVIOContext.write_data_type_DOWN$FUNC
    );
    /**
     * {@snippet :
 * int (*write_data_type)(void*,uint8_t*,int,enum AVIODataMarkerType,int64_t);
     * }
     */
    public interface write_data_type {

        int apply(java.lang.foreign.MemorySegment _x0, java.lang.foreign.MemorySegment _x1, int _x2, int _x3, long _x4);
        static MemorySegment allocate(write_data_type fi, SegmentScope scope) {
            return RuntimeHelper.upcallStub(AVIOContext.write_data_type_UP$MH, fi, AVIOContext.write_data_type$FUNC, scope);
        }
        static write_data_type ofAddress(MemorySegment addr, SegmentScope scope) {
            MemorySegment symbol = MemorySegment.ofAddress(addr.address(), 0, scope);
            return (java.lang.foreign.MemorySegment __x0, java.lang.foreign.MemorySegment __x1, int __x2, int __x3, long __x4) -> {
                try {
                    return (int)AVIOContext.write_data_type_DOWN$MH.invokeExact(symbol, __x0, __x1, __x2, __x3, __x4);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    static final VarHandle write_data_type$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("write_data_type"));
    public static VarHandle write_data_type$VH() {
        return AVIOContext.write_data_type$VH;
    }
    /**
     * Getter for field:
     * {@snippet :
     * int (*write_data_type)(void*,uint8_t*,int,enum AVIODataMarkerType,int64_t);
     * }
     */
    public static MemorySegment write_data_type$get(MemorySegment seg) {
        return (java.lang.foreign.MemorySegment)AVIOContext.write_data_type$VH.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * int (*write_data_type)(void*,uint8_t*,int,enum AVIODataMarkerType,int64_t);
     * }
     */
    public static void write_data_type$set(MemorySegment seg, MemorySegment x) {
        AVIOContext.write_data_type$VH.set(seg, x);
    }
    public static MemorySegment write_data_type$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemorySegment)AVIOContext.write_data_type$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void write_data_type$set(MemorySegment seg, long index, MemorySegment x) {
        AVIOContext.write_data_type$VH.set(seg.asSlice(index*sizeof()), x);
    }
    public static write_data_type write_data_type(MemorySegment segment, SegmentScope scope) {
        return write_data_type.ofAddress(write_data_type$get(segment), scope);
    }
    static final VarHandle ignore_boundary_point$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("ignore_boundary_point"));
    public static VarHandle ignore_boundary_point$VH() {
        return AVIOContext.ignore_boundary_point$VH;
    }
    /**
     * Getter for field:
     * {@snippet :
     * int ignore_boundary_point;
     * }
     */
    public static int ignore_boundary_point$get(MemorySegment seg) {
        return (int)AVIOContext.ignore_boundary_point$VH.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * int ignore_boundary_point;
     * }
     */
    public static void ignore_boundary_point$set(MemorySegment seg, int x) {
        AVIOContext.ignore_boundary_point$VH.set(seg, x);
    }
    public static int ignore_boundary_point$get(MemorySegment seg, long index) {
        return (int)AVIOContext.ignore_boundary_point$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void ignore_boundary_point$set(MemorySegment seg, long index, int x) {
        AVIOContext.ignore_boundary_point$VH.set(seg.asSlice(index*sizeof()), x);
    }
    static final VarHandle buf_ptr_max$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("buf_ptr_max"));
    public static VarHandle buf_ptr_max$VH() {
        return AVIOContext.buf_ptr_max$VH;
    }
    /**
     * Getter for field:
     * {@snippet :
     * unsigned char* buf_ptr_max;
     * }
     */
    public static MemorySegment buf_ptr_max$get(MemorySegment seg) {
        return (java.lang.foreign.MemorySegment)AVIOContext.buf_ptr_max$VH.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * unsigned char* buf_ptr_max;
     * }
     */
    public static void buf_ptr_max$set(MemorySegment seg, MemorySegment x) {
        AVIOContext.buf_ptr_max$VH.set(seg, x);
    }
    public static MemorySegment buf_ptr_max$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemorySegment)AVIOContext.buf_ptr_max$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void buf_ptr_max$set(MemorySegment seg, long index, MemorySegment x) {
        AVIOContext.buf_ptr_max$VH.set(seg.asSlice(index*sizeof()), x);
    }
    static final VarHandle bytes_read$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("bytes_read"));
    public static VarHandle bytes_read$VH() {
        return AVIOContext.bytes_read$VH;
    }
    /**
     * Getter for field:
     * {@snippet :
     * int64_t bytes_read;
     * }
     */
    public static long bytes_read$get(MemorySegment seg) {
        return (long)AVIOContext.bytes_read$VH.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * int64_t bytes_read;
     * }
     */
    public static void bytes_read$set(MemorySegment seg, long x) {
        AVIOContext.bytes_read$VH.set(seg, x);
    }
    public static long bytes_read$get(MemorySegment seg, long index) {
        return (long)AVIOContext.bytes_read$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void bytes_read$set(MemorySegment seg, long index, long x) {
        AVIOContext.bytes_read$VH.set(seg.asSlice(index*sizeof()), x);
    }
    static final VarHandle bytes_written$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("bytes_written"));
    public static VarHandle bytes_written$VH() {
        return AVIOContext.bytes_written$VH;
    }
    /**
     * Getter for field:
     * {@snippet :
     * int64_t bytes_written;
     * }
     */
    public static long bytes_written$get(MemorySegment seg) {
        return (long)AVIOContext.bytes_written$VH.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * int64_t bytes_written;
     * }
     */
    public static void bytes_written$set(MemorySegment seg, long x) {
        AVIOContext.bytes_written$VH.set(seg, x);
    }
    public static long bytes_written$get(MemorySegment seg, long index) {
        return (long)AVIOContext.bytes_written$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void bytes_written$set(MemorySegment seg, long index, long x) {
        AVIOContext.bytes_written$VH.set(seg.asSlice(index*sizeof()), x);
    }
    public static long sizeof() { return $LAYOUT().byteSize(); }
    public static MemorySegment allocate(SegmentAllocator allocator) { return allocator.allocate($LAYOUT()); }
    public static MemorySegment allocateArray(long len, SegmentAllocator allocator) {
        return allocator.allocate(MemoryLayout.sequenceLayout(len, $LAYOUT()));
    }
    public static MemorySegment ofAddress(MemorySegment addr, SegmentScope scope) { return RuntimeHelper.asArray(addr, $LAYOUT(), 1, scope); }
}


